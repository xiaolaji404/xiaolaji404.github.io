<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ascll完整码表</title>
    <link href="/20230625/Ascll%E5%AE%8C%E6%95%B4%E7%A0%81%E8%A1%A8/"/>
    <url>/20230625/Ascll%E5%AE%8C%E6%95%B4%E7%A0%81%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1><strong>ASCII码表</strong></h1><table><thead><tr><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th><th style="text-align:center"><strong>ASCII值</strong></th><th style="text-align:center"><strong>控制字符</strong></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">NUL</td><td style="text-align:center">32</td><td style="text-align:center">(space)</td><td style="text-align:center">64</td><td style="text-align:center">@</td><td style="text-align:center">96</td><td style="text-align:center">、</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">SOH</td><td style="text-align:center">33</td><td style="text-align:center">!</td><td style="text-align:center">65</td><td style="text-align:center">A</td><td style="text-align:center">97</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">STX</td><td style="text-align:center">34</td><td style="text-align:center">&quot;</td><td style="text-align:center">66</td><td style="text-align:center">B</td><td style="text-align:center">98</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">ETX</td><td style="text-align:center">35</td><td style="text-align:center">#</td><td style="text-align:center">67</td><td style="text-align:center">C</td><td style="text-align:center">99</td><td style="text-align:center">c</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">EOT</td><td style="text-align:center">36</td><td style="text-align:center">$</td><td style="text-align:center">68</td><td style="text-align:center">D</td><td style="text-align:center">100</td><td style="text-align:center">d</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">ENQ</td><td style="text-align:center">37</td><td style="text-align:center">%</td><td style="text-align:center">69</td><td style="text-align:center">E</td><td style="text-align:center">101</td><td style="text-align:center">e</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">ACK</td><td style="text-align:center">38</td><td style="text-align:center">&amp;</td><td style="text-align:center">70</td><td style="text-align:center">F</td><td style="text-align:center">102</td><td style="text-align:center">f</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">BEL</td><td style="text-align:center">39</td><td style="text-align:center">’</td><td style="text-align:center">71</td><td style="text-align:center">G</td><td style="text-align:center">103</td><td style="text-align:center">g</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">BS</td><td style="text-align:center">40</td><td style="text-align:center">(</td><td style="text-align:center">72</td><td style="text-align:center">H</td><td style="text-align:center">104</td><td style="text-align:center">h</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">HT</td><td style="text-align:center">41</td><td style="text-align:center">)</td><td style="text-align:center">73</td><td style="text-align:center">I</td><td style="text-align:center">105</td><td style="text-align:center">i</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">LF</td><td style="text-align:center">42</td><td style="text-align:center">*</td><td style="text-align:center">74</td><td style="text-align:center">J</td><td style="text-align:center">106</td><td style="text-align:center">j</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">VT</td><td style="text-align:center">43</td><td style="text-align:center">+</td><td style="text-align:center">75</td><td style="text-align:center">K</td><td style="text-align:center">107</td><td style="text-align:center">k</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">FF</td><td style="text-align:center">44</td><td style="text-align:center">,</td><td style="text-align:center">76</td><td style="text-align:center">L</td><td style="text-align:center">108</td><td style="text-align:center">l</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">CR</td><td style="text-align:center">45</td><td style="text-align:center">-</td><td style="text-align:center">77</td><td style="text-align:center">M</td><td style="text-align:center">109</td><td style="text-align:center">m</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">SO</td><td style="text-align:center">46</td><td style="text-align:center">.</td><td style="text-align:center">78</td><td style="text-align:center">N</td><td style="text-align:center">110</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">SI</td><td style="text-align:center">47</td><td style="text-align:center">/</td><td style="text-align:center">79</td><td style="text-align:center">O</td><td style="text-align:center">111</td><td style="text-align:center">o</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">DLE</td><td style="text-align:center">48</td><td style="text-align:center">0</td><td style="text-align:center">80</td><td style="text-align:center">P</td><td style="text-align:center">112</td><td style="text-align:center">p</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">DCI</td><td style="text-align:center">49</td><td style="text-align:center">1</td><td style="text-align:center">81</td><td style="text-align:center">Q</td><td style="text-align:center">113</td><td style="text-align:center">q</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">DC2</td><td style="text-align:center">50</td><td style="text-align:center">2</td><td style="text-align:center">82</td><td style="text-align:center">R</td><td style="text-align:center">114</td><td style="text-align:center">r</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">DC3</td><td style="text-align:center">51</td><td style="text-align:center">3</td><td style="text-align:center">83</td><td style="text-align:center">S</td><td style="text-align:center">115</td><td style="text-align:center">s</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">DC4</td><td style="text-align:center">52</td><td style="text-align:center">4</td><td style="text-align:center">84</td><td style="text-align:center">T</td><td style="text-align:center">116</td><td style="text-align:center">t</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">NAK</td><td style="text-align:center">53</td><td style="text-align:center">5</td><td style="text-align:center">85</td><td style="text-align:center">U</td><td style="text-align:center">117</td><td style="text-align:center">u</td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">SYN</td><td style="text-align:center">54</td><td style="text-align:center">6</td><td style="text-align:center">86</td><td style="text-align:center">V</td><td style="text-align:center">118</td><td style="text-align:center">v</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">TB</td><td style="text-align:center">55</td><td style="text-align:center">7</td><td style="text-align:center">87</td><td style="text-align:center">W</td><td style="text-align:center">119</td><td style="text-align:center">w</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">CAN</td><td style="text-align:center">56</td><td style="text-align:center">8</td><td style="text-align:center">88</td><td style="text-align:center">X</td><td style="text-align:center">120</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">EM</td><td style="text-align:center">57</td><td style="text-align:center">9</td><td style="text-align:center">89</td><td style="text-align:center">Y</td><td style="text-align:center">121</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">26</td><td style="text-align:center">SUB</td><td style="text-align:center">58</td><td style="text-align:center">:</td><td style="text-align:center">90</td><td style="text-align:center">Z</td><td style="text-align:center">122</td><td style="text-align:center">z</td></tr><tr><td style="text-align:center">27</td><td style="text-align:center">ESC</td><td style="text-align:center">59</td><td style="text-align:center">;</td><td style="text-align:center">91</td><td style="text-align:center">[</td><td style="text-align:center">123</td><td style="text-align:center">{}</td></tr><tr><td style="text-align:center">28</td><td style="text-align:center">FS</td><td style="text-align:center">60</td><td style="text-align:center">&lt;</td><td style="text-align:center">92</td><td style="text-align:center">\</td><td style="text-align:center">124</td><td style="text-align:center">|</td></tr><tr><td style="text-align:center">29</td><td style="text-align:center">GS</td><td style="text-align:center">61</td><td style="text-align:center">=</td><td style="text-align:center">93</td><td style="text-align:center">]</td><td style="text-align:center">125</td><td style="text-align:center">}</td></tr><tr><td style="text-align:center">30</td><td style="text-align:center">RS</td><td style="text-align:center">62</td><td style="text-align:center">&gt;</td><td style="text-align:center">94</td><td style="text-align:center">^</td><td style="text-align:center">126</td><td style="text-align:center">~</td></tr><tr><td style="text-align:center">31</td><td style="text-align:center">US</td><td style="text-align:center">63</td><td style="text-align:center">？</td><td style="text-align:center">95</td><td style="text-align:center">—</td><td style="text-align:center">127</td><td style="text-align:center">DEL</td></tr></tbody></table><h2 id="ASCII诠释部分"><strong>ASCII诠释部分</strong></h2><p>ASCII中的0<sub>31为控制字符；32</sub>126为打印字符；127为Delete(删除)命令。</p><h3 id="下表为控制字符释义">下表为控制字符释义</h3><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th><th style="text-align:center"><strong>十进制</strong></th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">00</td><td style="text-align:center">空</td><td style="text-align:center">15</td><td style="text-align:center">10</td><td style="text-align:center">数据链路转意</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">01</td><td style="text-align:center">头标开始</td><td style="text-align:center">16</td><td style="text-align:center">11</td><td style="text-align:center">设备控制 1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">02</td><td style="text-align:center">正文开始</td><td style="text-align:center">17</td><td style="text-align:center">12</td><td style="text-align:center">设备控制 2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">03</td><td style="text-align:center">正文结束</td><td style="text-align:center">18</td><td style="text-align:center">13</td><td style="text-align:center">设备控制 3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">04</td><td style="text-align:center">传输结束</td><td style="text-align:center">19</td><td style="text-align:center">14</td><td style="text-align:center">设备控制 4</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">05</td><td style="text-align:center">查询</td><td style="text-align:center">20</td><td style="text-align:center">15</td><td style="text-align:center">反确认</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">06</td><td style="text-align:center">确认</td><td style="text-align:center">21</td><td style="text-align:center">16</td><td style="text-align:center">同步空闲</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">07</td><td style="text-align:center">震铃</td><td style="text-align:center">22</td><td style="text-align:center">17</td><td style="text-align:center">传输块结束</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">08</td><td style="text-align:center">backspace</td><td style="text-align:center">23</td><td style="text-align:center">18</td><td style="text-align:center">取消</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">09</td><td style="text-align:center">水平制表符</td><td style="text-align:center">24</td><td style="text-align:center">19</td><td style="text-align:center">媒体结束</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">0A</td><td style="text-align:center">换行/新行</td><td style="text-align:center">25</td><td style="text-align:center">1A</td><td style="text-align:center">替换</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">0B</td><td style="text-align:center">竖直制表符</td><td style="text-align:center">26</td><td style="text-align:center">1B</td><td style="text-align:center">转意</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">0C</td><td style="text-align:center">换页/新页</td><td style="text-align:center">27</td><td style="text-align:center">1C</td><td style="text-align:center">文件分隔符</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">0D</td><td style="text-align:center">回车</td><td style="text-align:center">28</td><td style="text-align:center">1D</td><td style="text-align:center">组分隔符</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">0E</td><td style="text-align:center">移出</td><td style="text-align:center">29</td><td style="text-align:center">1E</td><td style="text-align:center">记录分隔符</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">0F</td><td style="text-align:center">移入</td><td style="text-align:center">30</td><td style="text-align:center">1F</td><td style="text-align:center">单元分隔符</td></tr></tbody></table><h2 id="ASCII扩展字符"><strong>ASCII扩展字符</strong></h2><p>为了适应更多字符,128<sub>255，或者-128</sub>-1,其中，-128对应128，依次递增对应</p><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th><th style="text-align:center"><strong>十进制</strong></th><th style="text-align:center"><strong>十六进制</strong></th><th style="text-align:center"><strong>字符</strong></th></tr></thead><tbody><tr><td style="text-align:center">128</td><td style="text-align:center">80</td><td style="text-align:center">Ç</td><td style="text-align:center">192</td><td style="text-align:center">C0</td><td style="text-align:center">└</td></tr><tr><td style="text-align:center">129</td><td style="text-align:center">81</td><td style="text-align:center">ü</td><td style="text-align:center">193</td><td style="text-align:center">C1</td><td style="text-align:center">┴</td></tr><tr><td style="text-align:center">130</td><td style="text-align:center">82</td><td style="text-align:center">é</td><td style="text-align:center">194</td><td style="text-align:center">C2</td><td style="text-align:center">┬</td></tr><tr><td style="text-align:center">131</td><td style="text-align:center">83</td><td style="text-align:center">â</td><td style="text-align:center">195</td><td style="text-align:center">C3</td><td style="text-align:center">├</td></tr><tr><td style="text-align:center">132</td><td style="text-align:center">84</td><td style="text-align:center">ä</td><td style="text-align:center">196</td><td style="text-align:center">C4</td><td style="text-align:center">─</td></tr><tr><td style="text-align:center">133</td><td style="text-align:center">85</td><td style="text-align:center">à</td><td style="text-align:center">197</td><td style="text-align:center">C5</td><td style="text-align:center">┼</td></tr><tr><td style="text-align:center">134</td><td style="text-align:center">86</td><td style="text-align:center">å</td><td style="text-align:center">198</td><td style="text-align:center">C6</td><td style="text-align:center">╞</td></tr><tr><td style="text-align:center">135</td><td style="text-align:center">87</td><td style="text-align:center">ç</td><td style="text-align:center">199</td><td style="text-align:center">C7</td><td style="text-align:center">╟</td></tr><tr><td style="text-align:center">136</td><td style="text-align:center">88</td><td style="text-align:center">ê</td><td style="text-align:center">200</td><td style="text-align:center">C8</td><td style="text-align:center">╚</td></tr><tr><td style="text-align:center">137</td><td style="text-align:center">89</td><td style="text-align:center">ë</td><td style="text-align:center">201</td><td style="text-align:center">C9</td><td style="text-align:center">╔</td></tr><tr><td style="text-align:center">138</td><td style="text-align:center">8A</td><td style="text-align:center">è</td><td style="text-align:center">202</td><td style="text-align:center">CA</td><td style="text-align:center">╩</td></tr><tr><td style="text-align:center">139</td><td style="text-align:center">8B</td><td style="text-align:center">ï</td><td style="text-align:center">203</td><td style="text-align:center">CB</td><td style="text-align:center">╦</td></tr><tr><td style="text-align:center">140</td><td style="text-align:center">8C</td><td style="text-align:center">î</td><td style="text-align:center">204</td><td style="text-align:center">CC</td><td style="text-align:center">╠</td></tr><tr><td style="text-align:center">141</td><td style="text-align:center">8D</td><td style="text-align:center">ì</td><td style="text-align:center">205</td><td style="text-align:center">CD</td><td style="text-align:center">═</td></tr><tr><td style="text-align:center">142</td><td style="text-align:center">8E</td><td style="text-align:center">Ä</td><td style="text-align:center">206</td><td style="text-align:center">CE</td><td style="text-align:center">╬</td></tr><tr><td style="text-align:center">143</td><td style="text-align:center">8F</td><td style="text-align:center">Å</td><td style="text-align:center">207</td><td style="text-align:center">CF</td><td style="text-align:center">╧</td></tr><tr><td style="text-align:center">144</td><td style="text-align:center">90</td><td style="text-align:center">É</td><td style="text-align:center">208</td><td style="text-align:center">D0</td><td style="text-align:center">╨</td></tr><tr><td style="text-align:center">145</td><td style="text-align:center">91</td><td style="text-align:center">æ</td><td style="text-align:center">209</td><td style="text-align:center">D1</td><td style="text-align:center">╤</td></tr><tr><td style="text-align:center">146</td><td style="text-align:center">92</td><td style="text-align:center">Æ</td><td style="text-align:center">210</td><td style="text-align:center">D2</td><td style="text-align:center">╥</td></tr><tr><td style="text-align:center">147</td><td style="text-align:center">93</td><td style="text-align:center">ô</td><td style="text-align:center">211</td><td style="text-align:center">D3</td><td style="text-align:center">╙</td></tr><tr><td style="text-align:center">148</td><td style="text-align:center">94</td><td style="text-align:center">ö</td><td style="text-align:center">212</td><td style="text-align:center">D4</td><td style="text-align:center">Ô</td></tr><tr><td style="text-align:center">149</td><td style="text-align:center">95</td><td style="text-align:center">ò</td><td style="text-align:center">213</td><td style="text-align:center">D5</td><td style="text-align:center">╒</td></tr><tr><td style="text-align:center">150</td><td style="text-align:center">96</td><td style="text-align:center">û</td><td style="text-align:center">214</td><td style="text-align:center">D6</td><td style="text-align:center">╓</td></tr><tr><td style="text-align:center">151</td><td style="text-align:center">97</td><td style="text-align:center">ù</td><td style="text-align:center">215</td><td style="text-align:center">D7</td><td style="text-align:center">╫</td></tr><tr><td style="text-align:center">152</td><td style="text-align:center">98</td><td style="text-align:center">ÿ</td><td style="text-align:center">216</td><td style="text-align:center">D8</td><td style="text-align:center">╪</td></tr><tr><td style="text-align:center">153</td><td style="text-align:center">99</td><td style="text-align:center">Ö</td><td style="text-align:center">217</td><td style="text-align:center">D9</td><td style="text-align:center">┘</td></tr><tr><td style="text-align:center">154</td><td style="text-align:center">9A</td><td style="text-align:center">Ü</td><td style="text-align:center">218</td><td style="text-align:center">DA</td><td style="text-align:center">┌</td></tr><tr><td style="text-align:center">155</td><td style="text-align:center">9B</td><td style="text-align:center">¢</td><td style="text-align:center">219</td><td style="text-align:center">DB</td><td style="text-align:center">█</td></tr><tr><td style="text-align:center">156</td><td style="text-align:center">9C</td><td style="text-align:center">£</td><td style="text-align:center">220</td><td style="text-align:center">DC</td><td style="text-align:center">▄</td></tr><tr><td style="text-align:center">157</td><td style="text-align:center">9D</td><td style="text-align:center">¥</td><td style="text-align:center">221</td><td style="text-align:center">DD</td><td style="text-align:center">▌</td></tr><tr><td style="text-align:center">158</td><td style="text-align:center">9E</td><td style="text-align:center">?</td><td style="text-align:center">222</td><td style="text-align:center">DE</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">159</td><td style="text-align:center">9F</td><td style="text-align:center">ƒ</td><td style="text-align:center">223</td><td style="text-align:center">DF</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">160</td><td style="text-align:center">A0</td><td style="text-align:center">á</td><td style="text-align:center">224</td><td style="text-align:center">E0</td><td style="text-align:center">α</td></tr><tr><td style="text-align:center">161</td><td style="text-align:center">A1</td><td style="text-align:center">í</td><td style="text-align:center">225</td><td style="text-align:center">E1</td><td style="text-align:center">ß</td></tr><tr><td style="text-align:center">162</td><td style="text-align:center">A2</td><td style="text-align:center">ó</td><td style="text-align:center">226</td><td style="text-align:center">E2</td><td style="text-align:center">Γ</td></tr><tr><td style="text-align:center">163</td><td style="text-align:center">A3</td><td style="text-align:center">ú</td><td style="text-align:center">227</td><td style="text-align:center">E3</td><td style="text-align:center">π</td></tr><tr><td style="text-align:center">164</td><td style="text-align:center">A4</td><td style="text-align:center">ñ</td><td style="text-align:center">228</td><td style="text-align:center">E4</td><td style="text-align:center">Σ</td></tr><tr><td style="text-align:center">165</td><td style="text-align:center">A5</td><td style="text-align:center">Ñ</td><td style="text-align:center">229</td><td style="text-align:center">E5</td><td style="text-align:center">σ</td></tr><tr><td style="text-align:center">166</td><td style="text-align:center">A6</td><td style="text-align:center">ª</td><td style="text-align:center">230</td><td style="text-align:center">E6</td><td style="text-align:center">µ</td></tr><tr><td style="text-align:center">167</td><td style="text-align:center">A7</td><td style="text-align:center">º</td><td style="text-align:center">231</td><td style="text-align:center">E7</td><td style="text-align:center">τ</td></tr><tr><td style="text-align:center">168</td><td style="text-align:center">A8</td><td style="text-align:center">¿</td><td style="text-align:center">232</td><td style="text-align:center">E8</td><td style="text-align:center">Φ</td></tr><tr><td style="text-align:center">169</td><td style="text-align:center">A9</td><td style="text-align:center">?</td><td style="text-align:center">233</td><td style="text-align:center">E9</td><td style="text-align:center">Θ</td></tr><tr><td style="text-align:center">170</td><td style="text-align:center">AA</td><td style="text-align:center">¬</td><td style="text-align:center">234</td><td style="text-align:center">EA</td><td style="text-align:center">Ω</td></tr><tr><td style="text-align:center">171</td><td style="text-align:center">AB</td><td style="text-align:center">½</td><td style="text-align:center">235</td><td style="text-align:center">EB</td><td style="text-align:center">δ</td></tr><tr><td style="text-align:center">172</td><td style="text-align:center">AC</td><td style="text-align:center">¼</td><td style="text-align:center">236</td><td style="text-align:center">EC</td><td style="text-align:center">∞</td></tr><tr><td style="text-align:center">173</td><td style="text-align:center">AD</td><td style="text-align:center">¡</td><td style="text-align:center">237</td><td style="text-align:center">ED</td><td style="text-align:center">φ</td></tr><tr><td style="text-align:center">174</td><td style="text-align:center">AE</td><td style="text-align:center">«</td><td style="text-align:center">238</td><td style="text-align:center">EE</td><td style="text-align:center">ε</td></tr><tr><td style="text-align:center">175</td><td style="text-align:center">AF</td><td style="text-align:center">»</td><td style="text-align:center">239</td><td style="text-align:center">EF</td><td style="text-align:center">∩</td></tr><tr><td style="text-align:center">176</td><td style="text-align:center">B0</td><td style="text-align:center">?</td><td style="text-align:center">240</td><td style="text-align:center">F0</td><td style="text-align:center">≡</td></tr><tr><td style="text-align:center">177</td><td style="text-align:center">B1</td><td style="text-align:center">?</td><td style="text-align:center">241</td><td style="text-align:center">F1</td><td style="text-align:center">±</td></tr><tr><td style="text-align:center">178</td><td style="text-align:center">B2</td><td style="text-align:center">▓</td><td style="text-align:center">242</td><td style="text-align:center">F2</td><td style="text-align:center">≥</td></tr><tr><td style="text-align:center">179</td><td style="text-align:center">B3</td><td style="text-align:center">│</td><td style="text-align:center">243</td><td style="text-align:center">F3</td><td style="text-align:center">≤</td></tr><tr><td style="text-align:center">180</td><td style="text-align:center">B4</td><td style="text-align:center">┤</td><td style="text-align:center">244</td><td style="text-align:center">F4</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">181</td><td style="text-align:center">B5</td><td style="text-align:center">╡</td><td style="text-align:center">245</td><td style="text-align:center">F5</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">182</td><td style="text-align:center">B6</td><td style="text-align:center">╢</td><td style="text-align:center">246</td><td style="text-align:center">F6</td><td style="text-align:center">÷</td></tr><tr><td style="text-align:center">183</td><td style="text-align:center">B7</td><td style="text-align:center">╖</td><td style="text-align:center">247</td><td style="text-align:center">F7</td><td style="text-align:center">≈</td></tr><tr><td style="text-align:center">184</td><td style="text-align:center">B8</td><td style="text-align:center">╕</td><td style="text-align:center">248</td><td style="text-align:center">F8</td><td style="text-align:center">≈</td></tr><tr><td style="text-align:center">185</td><td style="text-align:center">B9</td><td style="text-align:center">╣</td><td style="text-align:center">249</td><td style="text-align:center">F9</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">186</td><td style="text-align:center">BA</td><td style="text-align:center">║</td><td style="text-align:center">250</td><td style="text-align:center">FA</td><td style="text-align:center">·</td></tr><tr><td style="text-align:center">187</td><td style="text-align:center">BB</td><td style="text-align:center">╗</td><td style="text-align:center">251</td><td style="text-align:center">FB</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">188</td><td style="text-align:center">BC</td><td style="text-align:center">╝</td><td style="text-align:center">252</td><td style="text-align:center">FC</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">189</td><td style="text-align:center">BD</td><td style="text-align:center">╜</td><td style="text-align:center">253</td><td style="text-align:center">FD</td><td style="text-align:center">²</td></tr><tr><td style="text-align:center">190</td><td style="text-align:center">BE</td><td style="text-align:center">╛</td><td style="text-align:center">254</td><td style="text-align:center">FE</td><td style="text-align:center">■</td></tr><tr><td style="text-align:center">191</td><td style="text-align:center">BF</td><td style="text-align:center">┐</td><td style="text-align:center">255</td><td style="text-align:center">FF</td><td style="text-align:center">ÿ</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ascll码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统课设——CentOS增加系统调用</title>
    <link href="/20230612/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E8%AE%BE%E2%80%94%E2%80%94CentOS%E5%A2%9E%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <url>/20230612/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E8%AE%BE%E2%80%94%E2%80%94CentOS%E5%A2%9E%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1>一、具体任务</h1><p>采用编译内核法，在Linux中增加一个系统调用。</p><p>要求：</p><ol><li class="lvl-3"><p>系统调用实现的功能：计算一个数字的三次方， 并打印出来。</p></li><li class="lvl-3"><p>另外写一个程序进行调用</p></li></ol><p>相关思路：</p><p>本次实验实在CentOS 7系统中对于Linux内核源码进行修改，并对源码进行编译，最后完成切换内核操作，并在C语言程序中进行系统调用。</p><p>具体步骤：</p><ul class="lvl-0"><li class="lvl-2"><p>下载Linux 4.20.4版本的源码</p></li><li class="lvl-2"><p>安装所需的工具和相关的编译环境</p></li><li class="lvl-2"><p>对源码进行修改并增加功能</p></li><li class="lvl-2"><p>对原本的系统环境内进行系统调用的添加</p></li><li class="lvl-2"><p>进行Linux内核的编译</p></li><li class="lvl-2"><p>编写C语言程序并在其中对添加的功能进行验证</p></li></ul><h1>二、CentOS系统的安装</h1><p>本次系统安装采用了CentOS 7的系统，在VMware WorkStation中安装具体过程不在赘述，注意，尽量将CPU核数给多一些，以免编译的时间过长,建议存储空间大于40GB，防止出现内存不足的情况。</p><p><strong>注意：安装完成以及下面每一步进行记得一定要打上快照，否则出现错误重新操作异常困难，养成打快照的好习惯</strong></p><p><img src="image-20230613081816078.png" alt="CentOS安装完成示例"></p><h1>三、安装相关的系统环境</h1><p>使用yum包管理工具将编译需要的相关工具进行安装，为下一步编译进行准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install ncurses-devel<br>sudo yum -y install bc<br>sudo yum -y install bison<br>sudo yum -y install flex<br>sudo yum -y install gcc g++ gdb make<br>sudo yum -y install centos-release-scl<br>sudo yum -y install devtoolset-7-gcc*<br>sudo yum -y install elfutils-libelf-devel<br>sudo yum -y install openssl-devel<br>sudo yum -y install zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools wget<br></code></pre></td></tr></table></figure><h1>四、对源码进行下载并修改</h1><h2 id="下载源码">下载源码</h2><p>Linux的源码可以从其官方的网站下载，这里选择了Linux-4.20.4版本的源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载速度因人而异，我的网络环境比较好大概两三秒就下载完成了，也有人出现需要下载一两个小时的</span><br><span class="hljs-comment"># 建议采取一些措施改善一下网络环境</span><br>sudo wget http://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.20.4.tar.xz<br></code></pre></td></tr></table></figure><p><img src="image-20230613094521121.png" alt="源码下载完成"></p><h2 id="修改源码">修改源码</h2><p>刚才我们将源码下载到了我们当前用户的根目录下，一般的CentOS 7使用的应该是root用户进行登录的，那么此时你的下载的源包就在/root目录下。</p><p>修改/usr/src/kernels/linux-4.20.4/kernel/sys.c文件</p><p><img src="image-20230613094617052.png" alt="文件末尾添加自定义函数"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 文件最后加入我们自己的功能调用</span><br>SYSCALL_DEFINE1(cube,<span class="hljs-type">int</span>,num)&#123;<br>    <span class="hljs-type">int</span> result = num*num*num;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改/usr/src/kernels/linux-4.20.4/arch/x86/include/asm/syscalls.h文件</p><p><img src="image-20230613094824243.png" alt="添加声明"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 在这个文件内我们可以添加我们自己的声明</span><br><span class="hljs-comment">// 在/*kernel/ioport.c*/下下面进行添加</span><br>asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">sys_cube</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span>;<br></code></pre></td></tr></table></figure><h1>五、添加系统调用号</h1><p>修改/usr/src/kernels/linux-4.20.4/arch/x86/entry/syscalls/syscall_64.tbl文件</p><p><img src="image-20230613094906717.png" alt="添加335号系统调用"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 第一个是系统调用号</span><br><span class="hljs-attribute">335</span>  <span class="hljs-number">64</span>  cube  __x64_sys_cube<br></code></pre></td></tr></table></figure><h1>六、准备并进行编译</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /boot/config-3.10.0-1160.71.1.el7.x86_64 /usr/src/kernels/linux-4.20.4/.config<br>make menuconfig <span class="hljs-comment"># 对Config进行再设置</span><br></code></pre></td></tr></table></figure><p>这里注意，在make设置的时候，移动光标直接选择load，由于Linux会隐藏点开头的文件，.config以及刚刚我们复制过来的文件config文件只有<code>ll</code>命令才能看见，<code>ls</code>命令无法查看。</p><p><img src="image-20230613095404563.png" alt="make menuconfig"></p><p>选择load之后即可选择yes即可配置完成，将当前界面退出，使用<code>ll -a</code>命令我们可以发现原本的<code>.config</code>文件已经变成了<code>.config.old</code>,并且生成了一个新的<code>.config</code>文件，如下图。</p><p><img src="image-20230613215136957.png" alt="文件已经发生了变化"></p><p>下面我们可以进行编译了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进行编译 时间可能比较长 16指的是使用多少核心去执行编译 我自己的电脑分配了16核 大概需要20分钟 根据个人电脑动态调整核数</span><br>make -j16<br><span class="hljs-comment"># 安装模块和内核</span><br>make modules_install<br>make install<br><span class="hljs-comment"># 更新引导文件</span><br>grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></td></tr></table></figure><h1>七、写程序进行验证</h1><h2 id="编写验证程序">编写验证程序</h2><p>新建一个C语言程序test.c进行验证</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 输入以下代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">double</span> n;<br>        <span class="hljs-type">long</span> s;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个数字：&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;n);<br>        s=n*<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">if</span>(s&lt;<span class="hljs-number">0</span>)&#123;<br>                s = -syscall(<span class="hljs-number">335</span>,-s);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>                s = syscall(<span class="hljs-number">335</span>,s);<br>        &#125;<br>        n = s;<br>        n = n / syscall(<span class="hljs-number">335</span>,<span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;结果为：&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,n);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试结果">测试结果</h2><p><img src="image-20230613102024617.png" alt="验证结果"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件工程知识点整理</title>
    <link href="/20230608/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <url>/20230608/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1>声明</h1><p>此份复习资料适合于江苏大学计算机学院软件工程课程，该资料为作者自己整理，如有整理不好之处请多包涵🫡</p><h1>第 1 章 软件工程学概述</h1><h2 id="什么是软件危机？它有哪些典型表现？为什么会出现软件危机？（选择题、判断题、简答题）">什么是软件危机？它有哪些典型表现？为什么会出现软件危机？（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>软件危机是在计算机软件开发和维护过程中所遇到的一系列严重问题</p></li><li class="lvl-3"><p>典型表现：</p><ul class="lvl-2"><li class="lvl-5">对软件开发成本和进度的估计常常很不准确</li><li class="lvl-5">用户对“已完成的”软件系统不满意的现象常常发生</li><li class="lvl-5">软件产品的质量往往靠不住</li><li class="lvl-5">软件常常是不可维护的</li><li class="lvl-5">软件通常没有适当的文档资料</li><li class="lvl-5">软件成本在计算机系统总成本中所占的比例逐年上升</li><li class="lvl-5">软件开发生产率提高的速度远远跟不上计算机应用迅速普及深入的趋势</li></ul></li><li class="lvl-3"><p>为什么出现软件危机：</p><ul class="lvl-2"><li class="lvl-5">对用户要求没有完整准确的认识就匆忙着手编写程序</li></ul></li></ol><h2 id="什么是软件过程？什么是软件工程？什么是软件工程方法学？（选择题、判断题、简答题）">什么是软件过程？什么是软件工程？什么是软件工程方法学？（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>软件过程是为了获得高质量软件所需要完成的一系列任务的框架，他规定了完成各项任务的工作步骤</p></li><li class="lvl-3"><p>软件工程是指导计算机软件开发和维护的一门工程学科</p></li><li class="lvl-3"><p>通常在软件生命周期全过程中使用的一整套技术方法的集合称为方法学，也叫做范型</p><ul class="lvl-2"><li class="lvl-5">软件工程方法学包含三个要素<ol><li class="lvl-8">方法</li><li class="lvl-8">工具</li><li class="lvl-8">过程</li></ol></li></ul></li></ol><h2 id="简述结构化范型和面向对象范型的要点，并分析它们的优缺点。（选择题、判断题、简答题）">简述结构化范型和面向对象范型的要点，并分析它们的优缺点。（选择题、判断题、简答题）</h2><ul class="lvl-0"><li class="lvl-2"><p>结构化范型</p><ul class="lvl-2"><li class="lvl-4">优点：面向过程或者面向数据</li><li class="lvl-4">缺点：增加了软件开发和维护的难度</li></ul></li><li class="lvl-2"><p>面向对象范型</p><ul class="lvl-2"><li class="lvl-4">四个要点<ol><li class="lvl-7">把对象作为了融合数据及在数据上的操作行为为统一的软件构件</li><li class="lvl-7">把所有对象都划分成类</li><li class="lvl-7">按照父类与子类的关系把若干个相关类组成了一个具有层次结构的系统</li><li class="lvl-7">对象彼此之间仅能通过发送消息互相联系</li></ol></li><li class="lvl-4">面向对象方法学的方法？</li><li class="lvl-4">面向对象方法学的特征？</li></ul></li></ul><h2 id="简述软件生命周期每个阶段的基本任务？（选择题、判断题、简答题）">简述软件生命周期每个阶段的基本任务？（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>问题定义</p><ul class="lvl-2"><li class="lvl-5">明确需要解决的问题是什么</li></ul></li><li class="lvl-3"><p>可行性研究</p><ul class="lvl-2"><li class="lvl-5">对于上个阶段确定的问题有没有行得通的解决办法</li></ul></li><li class="lvl-3"><p>需求分析</p><ul class="lvl-2"><li class="lvl-5">为了解决这个问题，目标系统需要做什么</li></ul></li><li class="lvl-3"><p>总体设计</p><ul class="lvl-2"><li class="lvl-5">应该怎样实现目标系统</li></ul></li><li class="lvl-3"><p>详细设计</p><ul class="lvl-2"><li class="lvl-5">总体设计节点使用比较抽象的方式表述了解决问题的办法，该阶段将办法具体化</li></ul></li><li class="lvl-3"><p>编码和单元测试</p><ul class="lvl-2"><li class="lvl-5">写出正确的容易理解、容易维护的程序模块</li></ul></li><li class="lvl-3"><p>综合测试</p><ul class="lvl-2"><li class="lvl-5">通过各种类型的测试是软件到达预定的效果</li></ul></li><li class="lvl-3"><p>软件维护</p><ul class="lvl-2"><li class="lvl-5">通过各种必要的维护活动使系统持久的满足用户的需求</li></ul></li></ol><h2 id="什么是软件生命周期模型？试比较瀑布模型、快速原型模型、增量模型、螺旋模型的优缺点，说明每种模型的适用范围。（选择题、判断题、简答题）">什么是软件生命周期模型？试比较瀑布模型、快速原型模型、增量模型、螺旋模型的优缺点，说明每种模型的适用范围。（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>软件周期模型规定了把生命周期划分成哪些阶段及各个阶段的执行顺序，因此也称为过程模型</p></li><li class="lvl-3"><p>各种模型的分析（书15~19页）</p><ul class="lvl-2"><li class="lvl-5">瀑布模型<ul class="lvl-4"><li class="lvl-7">优点<ol><li class="lvl-10">强迫开发人员使用规范的方法</li><li class="lvl-10">严格规划了每个阶段必须提交的文档</li><li class="lvl-10">要求每个阶段交出的所有产品必须经过质量保证小组的仔细验证</li></ol></li><li class="lvl-7">缺点<ol><li class="lvl-10">瀑布模型是由文档驱动的</li></ol></li></ul></li><li class="lvl-5">快速原型模型<ul class="lvl-4"><li class="lvl-7">优点<ol><li class="lvl-10">软件开发基本是线性顺序进行的</li></ol></li><li class="lvl-7">缺点<ol><li class="lvl-10">无法完全预测未来设计的问题</li></ol></li></ul></li><li class="lvl-5">增量模型<ul class="lvl-4"><li class="lvl-7">优点<ol><li class="lvl-10">较短时间内向用户提交可完成部分工作的产品</li><li class="lvl-10">逐步增加产品功能可以使用户具有充裕时间学习和适应新产品，减少全新软件可能带给客户组织带来冲击</li></ol></li><li class="lvl-7">缺点<ol><li class="lvl-10">把每个新的增量构件集成到现有软件体系结构中时，必须不破坏原来已经开发出来的产品</li><li class="lvl-10">对开发人员的技术要求比较高</li></ol></li></ul></li><li class="lvl-5">螺旋模型<ul class="lvl-4"><li class="lvl-7">优点<ol><li class="lvl-10">对可选方案和约束条件的强调有利于已有软件的重用，有助于把软件质量作为软件开发的一个重要目标</li><li class="lvl-10">减少过多测试或者测试不足带来的风险</li><li class="lvl-10">螺旋模型中维护只是模型的另一个周期，维护和开发之间并没有本质区别</li></ol></li><li class="lvl-7">缺点<ol><li class="lvl-10">由于其是风险驱动的，软件开发人员必须具备风险评估的经验和该方面的专门知识</li></ol></li></ul></li></ul></li></ol><h1>第 2 章 可行性研究</h1><h2 id="可行性研究的目的和任务是什么？从哪些方面研究目标系统的可行性？（选择题、判断题、简答题）">可行性研究的目的和任务是什么？从哪些方面研究目标系统的可行性？（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>目的和任务：用最小的代价在尽可能短的时间内确定问题是否可以被解决</p></li><li class="lvl-3"><p>哪几个方面</p><ol><li class="lvl-6">技术可行性</li><li class="lvl-6">经济可行性</li><li class="lvl-6">操作可行性</li></ol></li></ol><h2 id="系统流程图的常用符号及含义（选择题、判断题）">系统流程图的常用符号及含义（选择题、判断题）</h2><p>这是一个用于描述物理层面上的操作过程的图</p><p><img src="b8b850a86aafeb32f502817acb61c09.jpg" alt=""></p><h2 id="什么是数据流图、数据字典，在可行性分析阶段，它们分别描述系统的哪些方面？它们之间有何联系？（选择题、判断题、简答题）">什么是数据流图、数据字典，在可行性分析阶段，它们分别描述系统的哪些方面？它们之间有何联系？（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>数据字典</p><ul class="lvl-2"><li class="lvl-5">关于数据的信息的集合，也就是对数据流图中包含的所有元素定义的集合</li><li class="lvl-5"></li></ul></li><li class="lvl-3"><p>数据流图</p><ul class="lvl-2"><li class="lvl-5">描述信息流和数据从输入移动到输出的过程中所经受的变换的图形化技术</li></ul></li><li class="lvl-3"><p>相互关系</p><ul class="lvl-2"><li class="lvl-5">数据流图和数据字典共同构成系统的逻辑模型，没有数据字典，数据流图就不严格，然而没有数据流图，数据字典也难以发挥作用。只有数据流图和对数据流图中的每一个元素的精确定义放在一起才能共同构成系统的规格说明。</li></ul></li></ol><h2 id="设计数据流图、数据字典，难度不超过书后习题（应用题）">设计数据流图、数据字典，难度不超过书后习题（应用题）</h2><ul class="lvl-0"><li class="lvl-2"><p>数据流图可以参考书44页两张图</p></li><li class="lvl-2"><p>符号规定与41页</p></li><li class="lvl-2"><p>相关习题见平时作业</p></li></ul><h1>第 3 章 需求分析</h1><h2 id="为什么要进行需求分析-通常对软件系统有哪些需求？（选择题、判断题、简答题）">为什么要进行需求分析?通常对软件系统有哪些需求？（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>为了开发出真正满足用户需求的产品软件，首先必须知道用户的需求</p></li><li class="lvl-3"><p>具体需求</p><ul class="lvl-2"><li class="lvl-5">功能需求</li><li class="lvl-5">性能需求</li><li class="lvl-5">可靠性和可用性需求</li><li class="lvl-5">出错处理需求</li><li class="lvl-5">接口需求</li><li class="lvl-5">约束</li><li class="lvl-5">逆向需求</li><li class="lvl-5">将来可能提出的要求</li></ul></li></ol><h2 id="需求分析的任务。（选择题、判断题）">需求分析的任务。（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>确定对系统的总和要求</p></li><li class="lvl-2"><p>分析系统的数据要求</p></li><li class="lvl-2"><p>导出系统的逻辑模型</p></li><li class="lvl-2"><p>修正系统开发计划</p></li></ul><h2 id="需求分析过程应该建立-3-种模型，各有什么作用？（选择题、判断题）">需求分析过程应该建立 3 种模型，各有什么作用？（选择题、判断题）</h2><ol><li class="lvl-3"><p>数据模型</p><ul class="lvl-2"><li class="lvl-5">描绘数据对象及数据对象之间的关系</li></ul></li><li class="lvl-3"><p>功能模型</p><ul class="lvl-2"><li class="lvl-5">描绘当数据在软件系统中移动时被变换的逻辑过程，指明系统具备变换数据功能</li></ul></li><li class="lvl-3"><p>行为模型</p><ul class="lvl-2"><li class="lvl-5">指明了作为外部事件结果的系统行为，描绘了系统的各种行为模式和在不同状态间转换的方式</li></ul></li></ol><h2 id="ER-图（选择题、判断题、应用题）">ER 图（选择题、判断题、应用题）</h2><ul class="lvl-0"><li class="lvl-2"><p>书64页  实体-联系图</p></li></ul><h2 id="状态转换图（课后习题）（应用题）">状态转换图（课后习题）（应用题）</h2><ul class="lvl-0"><li class="lvl-2"><p>书67页 课后习题</p></li></ul><h2 id="层次方框图和-IPO-图的作用（选择题、判断题）">层次方框图和 IPO 图的作用（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>层次方框图（68页）</p><ul class="lvl-2"><li class="lvl-4">用树形结构的一系列多层次的矩形框描绘数据的层次结构</li></ul></li><li class="lvl-2"><p>IPO图（69页）</p><ul class="lvl-2"><li class="lvl-4">描绘输入数据、对数据的处理和输出数据之间的关系</li></ul></li></ul><h1>第 5 章 总体设计</h1><h2 id="总体设计过程通常由两个主要阶段组成-系统设计阶段-确定系统的-具体实现方案-结构设计阶段-确定软件结构。典型的总体设计过程-包括下述-9-个步骤。（选择题、判断题）">总体设计过程通常由两个主要阶段组成:系统设计阶段,确定系统的 具体实现方案;结构设计阶段,确定软件结构。典型的总体设计过程 包括下述 9 个步骤。（选择题、判断题）</h2><ol><li class="lvl-3"><p>设想供选择的方案、</p></li><li class="lvl-3"><p>选取合适的方案</p></li><li class="lvl-3"><p>推荐最佳方案</p></li><li class="lvl-3"><p>功能分解</p></li><li class="lvl-3"><p>设计软件结构</p></li><li class="lvl-3"><p>设计数据库</p></li><li class="lvl-3"><p>制定测试计划</p></li><li class="lvl-3"><p>书写文档</p></li><li class="lvl-3"><p>审查和复审</p></li></ol><h2 id="在总体设计阶段，模块化、抽象、逐步求精和信息隐藏是通常应该遵循的一些基本原理，简要说明这些原理所表达的思想？-什么是耦合？什么是内聚？衡量模块独立性的标准又是什么？（选择题、判断题、-简答题）">在总体设计阶段，模块化、抽象、逐步求精和信息隐藏是通常应该遵循的一些基本原理，简要说明这些原理所表达的思想？ 什么是耦合？什么是内聚？衡量模块独立性的标准又是什么？（选择题、判断题、 简答题）</h2><ul class="lvl-0"><li class="lvl-2"><p>94页~99页</p></li></ul><h2 id="根据数据流图设计软件的结构图（选择题、判断题、-应用题）">根据数据流图设计软件的结构图（选择题、判断题、 应用题）</h2><ul class="lvl-0"><li class="lvl-2"><p>111页</p></li></ul><h1>第 6 章 详细设计</h1><h2 id="详细设计阶段的任务还不是具体地编写程序-而是要设计出程序的-“蓝图”-以后程序员将根据这个“蓝图”写出实际的程序代码（选择题、判断题）">详细设计阶段的任务还不是具体地编写程序,而是要设计出程序的 “蓝图”,以后程序员将根据这个“蓝图”写出实际的程序代码（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>该题目就是考点</p></li></ul><h2 id="什么叫结构程序设计？（选择题、判断题、简答题）">什么叫结构程序设计？（选择题、判断题、简答题）</h2><ul class="lvl-0"><li class="lvl-2"><p>如果一个程序的代码块仅仅通过顺序、选择和循环着三种基本控制结构进行连接，并且每个代码块只有一个入口和一个出口，则称这个程序是结构化的</p></li></ul><h2 id="程序流程图、盒图和判定表是详细设计过程中常用的图形表达工具，请分别说明它们各自的功用和特点？（选择题、判断题）">程序流程图、盒图和判定表是详细设计过程中常用的图形表达工具，请分别说明它们各自的功用和特点？（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>程序流程图</p><ul class="lvl-2"><li class="lvl-4">功用<ul class="lvl-4"><li class="lvl-6">描述过程设计的方法</li></ul></li><li class="lvl-4">特点<ul class="lvl-4"><li class="lvl-6">优点：<ul class="lvl-6"><li class="lvl-8">对控制流程的描述直观</li></ul></li><li class="lvl-6">缺点：<ul class="lvl-6"><li class="lvl-8">诱使程序员过早的考虑程序的控制流程而不去考虑程序的全局结构</li><li class="lvl-8">使用箭头代表控制流，因此程序员不受任何约束，可以完全不顾结构程序设计的精神，随意转移控制</li><li class="lvl-8">不易表示数据结构</li></ul></li></ul></li></ul></li><li class="lvl-2"><p>盒图</p><ul class="lvl-2"><li class="lvl-4">特点<ul class="lvl-4"><li class="lvl-6">功能域明确</li><li class="lvl-6">不可能随意转移控制</li><li class="lvl-6">很容易确定局部和全局数据的作用域</li><li class="lvl-6">很容易表现出嵌套关系，也可以表示模块的层次结构</li></ul></li></ul></li><li class="lvl-2"><p>判定表</p><ul class="lvl-2"><li class="lvl-4">功用<ul class="lvl-4"><li class="lvl-6">清晰的表示复杂的条件组合与应做的动作之间的对应关系</li></ul></li></ul></li></ul><h2 id="程序流程图、盒图和判定表（难度不超过书后习题）（应用题）">程序流程图、盒图和判定表（难度不超过书后习题）（应用题）</h2><ul class="lvl-0"><li class="lvl-2"><p>平时作业题</p></li></ul><h2 id="Jackson-图的特点（选择题、判断题）">Jackson 图的特点（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>便于表示层次结构，而且对目录进行自定向下分解的有力工具</p></li><li class="lvl-2"><p>形象直观可读性好</p></li><li class="lvl-2"><p>既能表示数据结构也能表示程序结构</p></li></ul><h2 id="详细设计除了应该保证软件的可靠性之外-使将来编写出的程序可读性好﹑容易理解、容易测试、容易修改和维护-是详细设计阶段最-重要的目标。-过程设计应该在数据设计-体系结构设计和接口设计完成之后进行-它的任务是设计解题的详细步骤-即算法-它是详细设计阶段应完-成的主要工作。过程设计的工具可分为图形、表格和语言-3-类-这-3-类工具各有所长-读者应该能够根据需要选用适当的工具（选择题、判断题）">详细设计除了应该保证软件的可靠性之外,使将来编写出的程序可读性好﹑容易理解、容易测试、容易修改和维护,是详细设计阶段最 重要的目标。 过程设计应该在数据设计.体系结构设计和接口设计完成之后进行, 它的任务是设计解题的详细步骤(即算法),它是详细设计阶段应完 成的主要工作。过程设计的工具可分为图形、表格和语言 3 类,这 3 类工具各有所长,读者应该能够根据需要选用适当的工具（选择题、判断题）</h2><h1>第 7 章 实现</h1><h2 id="软件测试在软件生命周期中横跨两个阶段。通常在编写出每个模块-之后就对它做必要的测试-称为单元测试-模块的编写者和测试者是-同一个人-编码和单元测试属于软件生命周期的同一个阶段。（选择题、判断题）">软件测试在软件生命周期中横跨两个阶段。通常在编写出每个模块 之后就对它做必要的测试(称为单元测试),模块的编写者和测试者是 同一个人,编码和单元测试属于软件生命周期的同一个阶段。（选择题、判断题）</h2><h2 id="测试的目的就是在软件投入生产性运行之前-尽可能多地发现软件中的错误。（选择题、判断题）">测试的目的就是在软件投入生产性运行之前,尽可能多地发现软件中的错误。（选择题、判断题）</h2><h2 id="何谓白盒测试、黑盒测试？在两种测试中采用的最重要的技术有哪些？（选择题、判断题、简答题）">何谓白盒测试、黑盒测试？在两种测试中采用的最重要的技术有哪些？（选择题、判断题、简答题）</h2><ul class="lvl-0"><li class="lvl-2"><p>白盒测试</p><ul class="lvl-2"><li class="lvl-4">知道产品内部工作过程，通过测试来检验内部动作是否按照规格说明书上的规定正常进行</li><li class="lvl-4">测试技术：<ul class="lvl-4"><li class="lvl-6">逻辑覆盖</li><li class="lvl-6">控制结构测试</li></ul></li></ul></li><li class="lvl-2"><p>黑盒测试</p><ul class="lvl-2"><li class="lvl-4">已经知道产品应具备的功能，通过测试来检验每个功能都能正常使用</li><li class="lvl-4">测试技术<ul class="lvl-4"><li class="lvl-6">等价划分</li><li class="lvl-6">边界值分析</li><li class="lvl-6">错误推测</li></ul></li></ul></li></ul><h2 id="单元测试期间着重从哪-5-个方面对模块进行测试？（选择题、判断题）">单元测试期间着重从哪 5 个方面对模块进行测试？（选择题、判断题）</h2><ol><li class="lvl-3"><p>模块接口</p></li><li class="lvl-3"><p>局部数据结构</p></li><li class="lvl-3"><p>重要的执行通路</p></li><li class="lvl-3"><p>出错处理通路</p></li><li class="lvl-3"><p>边界条件</p></li></ol><h2 id="自顶向下集成测试和自底向上集成测试有什么区别？-什么是α测试和β测试-（选择题、判断题、简答题）">自顶向下集成测试和自底向上集成测试有什么区别？ 什么是α测试和β测试?（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>自顶向下：从主控模块开始沿着程序的控制层次向下移动，逐渐把各个模块结合起来。</p></li><li class="lvl-3"><p>自底向上：从“原子模块”开始组装和测试</p></li><li class="lvl-3"><p>α测试：由用户在开发者擦和场所进行，并且在开发者对用户的“指导”下进行测试，开发者负责记录发现的错误和使用中遇到的问题</p></li><li class="lvl-3"><p>β测试：由软件的最终用户们在一个或多个客户场所进行，开发者通常不在测试的现场。</p></li></ol><h2 id="设计逻辑覆盖的测试用例（判断题、应用题）（重点）">设计逻辑覆盖的测试用例（判断题、应用题）（重点）</h2><p>书162页</p><h2 id="能区分等价划分、边界值分析、错误推测（选择题、判断题）">能区分等价划分、边界值分析、错误推测（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>考点</p></li></ul><h2 id="什么是测试用例（选择题、判断题）">什么是测试用例（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>测试用例是针对软件应用程序或系统的特定功能而编写的一系列步骤，旨在评估其是否按照预期进行操作。</p></li></ul><h1>第 8 章 维护</h1><h2 id="软件维护需要的工作量很大-平均说来-大型软件的维护成本高达开发成本的-4-倍左右（选择题、判断题）">软件维护需要的工作量很大,平均说来,大型软件的维护成本高达开发成本的 4 倍左右（选择题、判断题）</h2><h2 id="软件维护的定义？四类维护活动是什么？哪种活动比例最大、最小（选择题、判断题）">软件维护的定义？四类维护活动是什么？哪种活动比例最大、最小（选择题、判断题）</h2><ol><li class="lvl-3"><p>软件维护就是在软件已经交付使用之后，为了改正错误或者满足新的需求而要修改软件的过程</p></li><li class="lvl-3"><p>四类维护活动：</p><ul class="lvl-2"><li class="lvl-5">完善性维护（50%~66%）（最大）</li><li class="lvl-5">改正性维护（17%~21%）</li><li class="lvl-5">适应性维护（18%~25%）</li><li class="lvl-5">预防性维护（4%）（最小）</li></ul></li></ol><h2 id="什么是结构化维护？结构化维护的特点是什么？（选择题、判断题、简答题）">什么是结构化维护？结构化维护的特点是什么？（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>如果有一个特定的软件配置存在，维护工作从评价设计文档开始，确定软件重要的结构特点、性能特点及接口特点；估量重要的改动将带来的影响，并计划实施途径，然后首次修改设计并且对做出的修改进行仔细复查。接下来编写相应的源程序代码；使用在测试说明书中包含的信息进行回归测试；最后把修改的软件再次交付使用。</p></li><li class="lvl-3"><p>特点：</p><ul class="lvl-2"><li class="lvl-5">减少精力的浪费</li><li class="lvl-5">提高维护的总体质量</li></ul></li></ol><h2 id="根据维护阶段的事件流，第一件事是？最后一件是？（选择题、判断题）">根据维护阶段的事件流，第一件事是？最后一件是？（选择题、判断题）</h2><ol><li class="lvl-3"><p>第一件事：确定要求进行的维护的类型</p></li><li class="lvl-3"><p>最后一件事情：复审</p></li></ol><h2 id="软件的可维护性与哪些因素有关-在软件开发过程中应该采取哪些措施来提高软件产品的可维护性-（选择题、判断题、简答题）">软件的可维护性与哪些因素有关?在软件开发过程中应该采取哪些措施来提高软件产品的可维护性?（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>有关因素：</p><ul class="lvl-2"><li class="lvl-5">可理解性</li><li class="lvl-5">可测试性</li><li class="lvl-5">可修改性</li><li class="lvl-5">可移植性</li><li class="lvl-5">可重用性</li></ul></li><li class="lvl-3"><p>在每个阶段结束前的技术审查和管理复查中,应该着重对可维护性进行复审过程中，应该对将来要改进的部分和可能要改进的部分加以注意指明。应在讨论软件的可移植性问题，考虑可能影响软件维护的系统界面。在设计和编码过程中应该尽可能使用可重用的软件构件，每个测试步骤都可以暗示在软件正式交付使用之前,程序中可能需要做预防性维护的部分。在完成每项维护工作之后,都应该对软件维护本身仔细认真地复审。</p></li></ol><h2 id="什么是逆向工程？什么是代码重构？（选择题、判断题）">什么是逆向工程？什么是代码重构？（选择题、判断题）</h2><ol><li class="lvl-3"><p>分析程序以便在比源代码更高的抽象层次上创建出程序的某种表示过程</p></li><li class="lvl-3"><p>不修改整体程序体系结构，仅关注个体模块的设计细节以及在模块中定义的局部数据结构的再生程序活动</p></li></ol><h2 id="预防性维护实质上是软件再工程。典型的软件再工程过程模型定义-了库存目录分析、文档重构、逆向工程、代码重构﹑数据重构和正-向工程-6-类活动（选择题、判断题）">预防性维护实质上是软件再工程。典型的软件再工程过程模型定义 了库存目录分析、文档重构、逆向工程、代码重构﹑数据重构和正 向工程 6 类活动（选择题、判断题）</h2><h1>第 9 章 面向对象方法学引论</h1><h2 id="什么是模型-开发软件为何要建模-（选择题、判断题）">什么是模型?开发软件为何要建模?（选择题、判断题）</h2><ol><li class="lvl-3"><p>为了理解事物而对事物作出的一种抽象，是对事物的一种无歧义的书面描述</p></li><li class="lvl-3"><p>对目标系统进行分析的初始阶段，面对大量模糊的、涉及众多专业领域的、错综复杂的信息，系统信息员往往感到无从下手，模型提供了组织大量信息的一种有效机制。</p></li></ol><h2 id="什么是面向对象方法学-它有哪些优点-（选择题、判断题、简答题）">什么是面向对象方法学?它有哪些优点?（选择题、判断题、简答题）</h2><ol><li class="lvl-3"><p>什么是？</p></li><li class="lvl-3"><p>优点：</p><ul class="lvl-2"><li class="lvl-5">与人类习惯的思维方法一致</li><li class="lvl-5">稳定性好</li><li class="lvl-5">可重用性好</li><li class="lvl-5">较易开发大型软件产品</li><li class="lvl-5">可维护性好</li></ul></li></ol><h2 id="类、对象、实例这三个概念的区别？（选择题、判断题、简答题）">类、对象、实例这三个概念的区别？（选择题、判断题、简答题）</h2><ul class="lvl-0"><li class="lvl-2"><p>类-&gt;对象-&gt;实例</p></li></ul><h2 id="3-种模型的作用？（选择题、判断题）">3 种模型的作用？（选择题、判断题）</h2><ol><li class="lvl-3"><p>描述系统数据结构的对象模型</p></li><li class="lvl-3"><p>描述系统控制结构的动态模型</p></li><li class="lvl-3"><p>描述系统功能的功能模型</p></li></ol><h2 id="类及类与类之间的-4-种关系，图形符号（选择题、判断题）">类及类与类之间的 4 种关系，图形符号（选择题、判断题）</h2><ol><li class="lvl-3"><p>关联</p><p><img src="image-20230606005611265.png" alt=""></p></li><li class="lvl-3"><p>聚集</p><p><img src="image-20230606005635238.png" alt=""></p></li><li class="lvl-3"><p>泛化</p><p><img src="image-20230606005701686.png" alt=""></p></li><li class="lvl-3"><p>依赖和细化</p><p><img src="image-20230606005723282.png" alt=""></p></li></ol><h2 id="简单的用例图的画法（应用题）">简单的用例图的画法（应用题）</h2><ul class="lvl-0"><li class="lvl-2"><p>见相关习题</p></li></ul><h2 id="数据流图和对象模型之间的关系（选择题、判断题）">数据流图和对象模型之间的关系（选择题、判断题）</h2><ul class="lvl-0"><li class="lvl-2"><p>数据流图用于描述系统的数据流动和处理流程，而对象模型用于描述系统的对象、类别和它们之间的关系。</p></li></ul><h1>第 10 章 面向对象分析</h1><h2 id="不论采用哪种方法开发软件-分析的过程都是提取系统需求的过程。-分析工作主要包括-3-项内容-这就是理解、表达和验证。-面向对象分析-OOA-的关键是识别出问题域内的类与对象-在用面-向对象观点建立起的-3-种模型中-对象模型是最基本、最重要、最核-心的。">不论采用哪种方法开发软件,分析的过程都是提取系统需求的过程。 分析工作主要包括 3 项内容,这就是理解、表达和验证。 面向对象分析(OOA)的关键是识别出问题域内的类与对象,在用面 向对象观点建立起的 3 种模型中,对象模型是最基本、最重要、最核 心的。</h2><h2 id="面向对象建模-3-个子模型与-5-个层次是什么？主题层的作用？">面向对象建模 3 个子模型与 5 个层次是什么？主题层的作用？</h2><ul class="lvl-0"><li class="lvl-2"><p>三个子模型</p><ol><li class="lvl-5">描述系统数据结构的对象模型</li><li class="lvl-5">描述系统控制结构的动态模型</li><li class="lvl-5">描述系统功能的功能模型</li></ol></li><li class="lvl-2"><p>五个层次</p><ol><li class="lvl-5">主题层<ul class="lvl-4"><li class="lvl-7">控制可见性和指导读者注意力</li></ul></li><li class="lvl-5">类与对象层</li><li class="lvl-5">结构层</li><li class="lvl-5">属性层</li><li class="lvl-5">服务层</li></ol></li></ul><h2 id="面向对象分析时，为了确定类与对象，经常采用一种非正式分析法，-其基本思路是什么？采用该方法建立系统的对象模型。-难度与本章习题第-4-题相当">面向对象分析时，为了确定类与对象，经常采用一种非正式分析法， 其基本思路是什么？采用该方法建立系统的对象模型。 难度与本章习题第 4 题相当</h2><ol><li class="lvl-3"><p>非正式分析法：</p><ul class="lvl-2"><li class="lvl-5">以自然语言书写的需求陈述作为依据，把陈述中的名词作为类与对象的候选者，用形容词作为确定属性的线索，把动词作为服务（操作）的候选者。</li></ul></li><li class="lvl-3"><p>习题见作业</p></li></ol><h2 id="动态模型和功能模型在作业中完成，不列入考试范围">动态模型和功能模型在作业中完成，不列入考试范围</h2><ul class="lvl-0"><li class="lvl-2"><p>该考点不考</p></li></ul><h1>平时作业答案整理</h1><h2 id="第一次作业">第一次作业</h2><h3 id="作业内容">作业内容</h3><p>P32页 第1题</p><p><img src="image-20230607200338381.png" alt=""></p><p>P32页 第3题</p><p><img src="image-20230607200356988.png" alt=""></p><p>P32页 第4题</p><p><img src="image-20230607200412224.png" alt=""></p><p>P33页 第6题</p><p><img src="image-20230607200430524.png" alt=""></p><p>P33页 第7题</p><p><img src="image-20230607200515933.png" alt=""></p><h2 id="第二次作业">第二次作业</h2><h3 id="作业内容-2">作业内容</h3><p>P54页第5题</p><p><img src="image-20230607200829728.png" alt=""></p><p>P73页第1题</p><p><img src="image-20230607200910030.png" alt=""></p><p>P73页第3题</p><p><img src="image-20230607201050997.png" alt=""></p><p>P73页第4题</p><p><img src="image-20230607201112128.png" alt=""></p><p><img src="image-20230607201125137.png" alt=""></p><p>P73页第5题</p><p><img src="image-20230607201138712.png" alt=""></p><p>P73页第6题</p><p><img src="image-20230607201205468.png" alt=""></p><h2 id="第三次作业">第三次作业</h2><h3 id="作业内容-3">作业内容</h3><p>P114页第3题</p><p>P140页第3题</p><p><img src="image-20230607202233079.png" alt=""></p><p><img src="image-20230607202245280.png" alt=""></p><p>P140页第4题</p><p><img src="image-20230607202304931.png" alt=""></p><p><img src="image-20230607202317941.png" alt=""></p><p>P142页第7题</p><p><img src="image-20230607202338189.png" alt=""></p><p><img src="image-20230607202352031.png" alt=""></p><p><img src="image-20230607202404630.png" alt=""></p><h2 id="第四次作业">第四次作业</h2><h3 id="作业内容-4">作业内容</h3><p>P184页第2题</p><p><img src="image-20230607202621583.png" alt=""></p><p><img src="image-20230607202634550.png" alt=""></p><p><img src="image-20230607202702250.png" alt=""></p><p>P184页第4题（1）（3）</p><p><img src="image-20230607202738993.png" alt=""><img src="image-20230607202748435.png" alt=""><img src="image-20230607202816345.png" alt=""><img src="image-20230607202836185.png" alt=""></p><p>P185页第6题</p><p><img src="image-20230607202855537.png" alt=""></p><p>P201页第1题</p><p><img src="image-20230607202919021.png" alt=""></p><h2 id="第五次作业">第五次作业</h2><h3 id="作业内容-5">作业内容</h3><p>P229页第2题</p><p><img src="image-20230607203101076.png" alt=""></p><p>P229页第3题</p><p><img src="image-20230607203108411.png" alt=""></p><p>P229页第4题</p><p><img src="image-20230607203116504.png" alt=""></p><p>P229页第6题</p><p><img src="image-20230607203124830.png" alt=""></p><p>P229页第9题</p><p><img src="image-20230607203136571.png" alt=""></p><p>P229页第10题</p><p><img src="image-20230607203146492.png" alt=""></p><p>P256页第1题</p><p><img src="image-20230607203212579.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>此博客网站的诞生</title>
    <link href="/20230423/%E6%AD%A4%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
    <url>/20230423/%E6%AD%A4%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E8%AF%9E%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<h1>从今天开始小垃圾的博客正式升级为星陨的博客</h1>]]></content>
    
    
    <categories>
      
      <category>Fluid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>介绍该博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的Static关键字</title>
    <link href="/20230114/Java%E4%B8%AD%E7%9A%84Static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/20230114/Java%E4%B8%AD%E7%9A%84Static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="Static关键字的解释">Static关键字的解释</h2><p>Static关键字，即静态关键字，他在Java中是一个修饰性的关键字，不仅仅可以用于修饰方法，也可以的修饰属性，也可以直接修饰代码块。通过他的修饰，原本的方法、属性或者是代码块就会变成静态的。</p><p>通过这样的解释，似乎真的是听君一席话，如听一席话。</p><p>下面我会进行详细的解释。</p><h2 id="Static关键字带来的影响">Static关键字带来的影响</h2><p>众所周知，Java程序是运行在Java虚拟机中的，而虚拟机中有三个部分，栈、堆、和方法区。</p><p>在程序开始运行的时候，Java虚拟机首先会将main程序入栈，所使用的的基本数据类型被用于创建某个变量的时候，这个变量会被加载到栈中；当对定义的基本数据类型进行赋值的时候，Java虚拟机会在堆中开辟一个空间用于存放这个变量的值。而方法区则用于存放字节码文件。</p><p><img src="Java%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="Java虚拟机"></p><p>由此可见，一般情况下程序在加载的时候，一个变量的生成，需要先去堆中去开辟空间再进行存值，当变量发生变化的时候，可能就需要重新进行加载，并指向新的位置。在使用的时候也需要在栈中先找到这个变量，再去读取堆中这个变量的值。</p><p>当添加了Static关键字后，所有被Static关键字修饰的都会在程序初始化的时候在方法区内进行加载，并且只加载一次。变量需要改变或者使用的时候，可以直接去方法区内进行修改或者调用。相比于普通的调用方法，效率会更高。</p><h2 id="Static关键字的具体使用">Static关键字的具体使用</h2><h3 id="修饰方法">修饰方法</h3><p>当Static用于修饰某个方法时，这个方法可以直接进行调用</p><p>如果这个方法没有static修饰，必须在这个方法所在的类中进行实例化之后才能进行调用</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.sleep(<span class="hljs-number">5000</span>);<span class="hljs-comment">//这里暂停5秒</span><br><br><span class="hljs-comment">//这里直接调用了sleep这个方法，之所以可以直接调用是因为他是被static修饰的</span><br><span class="hljs-comment">//这里展示了sleep的源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br></code></pre></td></tr></table></figure><h3 id="属性修饰">属性修饰</h3><p>当Static用于修饰一个属性的时候，这个属性随着类的加载而加载，存放在方法区内，且仅被加载一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String name;<br><span class="hljs-comment">//这样使用static修饰的变量，叫做静态变量，会随着类的加载而加载，存放的地址是方法区，并且只加载一次</span><br></code></pre></td></tr></table></figure><h3 id="静态代码块">静态代码块</h3><p>使用Static加载一块代码，这块代码也会类似于被Static修饰的变量，随着类的加载而加载，在程序最开始的时候就会被执行，且只被加载一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是静态代码块中的内容&quot;</span>);<br>&#125;<br><span class="hljs-comment">//这个会随着类的加载而加载，即在整个程序的最开始的时候进行执行。而且只加载一次就可以，不管其出现在什么地方</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我与单片机的邂逅</title>
    <link href="/20221227/%E6%88%91%E4%B8%8E%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E9%82%82%E9%80%85/"/>
    <url>/20221227/%E6%88%91%E4%B8%8E%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E9%82%82%E9%80%85/</url>
    
    <content type="html"><![CDATA[<h1>我与单片机的邂逅</h1><p>有时候，我自己会想，CPU的成本那么高，为什么那么多的智能设备的价格却是那么的便宜，到底是怎么去压缩这些产品的价格的；但是自己始终没有去深究过其中的技术，直到学校开始开设劳动教育课程，我选择了“避障小车的制作”这门课程，学校提供了Arduino单片机平台给我，借此我才开始正式接触单片机。</p><h2 id="从Arduino开始入坑">从Arduino开始入坑</h2><p>Arduino到底是个啥？</p><p>喏，就长这样：</p><p><img src="image-20221227131928612.png" alt="Arduino UNO开发板"></p><p>这是一个最为基础的Arduino UNO开发板，由于我们学校还是 <s>比较穷的</s> 经费紧张，再加上Arduino的作者将其在网上全部开源了，任何一家有设备条件的厂商甚至不需要任何授权就可以进行生产，于是我们学校采购了大量的三方生产的UNO板给学生使用</p><p>真的很想吐槽！！！！！</p><p>那个焊接的歪七八zhou的电子元件，真的让我一个强迫症患者十分的 <s>着迷</s>，我真的哭死。</p><p>回来，说正事，单纯一个UNO板其可使用的引脚接口十分少，少得可怜，为了适应更好的开发需求，Arduino对于UNO板开发了其配套的拓展板<code>Sensor Shield v5.0</code>：</p><p><img src="image-20221227145344351.png" alt="UNO开发板适配的拓展板"></p><p>通过拓展板我们可以实现更多的功能，其丰富接口让开发者的开发作品可适用于更多的场景。</p><p><img src="image-20221227150659541.png" alt="拓展板的IO引脚描述"></p><p>其提供的接口包括于数字IO口，模拟IO口，LCD系列接口，无线通信接口，甚至蓝牙接口，同时他也为超声传感器单独给了超声传感接口，为了扩展存储的能力，他也具备一个SD卡接口。</p><p>当然，Arduino是一个很庞大的家族，UNO板只是一个非常基础的初学者开发板，在Arduino IDE中可以看见Arduino还有非常多的各种各样的型号，这里不再一一介绍啦。感兴趣的可以去<a href="https://www.arduino.cc/">Arduino官网</a>或者<a href="https://arduino.nxez.com/">Arduino的中文社区</a>看看。</p><p>由于是第一次接触单片机，但是我还是有部分的C语言的功底的，勉强做出了四个轱辘能跑也可以避障的小车，但是学校给的传感器过于垃圾(开始推卸责任，但是说实话确实是传感器的问题)，循迹功能一直表现的不太好(捂脸)，具体制作的记录可见我的另一篇文章，<a href="https://xiaolaji.site/archives/113.html">自动避障小车的制作 - 小垃圾的后花园</a></p><h2 id="从STM32开始投入大成本">从STM32开始投入大成本</h2><p>自从开始从Arduino接触单片机后，发现，我作为一个物联网的学生，在未来岂不是需要大量的嵌入式开发咩？同时，借助制作避障小车的机会，结识了学校未来工程师协会的老师，老师建议我学习STM32，大量的嵌入式开发都会采用这一系列的芯片，这一方向刚好符合我的专业，决定开始学习STM32。</p><p>通过协会内的学长推荐，似乎正点原子的开发套件相关的学习资料比较多，所以我最终选择了正点原子的战舰V4开发套件进行入手学习。</p><p><strong>讲真的，STM开发套件是真滴贵啊，花了我四百多大洋，你啊知道四百多大洋对一个穷学生意味着什么吗呜呜呜呜呜。。。。</strong></p><p>但是不得不说，这个板子到货了之后是真的高级啊，黑色的外壳透着神秘气息…咳咳，上图：</p><p><img src="image-20221227161153492.png" alt="战舰开发板外包装"></p><p>里面的板子上下两层拿着光洁的亚克力板子保护，在接口处留有缝隙提供与外设进行连接，真的漂亮，STM32F1系列的芯片比Arduino不知大了多少，这个性能也不是一般的顶。</p><p><img src="image-20221227161607842.png" alt="战舰开发板"></p><p>这张板子四周都是各种外设的接口，STM32F103ZET6这块芯片具备着144个引脚，其可连接外设的数量，已经到达让Arduino UNO板望而却步的地方了，性能也比Arduino UNO要强的太多了。</p><p>从官方给的开放文档可以看见，这些串口分贝代表着哪些</p><p><img src="image-20221227163441919.png" alt="战舰开发板引脚示意图"></p><p>这块板子我觉得最近的一段时间完全足够我去折腾了，希望我很快做出一些实物，毕竟实践才是验证理论的唯一途径。</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于UDP协议的虚拟路灯</title>
    <link href="/20221125/%E5%9F%BA%E4%BA%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%99%9A%E6%8B%9F%E8%B7%AF%E7%81%AF/"/>
    <url>/20221125/%E5%9F%BA%E4%BA%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%99%9A%E6%8B%9F%E8%B7%AF%E7%81%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="项目目标">项目目标</h2><pre><code class="hljs">使用UDP通信协议，创建虚拟路灯。具备多个虚拟路灯的终端，一个UDP Server服务器，通过UDP通信协议将设备相连，并实现虚拟路灯上的数据向服务端的传输、以及服务端可对虚拟路灯终端设备进行远程控制灯的开关。</code></pre><h2 id="设计与实现">设计与实现</h2><h3 id="使用语言：Python">使用语言：Python</h3><h3 id="界面设计：Pyqt5、Pyqt5-Designer、Pyuic">界面设计：Pyqt5、Pyqt5 Designer、Pyuic</h3><h3 id="客户端设计思路：">客户端设计思路：</h3><ul class="lvl-0"><li class="lvl-2"><p>使用Pyqt5 Designer工具先进行界面设计，这是一款图形化的工具，可以方便的得到我们想要的界面效果，并支持通过<code>Ctrl+R</code>进行实时预览，完成后有会生成一个UI文件，使用Pyuic工具即可以将UI文件转换成py文件</p></li><li class="lvl-2"><p>定义函数生成随机数据，可以再客户端的界面进行展示</p></li><li class="lvl-2"><p>在Pyqt5的界面代码中给按钮添加信号，点击则开始相关的功能函数</p></li><li class="lvl-2"><p>定义工作函数，将生成的数据通过UDP的方式发送到Server</p></li><li class="lvl-2"><p>由于在Pyqt5所运行的线程中无法使用，否则界面会卡死，需要引入多线程编程，将UDP接收函数在一个单独的线程上运行</p></li></ul><h3 id="服务端设计思路：">服务端设计思路：</h3><ul class="lvl-0"><li class="lvl-2"><p>使用Pyqt5 Designer工具先进行界面设计，这是一款图形化的工具，可以方便的得到我们想要的界面效果，并支持通过<code>Ctrl+R</code>进行实时预览，完成后有会生成一个UI文件，使用Pyuic工具即可以将UI文件转换成py文件</p></li><li class="lvl-2"><p>定义Pyqt5对界面的展示信号，以及对按钮的信号设置</p></li><li class="lvl-2"><p>发包函数，以用于对客户端的开关灯信号的发送</p></li><li class="lvl-2"><p>由于在Pyqt5所运行的线程中无法使用，否则界面会卡死，需要引入多线程编程，将UDP接收函数在一个单独的线程上运行</p></li></ul><h2 id="测试与结果">测试与结果</h2><p>客户端与三个服务端展示</p><p><img src="image-20221125124719830.png" alt="客户端与三个服务端展示"></p><p>点击服务端开始接收，客户端开始工作；再点击客户端工作按钮，客户端开始工作</p><p><img src="image-20221125125031667.png" alt="开始工作"></p><p>分别点击服务端的停止按钮，服务端会停止工作</p><p><img src="image-20221125125136798.png" alt="停止工作"></p><p>此时点击服务端的开机按钮，服务端会向所有的终端发出开灯指令</p><p><img src="image-20221125125450561.png" alt="发出指令"></p><p>开灯指令在服务端接收后会返回一个数据包给服务端，只有在服务端收到这个客户端返回的数据包，证明传输成功，这样来实现可靠传输。</p><p>点击关灯按钮，所有设备关闭，但保留了接收远程信号的功能</p><p><img src="image-20221125125702500.png" alt="关闭所有设备"></p><h2 id="总结与展望">总结与展望</h2><pre><code class="hljs">这是第一次对程序制作操作界面，从刚开始的磕磕绊绊，到逐渐理解，到完成程序，中途遇见了很多的坑，也学到了很多。开始明白了界面实际是将某种固件在特定的位置点上进行展示，以及按钮的一些使用方法；也明白了界面也是一个程序，但是不能与循环同时运行的原因。这次大作业锻炼了我的编程能力，让我自己在自我解决问题的方面迈出了一大步，网络上的资源很多，我们要学会充分利用。</code></pre><h2 id="相关源代码">相关源代码</h2><h3 id="客户端UI">客户端UI</h3><p><img src="image-20221125124505826.png" alt="客户端UI"></p><h3 id="服务端UI">服务端UI</h3><p><img src="image-20221125124557711.png" alt="服务端UI"></p><h3 id="客户端源代码">客户端源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># Form implementation generated from reading ui file &#x27;Light_Client.ui&#x27;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Created by: PyQt5 UI code generator 5.15.4</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span><br><span class="hljs-comment"># run again.  Do not edit this file unless you know what you are doing.</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> multiprocessing.connection <span class="hljs-keyword">import</span> Client<br><br><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgets<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread<br><br><span class="hljs-comment">#Port是本设备的监听地址，服务端默认三个设备是 设备三8887 设备二8888 设备一8889 三个端口，如有需要可以自行修改</span><br><span class="hljs-comment">#使用不同的Port端口值即可新建一个设备</span><br>IP = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>Port = <span class="hljs-string">&#x27;8889&#x27;</span><br><br><br><span class="hljs-comment"># 创建套接字类，便于后期的套接字的使用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>:<br>    client_socket = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.initialize_socket()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_socket</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 创建套接字</span><br>        self.clientsocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br><br><br><span class="hljs-comment"># PYQT界面的设计代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ui_MainWindow</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setupUi</span>(<span class="hljs-params">self, MainWindow</span>):<br>        MainWindow.setObjectName(<span class="hljs-string">&quot;MainWindow&quot;</span>)<br>        MainWindow.resize(<span class="hljs-number">597</span>, <span class="hljs-number">489</span>)<br>        self.centralwidget = QtWidgets.QWidget(MainWindow)<br>        self.centralwidget.setObjectName(<span class="hljs-string">&quot;centralwidget&quot;</span>)<br><br>        <span class="hljs-comment"># 第一个标签 写了 温度显示</span><br>        self.label = QtWidgets.QLabel(self.centralwidget)<br>        self.label.setGeometry(QtCore.QRect(<span class="hljs-number">130</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">31</span>))<br>        self.label.setObjectName(<span class="hljs-string">&quot;label&quot;</span>)<br><br>        <span class="hljs-comment"># 第二个标签 写了湿度显示</span><br>        self.label_2 = QtWidgets.QLabel(self.centralwidget)<br>        self.label_2.setGeometry(QtCore.QRect(<span class="hljs-number">290</span>, <span class="hljs-number">70</span>, <span class="hljs-number">81</span>, <span class="hljs-number">31</span>))<br>        self.label_2.setObjectName(<span class="hljs-string">&quot;label_2&quot;</span>)<br><br>        <span class="hljs-comment"># 第三个标签 写了照度显示</span><br>        self.label_3 = QtWidgets.QLabel(self.centralwidget)<br>        self.label_3.setGeometry(QtCore.QRect(<span class="hljs-number">450</span>, <span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">31</span>))<br>        self.label_3.setObjectName(<span class="hljs-string">&quot;label_3&quot;</span>)<br><br>        <span class="hljs-comment"># LCD显示器 显示温度数据</span><br>        self.lcdNumber_WenDu = QtWidgets.QLCDNumber(self.centralwidget)<br>        self.lcdNumber_WenDu.setGeometry(QtCore.QRect(<span class="hljs-number">110</span>, <span class="hljs-number">110</span>, <span class="hljs-number">91</span>, <span class="hljs-number">31</span>))<br>        self.lcdNumber_WenDu.setObjectName(<span class="hljs-string">&quot;lcdNumber_WenDu&quot;</span>)<br><br>        <span class="hljs-comment"># LCD显示器 显示照度数据</span><br>        self.lcdNumber_ZhaoDu = QtWidgets.QLCDNumber(self.centralwidget)<br>        self.lcdNumber_ZhaoDu.setGeometry(QtCore.QRect(<span class="hljs-number">430</span>, <span class="hljs-number">110</span>, <span class="hljs-number">91</span>, <span class="hljs-number">31</span>))<br>        self.lcdNumber_ZhaoDu.setObjectName(<span class="hljs-string">&quot;lcdNumber_ZhaoDu&quot;</span>)<br><br>        <span class="hljs-comment"># LCD显示器 显示湿度数据</span><br>        self.lcdNumber_ShiDu = QtWidgets.QLCDNumber(self.centralwidget)<br>        self.lcdNumber_ShiDu.setGeometry(QtCore.QRect(<span class="hljs-number">270</span>, <span class="hljs-number">110</span>, <span class="hljs-number">91</span>, <span class="hljs-number">31</span>))<br>        self.lcdNumber_ShiDu.setObjectName(<span class="hljs-string">&quot;lcdNumber_ShiDu&quot;</span>)<br><br>        <span class="hljs-comment"># 第四个标签 显示了灯工作状态的解释</span><br>        self.label_4 = QtWidgets.QLabel(self.centralwidget)<br>        self.label_4.setGeometry(QtCore.QRect(<span class="hljs-number">180</span>, <span class="hljs-number">270</span>, <span class="hljs-number">301</span>, <span class="hljs-number">41</span>))<br>        self.label_4.setObjectName(<span class="hljs-string">&quot;label_4&quot;</span>)<br><br>        <span class="hljs-comment"># 文本框 用于展示当前设备的IP地址</span><br>        self.IP_Display = QtWidgets.QTextBrowser(self.centralwidget)<br>        self.IP_Display.setGeometry(QtCore.QRect(<span class="hljs-number">110</span>, <span class="hljs-number">320</span>, <span class="hljs-number">161</span>, <span class="hljs-number">31</span>))<br>        self.IP_Display.setObjectName(<span class="hljs-string">&quot;IP_Display&quot;</span>)<br>        self.IP_Display.setText(IP + <span class="hljs-string">&quot;:&quot;</span> + Port)<br><br>        <span class="hljs-comment"># 第五个标签 展示了IP字样</span><br>        self.label_5 = QtWidgets.QLabel(self.centralwidget)<br>        self.label_5.setGeometry(QtCore.QRect(<span class="hljs-number">150</span>, <span class="hljs-number">360</span>, <span class="hljs-number">101</span>, <span class="hljs-number">31</span>))<br>        self.label_5.setObjectName(<span class="hljs-string">&quot;label_5&quot;</span>)<br><br>        <span class="hljs-comment"># 开始工作的按钮 触发则进入到工作状态</span><br>        self.Start = QtWidgets.QPushButton(self.centralwidget)<br>        self.Start.setGeometry(QtCore.QRect(<span class="hljs-number">310</span>, <span class="hljs-number">330</span>, <span class="hljs-number">75</span>, <span class="hljs-number">23</span>))<br>        self.Start.setObjectName(<span class="hljs-string">&quot;Start&quot;</span>)<br><br>        <span class="hljs-comment"># 停止工作按钮 触发则停止工作</span><br>        self.Stop = QtWidgets.QPushButton(self.centralwidget)<br>        self.Stop.setGeometry(QtCore.QRect(<span class="hljs-number">410</span>, <span class="hljs-number">330</span>, <span class="hljs-number">75</span>, <span class="hljs-number">23</span>))<br>        self.Stop.setObjectName(<span class="hljs-string">&quot;Stop&quot;</span>)<br><br>        <span class="hljs-comment"># 中央灯状态表示区</span><br>        self.frame = QtWidgets.QFrame(self.centralwidget)<br>        self.frame.setGeometry(QtCore.QRect(<span class="hljs-number">220</span>, <span class="hljs-number">190</span>, <span class="hljs-number">120</span>, <span class="hljs-number">80</span>))<br>        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)<br>        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)<br>        self.frame.setStyleSheet(<span class="hljs-string">&quot;background-color:black&quot;</span>)<br>        self.frame.setObjectName(<span class="hljs-string">&quot;frame&quot;</span>)<br><br>        <span class="hljs-comment"># MainWindow.setCentralWidget(self.centralwidget)</span><br>        self.menubar = QtWidgets.QMenuBar(MainWindow)<br>        self.menubar.setGeometry(QtCore.QRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">597</span>, <span class="hljs-number">22</span>))<br>        self.menubar.setObjectName(<span class="hljs-string">&quot;menubar&quot;</span>)<br>        <span class="hljs-comment"># MainWindow.setMenuBar(self.menubar)</span><br><br>        self.statusbar = QtWidgets.QStatusBar(MainWindow)<br><br>        <span class="hljs-comment"># ----------------------按钮触发方法的设置-----------------------------------------</span><br>        <span class="hljs-comment"># 开始按钮点击则启动start_work</span><br>        self.Start.clicked.connect(self.start_work)<br>        self.Stop.clicked.connect(self.stop_work)<br>        <span class="hljs-comment"># 关闭按钮则启动stop_work</span><br>        <span class="hljs-comment"># ----------------------按钮触发方法的设置-----------------------------------------</span><br><br>        self.statusbar.setObjectName(<span class="hljs-string">&quot;statusbar&quot;</span>)<br>        <span class="hljs-comment"># MainWindow.setStatusBar(self.statusbar)</span><br>        self.retranslateUi(MainWindow)<br>        QtCore.QMetaObject.connectSlotsByName(MainWindow)<br><br>    <span class="hljs-comment"># 设置所有的组件上的文字</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retranslateUi</span>(<span class="hljs-params">self, MainWindow</span>):<br>        _translate = QtCore.QCoreApplication.translate<br>        MainWindow.setWindowTitle(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;MainWindow&quot;</span>))<br>        self.label.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;温度显示&quot;</span>))<br>        self.label_2.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;湿度显示&quot;</span>))<br>        self.label_3.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;照度显示&quot;</span>))<br>        self.label_4.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;红色状态为正常工作 蓝色状态为关闭&quot;</span>))<br>        self.label_5.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;设备IP地址&quot;</span>))<br>        self.Start.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;工作&quot;</span>))<br>        self.Stop.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;停止&quot;</span>))<br><br>    <span class="hljs-comment"># 开灯函数，在随机生成数据并显示的同时做到了向Server发包并启动了UDP的接收代码</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 数据处理，随机生成温度湿度照度数据并显示</span><br>        self.frame.setStyleSheet(<span class="hljs-string">&quot;background-color:red&quot;</span>)<br>        WenDu = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>        ShiDu = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>        ZhaoDu = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>        self.lcdNumber_WenDu.display(WenDu)<br>        self.lcdNumber_ShiDu.display(ShiDu)<br>        self.lcdNumber_ZhaoDu.display(ZhaoDu)<br>        <span class="hljs-comment"># 创建套接字 向8080服务器所在的端口进行UDP数据包的发送</span><br>        self.client = Client()<br>        self.client.initialize_socket()<br>        <span class="hljs-comment"># 发送的数据除了三个传感器数据外并带上了自己监控的接收端口</span><br>        message = <span class="hljs-built_in">str</span>(WenDu) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(ShiDu) + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">str</span>(ZhaoDu) + <span class="hljs-string">&quot; &quot;</span> + Port<br>        self.client.clientsocket.sendto(message.encode(<span class="hljs-string">&quot;utf8&quot;</span>), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br>        <span class="hljs-comment"># flag用于保证循环接收不会启动第二次，导致端口占用的报错</span><br>        <span class="hljs-comment"># 开启一次则不再进行开启</span><br>        <span class="hljs-keyword">global</span> flag<br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># 使用一个新的线程进行接收的操作</span><br>            get_Thred = threading.Thread(target=getter)<br>            get_Thred.start()<br>        flag = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># stop实质停止所有的数据，则将显示的数据置零</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stop_work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># while (1):</span><br>        self.frame.setStyleSheet(<span class="hljs-string">&quot;background-color:blue&quot;</span>)<br>        self.lcdNumber_WenDu.display(<span class="hljs-number">0</span>)<br>        self.lcdNumber_ShiDu.display(<span class="hljs-number">0</span>)<br>        self.lcdNumber_ZhaoDu.display(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-comment"># 接收端函数 占用一个端口进行循环接收UDP数据包</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getter</span>():<br>    udp_getter = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    udp_getter.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-built_in">int</span>(Port)))<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        message, addr = udp_getter.recvfrom(<span class="hljs-number">1024</span>)<br>        sig = message.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-comment"># print(sig)</span><br>        <span class="hljs-comment"># 对数据包内部的内容进行判断，判断完成后执行相应的操作</span><br>        <span class="hljs-keyword">if</span> sig == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            ui.start_work()<br>        <span class="hljs-keyword">elif</span> sig == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            ui.stop_work()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    sig = <span class="hljs-string">&quot;&quot;</span><br>    flag = <span class="hljs-number">0</span><br>    app = QtWidgets.QApplication(sys.argv)<br>    widget = QtWidgets.QWidget()<br>    ui = Ui_MainWindow()<br>    ui.setupUi(widget)<br>    widget.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><h3 id="服务端源代码">服务端源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># Form implementation generated from reading ui file &#x27;Light_Server.ui&#x27;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Created by: PyQt5 UI code generator 5.15.4</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span><br><span class="hljs-comment"># run again.  Do not edit this file unless you know what you are doing.</span><br><br><span class="hljs-comment">#服务端默认三个设备是 设备三8887 设备二8888 设备一8889 三个端口，如有需要可以自行修改</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore, QtGui, QtWidgets<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread<br><br><br><span class="hljs-comment"># PYQT界面代码部分</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ui_MainWindow</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setupUi</span>(<span class="hljs-params">self, MainWindow</span>):<br>        MainWindow.setObjectName(<span class="hljs-string">&quot;MainWindow&quot;</span>)<br>        MainWindow.resize(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>)<br>        self.centralwidget = QtWidgets.QWidget(MainWindow)<br>        self.centralwidget.setObjectName(<span class="hljs-string">&quot;centralwidget&quot;</span>)<br>        self.show_shebei1 = QtWidgets.QTextBrowser(self.centralwidget)<br>        self.show_shebei1.setGeometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">70</span>, <span class="hljs-number">501</span>, <span class="hljs-number">41</span>))<br>        self.show_shebei1.setObjectName(<span class="hljs-string">&quot;show_shebei1&quot;</span>)<br>        self.show_shebei3 = QtWidgets.QTextBrowser(self.centralwidget)<br>        self.show_shebei3.setGeometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">210</span>, <span class="hljs-number">501</span>, <span class="hljs-number">41</span>))<br>        self.show_shebei3.setObjectName(<span class="hljs-string">&quot;show_shebei3&quot;</span>)<br>        self.show_shebei2 = QtWidgets.QTextBrowser(self.centralwidget)<br>        self.show_shebei2.setGeometry(QtCore.QRect(<span class="hljs-number">30</span>, <span class="hljs-number">140</span>, <span class="hljs-number">501</span>, <span class="hljs-number">41</span>))<br>        self.show_shebei2.setObjectName(<span class="hljs-string">&quot;show_shebei2&quot;</span>)<br>        self.labal_shebei1 = QtWidgets.QLabel(self.centralwidget)<br>        self.labal_shebei1.setGeometry(QtCore.QRect(<span class="hljs-number">250</span>, <span class="hljs-number">41</span>, <span class="hljs-number">54</span>, <span class="hljs-number">21</span>))<br>        self.labal_shebei1.setObjectName(<span class="hljs-string">&quot;labal_shebei1&quot;</span>)<br>        self.label_shebei2 = QtWidgets.QLabel(self.centralwidget)<br>        self.label_shebei2.setGeometry(QtCore.QRect(<span class="hljs-number">250</span>, <span class="hljs-number">112</span>, <span class="hljs-number">54</span>, <span class="hljs-number">31</span>))<br>        self.label_shebei2.setObjectName(<span class="hljs-string">&quot;label_shebei2&quot;</span>)<br>        self.label_shebei3 = QtWidgets.QLabel(self.centralwidget)<br>        self.label_shebei3.setGeometry(QtCore.QRect(<span class="hljs-number">250</span>, <span class="hljs-number">180</span>, <span class="hljs-number">54</span>, <span class="hljs-number">31</span>))<br>        self.label_shebei3.setObjectName(<span class="hljs-string">&quot;label_shebei3&quot;</span>)<br>        self.textBrowser_shujubao = QtWidgets.QTextBrowser(self.centralwidget)<br>        self.textBrowser_shujubao.setGeometry(QtCore.QRect(<span class="hljs-number">70</span>, <span class="hljs-number">280</span>, <span class="hljs-number">256</span>, <span class="hljs-number">192</span>))<br>        self.textBrowser_shujubao.setObjectName(<span class="hljs-string">&quot;textBrowser_shujubao&quot;</span>)<br>        self.start_light = QtWidgets.QPushButton(self.centralwidget)<br>        self.start_light.setGeometry(QtCore.QRect(<span class="hljs-number">600</span>, <span class="hljs-number">110</span>, <span class="hljs-number">75</span>, <span class="hljs-number">23</span>))<br>        self.start_light.setStyleSheet(<span class="hljs-string">&quot;background-color:red&quot;</span>)<br>        self.start_light.setObjectName(<span class="hljs-string">&quot;start_light&quot;</span>)<br>        self.stop_light = QtWidgets.QPushButton(self.centralwidget)<br>        self.stop_light.setGeometry(QtCore.QRect(<span class="hljs-number">600</span>, <span class="hljs-number">160</span>, <span class="hljs-number">75</span>, <span class="hljs-number">23</span>))<br>        self.stop_light.setStyleSheet(<span class="hljs-string">&quot;background-color:yellow&quot;</span>)<br>        self.stop_light.setObjectName(<span class="hljs-string">&quot;stop_light&quot;</span>)<br>        self.label = QtWidgets.QLabel(self.centralwidget)<br>        self.label.setGeometry(QtCore.QRect(<span class="hljs-number">150</span>, <span class="hljs-number">490</span>, <span class="hljs-number">181</span>, <span class="hljs-number">20</span>))<br>        self.label.setObjectName(<span class="hljs-string">&quot;label&quot;</span>)<br>        self.Stop_All = QtWidgets.QPushButton(self.centralwidget)<br>        self.Stop_All.setGeometry(QtCore.QRect(<span class="hljs-number">420</span>, <span class="hljs-number">360</span>, <span class="hljs-number">201</span>, <span class="hljs-number">51</span>))<br>        self.Stop_All.setStyleSheet(<span class="hljs-string">&quot;background-color:White&quot;</span>)<br>        self.Stop_All.setObjectName(<span class="hljs-string">&quot;Stop_All&quot;</span>)<br>        <span class="hljs-comment"># MainWindow.setCentralWidget(self.centralwidget)</span><br>        self.menubar = QtWidgets.QMenuBar(MainWindow)<br>        self.menubar.setGeometry(QtCore.QRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">22</span>))<br>        self.menubar.setObjectName(<span class="hljs-string">&quot;menubar&quot;</span>)<br>        <span class="hljs-comment"># MainWindow.setMenuBar(self.menubar)</span><br>        self.statusbar = QtWidgets.QStatusBar(MainWindow)<br>        self.statusbar.setObjectName(<span class="hljs-string">&quot;statusbar&quot;</span>)<br>        <span class="hljs-comment"># MainWindow.setStatusBar(self.statusbar)</span><br>        <span class="hljs-comment"># -----------------------------------------------------------------</span><br>        <span class="hljs-comment"># 按钮触发部分</span><br>        <span class="hljs-comment"># Stop_all按钮连接的是开始接收按钮</span><br>        self.Stop_All.clicked.connect(self.start)<br>        <span class="hljs-comment"># start_light连接的是开灯按钮 启动light_up函数</span><br>        self.start_light.clicked.connect(self.light_up)<br>        <span class="hljs-comment"># stop_light连接的是关灯按钮 启动lightdown函数</span><br>        self.stop_light.clicked.connect(self.light_down)<br>        <span class="hljs-comment"># self.Stop_All.clicked.connect(self.stop_all)</span><br>        <span class="hljs-comment"># 按钮触发部分</span><br>        <span class="hljs-comment"># -----------------------------------------------------------------</span><br>        self.retranslateUi(MainWindow)<br>        QtCore.QMetaObject.connectSlotsByName(MainWindow)<br><br>    <span class="hljs-comment"># 对每一个部件上面设置显示的文字</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">retranslateUi</span>(<span class="hljs-params">self, MainWindow</span>):<br>        _translate = QtCore.QCoreApplication.translate<br>        MainWindow.setWindowTitle(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;MainWindow&quot;</span>))<br>        self.labal_shebei1.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;设备一&quot;</span>))<br>        self.label_shebei2.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;设备二&quot;</span>))<br>        self.label_shebei3.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;设备三&quot;</span>))<br>        self.start_light.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;开灯&quot;</span>))<br>        self.stop_light.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;关灯&quot;</span>))<br>        self.label.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;数据包列表&quot;</span>))<br>        self.Stop_All.setText(_translate(<span class="hljs-string">&quot;MainWindow&quot;</span>, <span class="hljs-string">&quot;开始接收&quot;</span>))<br><br>    <span class="hljs-comment"># 开始一个新的线程作为对8080端口的监听</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        get_Thred = threading.Thread(target=getter)<br>        get_Thred.start()<br><br>    <span class="hljs-comment"># 对设备一的设备相关信息进行显示</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dayin1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># print(str(get))</span><br>        self.show_shebei1.append(get)<br>        <span class="hljs-comment"># print(str(get))</span><br><br>    <span class="hljs-comment"># 对设备二的设备相关信息进行显示</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dayin2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># print(str(get))</span><br>        self.show_shebei2.append(get)<br>        <span class="hljs-comment"># print(str(get))</span><br><br>    <span class="hljs-comment"># 对设备三的设备相关信息进行显示</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dayin3</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># print(str(get))</span><br>        self.show_shebei3.append(get)<br>        <span class="hljs-comment"># print(str(get))</span><br><br>    <span class="hljs-comment"># 对数据包的发送与接收进行显示，显示的量是一个全局变量bag，如果需要显示则先修改bag再进行函数的调用</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dayin4</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 有一个问题：不知道为什么在跨线程的调用中，似乎只有append方法起作用，原本的setText并没有起作用</span><br>        self.textBrowser_shujubao.append(bag)<br><br>    <span class="hljs-comment"># 通过UDP发包向所有设备的地址分别发送开灯的数据包，设备接收到会调用开灯的函数，相当于执行一次开灯</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">light_up</span>(<span class="hljs-params">self</span>):<br>        udp_up = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>        mes = <span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>)<br>        udp_up.sendto(mes.encode(<span class="hljs-string">&quot;utf8&quot;</span>), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8889</span>))<br>        udp_up.sendto(mes.encode(<span class="hljs-string">&quot;utf8&quot;</span>), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>))<br>        udp_up.sendto(mes.encode(<span class="hljs-string">&quot;utf8&quot;</span>), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8887</span>))<br>        <span class="hljs-keyword">global</span> bag<br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        bag = <span class="hljs-string">&quot;向所有设备发出开灯数据包&quot;</span><br>        self.dayin4()<br><br>    <span class="hljs-comment"># 通过UDP发包向所有设备的地址分别发送关灯的数据包，设备接收到会调用关灯的函数，相当于执行一次关灯</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">light_down</span>(<span class="hljs-params">self</span>):<br>        udp_down = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>        mes = <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>)<br>        udp_down.sendto(mes.encode(<span class="hljs-string">&quot;utf8&quot;</span>), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8889</span>))<br>        udp_down.sendto(mes.encode(<span class="hljs-string">&quot;utf8&quot;</span>), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8888</span>))<br>        udp_down.sendto(mes.encode(<span class="hljs-string">&quot;utf8&quot;</span>), (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8887</span>))<br>        <span class="hljs-keyword">global</span> bag<br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        bag = <span class="hljs-string">&quot;向所有设备发出关灯数据包&quot;</span><br>        self.dayin4()<br><br>    <span class="hljs-comment"># 启动新的线程进行 While 循环来确保能够接收到设备发来的UDP包</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getter</span>():<br>    udp_getter = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    udp_getter.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        message, addr = udp_getter.recvfrom(<span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">global</span> get<br>        <span class="hljs-keyword">global</span> bag<br>        temp = message.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        temp = <span class="hljs-built_in">str</span>(temp)<br>        new = temp.split()<br>        <span class="hljs-comment"># 对发送来的包进行鉴别，判断出数据包来自哪里并读取处理其中的内容，调用相关的方法显示在数据包列表和相关的设备列表</span><br>        <span class="hljs-keyword">if</span> new[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;8889&#x27;</span>:<br>            <span class="hljs-comment"># 来自8889设备</span><br>            <span class="hljs-comment"># 处理数据显示区域的显示</span><br>            get = <span class="hljs-string">&quot;设备一：&quot;</span> + <span class="hljs-string">&quot;温度为&quot;</span> + new[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; 湿度为&quot;</span> + new[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot; 照度为&quot;</span> + new[<span class="hljs-number">2</span>]<br>            ui.dayin1()<br>            <span class="hljs-comment"># 处理数据包显示区的信息</span><br>            bag = <span class="hljs-string">&quot;来自&quot;</span> + new[<span class="hljs-number">3</span>] + <span class="hljs-string">&quot;的数据包&quot;</span><br>            ui.dayin4()<br>        <span class="hljs-keyword">elif</span> new[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;8888&#x27;</span>:<br>            <span class="hljs-comment"># 来自8888设备</span><br>            <span class="hljs-comment"># 处理数据显示区的数据</span><br>            get = <span class="hljs-string">&quot;设备二：&quot;</span> + <span class="hljs-string">&quot;温度为&quot;</span> + new[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; 湿度为&quot;</span> + new[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot; 照度为&quot;</span> + new[<span class="hljs-number">2</span>]<br>            ui.dayin2()<br>            <span class="hljs-comment"># 处理数据包显示区域的数据</span><br>            bag = <span class="hljs-string">&quot;来自&quot;</span> + new[<span class="hljs-number">3</span>] + <span class="hljs-string">&quot;的数据包&quot;</span><br>            ui.dayin4()<br>        <span class="hljs-keyword">elif</span> new[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;8887&#x27;</span>:<br>            <span class="hljs-comment"># 来自8887设备</span><br>            <span class="hljs-comment"># 处理数据显示区的设备</span><br>            get = <span class="hljs-string">&quot;设备三：&quot;</span> + <span class="hljs-string">&quot;温度为&quot;</span> + new[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; 湿度为&quot;</span> + new[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot; 照度为&quot;</span> + new[<span class="hljs-number">2</span>]<br>            ui.dayin3()<br>            <span class="hljs-comment"># 处理数据包显示区的显示数据</span><br>            bag = <span class="hljs-string">&quot;来自&quot;</span> + new[<span class="hljs-number">3</span>] + <span class="hljs-string">&quot;的数据包&quot;</span><br>            ui.dayin4()<br>        <span class="hljs-keyword">else</span>:<br>            bag = <span class="hljs-string">&quot;来自&quot;</span> + new[<span class="hljs-number">3</span>] + <span class="hljs-string">&quot;的未知设备&quot;</span> + new[<span class="hljs-number">3</span>]<br>            ui.dayin4()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    get = <span class="hljs-string">&quot;&quot;</span><br>    bag = <span class="hljs-string">&quot;&quot;</span><br>    app = QtWidgets.QApplication(sys.argv)<br>    widget = QtWidgets.QWidget()<br>    ui = Ui_MainWindow()<br>    ui.setupUi(widget)<br>    widget.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大学学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络大作业——抓包与分析</title>
    <link href="/20221102/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%A7%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E6%8A%93%E5%8C%85%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <url>/20221102/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%A7%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E6%8A%93%E5%8C%85%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、作业目的">一、作业目的</h2><ol><li class="lvl-3">了解网络通信的分层实现过程，了解不同层次PDU的逐层封装与解封过程；</li><li class="lvl-3">了解数据通信的过程，进一步认知协议的构成与通信过程，进而对TCP/IP分层体系结构有更深刻的了解。</li></ol><h2 id="二、作业内容">二、作业内容</h2><ol><li class="lvl-3"><p>在局域网范围内从协议层面分析ping命令的执行过程，包括所使用协议，以及不同层级的数据包封装与解封的过程。</p></li><li class="lvl-3"><p>访问<code>www.ujs.edu.cn</code>网站，分析其中所使用的协议，以及数据包的逐层封装与解封过程。</p></li><li class="lvl-3"><p>思考在数据链路层的数据包与网络层数据包的异同，包括包长度和数据构成等，并进一步思考为何存在这些区别。</p></li></ol><h2 id="四、抓包软件说明">四、抓包软件说明</h2><pre><code class="hljs">本次作业需要使用到一些特定的抓包软件，如Wireshark、Sniffer等。这些软件可以通过对设备上产生的数据包进行截取，通过分析这些数据包可以详细获取一些我们所做的操作的行为，了解计算机底层通讯的具体过程，甚至通过数据包可以进行分析异常的流量，这些对网络的稳定性与安全性都有着十分重要的意义。由于个人习惯，我使用的是Wireshark抓包工具。</code></pre><h3 id="Wireshark的抓包原理">Wireshark的抓包原理</h3><pre><code class="hljs">Wireshark使用的环境大致分为两种，一种是电脑直连互联网的单机环境，另外一种就是应用比较多的互联网环境，也就是连接交换机的情况。</code></pre><p>「<strong>单机情况</strong>」下，Wireshark直接抓取本机网卡的网络流量；「<strong>交换机情况</strong>」下，Wireshark通过端口镜像、ARP欺骗等方式获取局域网中的网络流量。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>端口镜像</strong>：利用交换机的接口，将局域网的网络流量转发到指定电脑的网卡上。</p></li><li class="lvl-2"><p><strong>ARP欺骗</strong>：交换机根据MAC地址转发数据，伪装其他终端的MAC地址，从而获取局域网的网络流量。</p></li></ul><h4 id="Wireshark的快速使用">Wireshark的快速使用</h4><pre><code class="hljs">Wireshark是一款开源软件，可以从其官网上免费下载。其官网地址为：https://www.wireshark.org</code></pre><h4 id="安装注意事项">安装注意事项</h4><pre><code class="hljs">在官网下载安装包后运行安装程序，在安装过程中有几个注意点：</code></pre><ol><li class="lvl-3"><p>在安装过程中注意安装Npcap这个组件，这个组件是Wireshark在进行网络检测时的重要组件，没有这个组件抓包可能无法进行。</p></li></ol><p><img src="image-20221101234742798.png" alt="WireShark安装"></p><p><img src="Npcap%E5%AE%89%E8%A3%85.jpg" alt="Npcap安装"></p><ol start="2"><li class="lvl-3"><p>在安装Wireshark时需要选择安装哪些工具，建议全部勾选，大部分较为常用。</p><p><img src="image-20221101234817779.png" alt="WireShark安装"></p></li><li class="lvl-3"><p>安装过程中需要勾选USB驱动，便于日后无法检测其他USB端口以及串口。</p><p><img src="image-20221101235022852.png" alt="USBPcap"></p><p><img src="/%E9%99%84%E5%B8%A6%E7%9A%84USB%E6%80%BB%E7%BA%BF.jpg" alt="附带的USB总线"></p><p>在安装完成后，打开软件将看见如下界面：</p></li></ol><p><img src="image-20221101005326034.png" alt="WireShark界面"></p><pre><code class="hljs">这里显示了目前我们的机器上面的所有的网卡设备，这里的网卡设备不仅仅只有真正的硬件设备，同时也有电脑中的虚拟网卡。。本地连接是我曾经连接的一下网线连接，由于此时我使用的是WLAN，所有的本地连接目前都是没有网络波动的。我的电脑中安装了VMware，此时有虚拟机在后台运行，所以VMnet8与VMnet1网卡中也存在着网络波动。Adapter for lookback traffic capture是我的机器的环回接口，即127.0.0.1。只有确定了我们抓包需求之后，选择正确的网卡，我们才能得到我们真正想要的数据。双击需要进行抓包的网卡，屏幕上开始实时显示软件所有的通过网卡的数据流，此时已经开始自动捕获数据流并记录。</code></pre><p><img src="image-20221101152526811.png" alt="抓包界面"></p><pre><code class="hljs">在这个界面的左上角可以进行录制进度的控制，随时可以进行暂停、停止、继续等操作，也可以进行一些分组操作等。</code></pre><p><img src="image-20221101180241263.png" alt="抓包界面"></p><pre><code class="hljs">基本学会如何去使用Wireshark抓包软件就可以进一步去探索某些具体协议的底层数据链路过程了。</code></pre><h2 id="三、具体作业">三、具体作业</h2><h3 id="详细了解ping命令">详细了解ping命令</h3><h4 id="ping命令的原理">ping命令的原理</h4><pre><code class="hljs">ping命令是一个检测网络间两个IP之间的连通性的工具。他实质是一段程序，存储在计算机的`C:\Windows\System32\PING.EXE`位置。</code></pre><p><img src="image-20221102063823268.png" alt="Ping程序"></p><pre><code class="hljs">他可以调用ICMP协议，给指定的一个IP地址发送一个封装好的数据包，如果那个IP存在，再次经过IMCP协议的处理，会返货一个同样大小的数据包会来。如果在一定时间内，本机好没有收到对方IP返回的数据包，则会默认为超时，即为连接不通。ping命令是一个很好的连通性检测工具，但是也并不是ping命令结果为超时就代表这个指定IP不存在，由IP的底层原理就可以看出，想要ping命令生效，检测的双方必须都支持ICMP协议，如果指定IP的那个一方的防火墙被设定为不支持ICMP协议的，则会拒绝掉所有采用ICMP协议的数据包，我方自然不会收到对方应答的数据包。这种不支持ICMP协议的设备在网络中很多，在我们连接某一个公网IP的时候，我们的请求在网络中走的每一跳，通过`tracert`命令，追踪到每一跳经过的机器的IP地址，`tracert`命令会再次对每一跳到达的IP地址进行ping，由于我们访问的目的IP是存在的，那我们的数据包是经过追踪出的每一个IP转发出去的，这些IP在公网中一定是存在的，但是由于其不支持ICMP协议，显然ping命令不能检测到他们，证明ping命令也具有局限性。</code></pre><p><img src="image-20221102065331549.png" alt="本站监测结果"></p><h4 id="ping命令的执行过程">ping命令的执行过程</h4><h5 id="同一网段">同一网段</h5><ul class="lvl-0"><li class="lvl-2"><p><code>ping</code>通知系统建立一个固定格式的<code>ICMP</code>请求数据包</p></li><li class="lvl-2"><p><code>ICMP</code>协议打包这个数据包和机器<code>B</code>的<code>IP</code>地址转交给<code>IP</code>协议层</p></li><li class="lvl-2"><p><code>IP</code>层协议将以机器<code>B</code>的<code>IP</code>地址为目的地址，本机<code>IP</code>地址为源地址，加上一些其他的控制信息，构建一个IP数据包</p></li><li class="lvl-2"><p>获取机器<code>B</code>的<code>MAC</code>地址</p></li></ul><p><code>IP</code>层协议通过机器<code>B</code>的<code>IP</code>地址和自己的子网掩码，发现它跟自己属同一网络，就直接在本网络查找这台机器的<code>MAC</code>。</p><p>若两台机器之前有过通信，在机器<code>A</code>的<code>ARP</code>缓存表应该有<code>B</code>机<code>IP</code>与其<code>MAC</code>的映射关系；若没有，则发送<code>ARP</code>请求广播，得到机器<code>B</code>的<code>MAC</code>地址，一并交给数据链路层</p><p>数据链路层构建一个数据帧，目的地址是<code>IP</code>层传过来的<code>MAC</code>地址，源地址是本机的<code>MAC</code>地址，再附加一些控制信息，依据以太网的介质访问规则，将他们传送出去机器B收到这个数据帧后，先检查目的地址，和本机<code>MAC</code>地址对比</p><p>符合，接收。接收后检查该数据帧，将<code>IP</code>数据包从帧中提取出来，交给本机的<code>IP</code>协议层协议。<code>IP</code>层检查后，将有用的信息提取交给<code>ICMP</code>协议，后者处理后，马上构建一个<code>ICMP</code>应答包，发送给主机A，其过程和主机A发送ICMP请求包到主机B类似（这时候主机B已经知道了主机A的MAC地址，不需再发ARP请求）；不符合，丢弃。</p><h5 id="不同网段">不同网段</h5><ul class="lvl-0"><li class="lvl-2"><p><code>ping</code>通知系统建立一个固定格式的<code>ICMP</code>请求数据包</p></li><li class="lvl-2"><p><code>ICMP</code>协议打包这个数据包和机器<code>B</code>的<code>IP</code>地址转交给<code>IP</code>协议层（一组后台运行的进程，与<code>ICMP</code>类似）</p></li><li class="lvl-2"><p><code>IP</code>层协议将以机器<code>B</code>的<code>IP</code>地址为目的地址，本机<code>IP</code>地址为源地址，加上一些其他的控制信息，构建一个<code>IP</code>数据包</p></li><li class="lvl-2"><p>获取主机<code>B</code>的<code>MAC</code>地址</p></li></ul><p><code>IP</code>协议通过计算发现主机<code>B</code>与自己不在同一网段内，就直接交给路由处理，就是将路由的<code>MAC</code>取过来，至于怎么得到路由的<code>MAC</code>地址，和之前一样，先在<code>ARP</code>缓存表中寻找，找不到可以利用广播。路由得到这个数据帧之后，再跟主机<code>B</code>联系，若找不到，就向主机<code>A</code>返回一个超时信息。</p><h4 id="ping命令产生的数据包详解">ping命令产生的数据包详解</h4><pre><code class="hljs">ping命令本身属于应用层，在执行的时候会通过调用网络层TCP/IP协议簇中的ICMP协议，此时首先会产生一个IMCP数据报文，报文的所有内容如如下图所示：</code></pre><p><img src="image-20221102112810945.png" alt="ICMP报文格式"></p><p>将其中的内容大致分开，可分为两个部分，分别是ICMP首部和ICMP数据</p><p>为了进行传输，在网络层中还会再次在ICMP报文前面加上IP首部，首部主要包括双方的IP地址等</p><p><img src="image-20221102111633184.png" alt="ICMP报文封装进IP数据报"></p><p>这里就完成了网络层的IP数据包的封装</p><p>网络层将封装好的IP数据包传输到下一层数据链路层，在这里会进行再次封装，在IP数据包前面加入帧首部，主要是双方的MAC地址。如果本机内的ARP缓存中存储着IP对应的MAC地址，则直接使用ARP缓存中的MAC地址；如果没有则计算子网掩码，如果发现在同一网段中直接发送ARP广播从而获取对应IP的MAC地址，如果不在同一网段，则先向上层路由器获取MAC地址，路由器如果具有则从路由器的ARP缓存中获取，没有则路由器向上层继续申请。原本的IP数据包就成为了帧数据区。</p><p>此时这个数据包就可以转成二进制流通过物理层传输出去。</p><p>当这个数据包通过物理层传输到另一台机器的时候，目的机器会从物理层到数据链路层到网络层，与封包过程相反，将数据包解开</p><p>在数据链路层去除掉帧首部，得到IP数据包，在网络层解析出其中的ICMP数据报，并做出相应的回复，此时不再去寻找来源机器的IP与MAC地址，全部可以从数据包中获得。ICMP协议处理数据之后将相应的数据包返回给来源机器，当执行ping的机器收到数据包，可以统计这一整个过程的时长从而以及接收的数据包是否完整，从计算出对应的延迟与丢包率。</p><h4 id="Wireshark抓包分析">Wireshark抓包分析</h4><pre><code class="hljs">通过Wireshark抓包，可以获取一段时间内设备上的所有的数据包的收发记录</code></pre><p><img src="image-20221102113300338.png" alt="WireShark抓包分析"></p><pre><code class="hljs">这是在ping命令执行期间所有的经过WLAN网卡数据包的记录，通过显示过滤可以获取到ping命令的数据包限定到达的IP地址可以过滤出相关的数据包，我ping的目标地址是192.168.31.200所以使用`ip.dst == 192.168.31.200`命令就可以过滤出所有目的地址为192.168.31.200的数据包</code></pre><p><img src="image-20221102125639735.png" alt="通过目的地址进行过滤"></p><pre><code class="hljs">过滤后可以看见有四条相同的抓包记录，分别对应了Windows的四次抓包</code></pre><p><img src="image-20221102130125548.png" alt="Ping记录"></p><p>每一次进行ping测试都会有一个对应产生的数据包。</p><h3 id="分析访问网站的过程">分析访问网站的过程</h3><h4 id="访问网站的全部流程">访问网站的全部流程</h4><ul class="lvl-0"><li class="lvl-2"><p>本机访问DNS服务器，收到DNS服务器返回请求域名的IP</p></li><li class="lvl-2"><p>建立TCP协议的三次握手</p></li><li class="lvl-2"><p>通过www协议从服务器获取数据</p></li><li class="lvl-2"><p>TCP/IP进行四次挥手断开连接</p></li></ul><h4 id="访问网站产生的相关数据包的解析">访问网站产生的相关数据包的解析</h4><h5 id="捕捉DNS请求过程">捕捉DNS请求过程</h5><p>在访问网站的时候，首先设备需要知道目的网站的IP地址，在有域名的情况下，先在本机的host文件内寻找；若没有，则请求所连接的局域网内的路由器的DNS缓存来获取，仍然没有则需要去DNS服务器内寻找相应的与域名对应的IP地址。</p><p>在Wireshark软件在访问<code>www.ujs.edu.cn</code>这段时间内进行抓包记录，再对抓取的结果进行过滤，即可找到相关过程的数据包。</p><p>为了找到我们寻找<code>www.ujs.edu.cn</code>这个域名所对应的IP的时候相关的数据包，可以通过协议的方式来过滤我们抓去到的结果。</p><p><img src="image-20221102182757945.png" alt="通过DNS协议寻找数据包"></p><p>在抓取结果的上方直接输入我们需要找的数据包采用的协议，可以直接过滤出所有采用这种协议的数据包。</p><p>输入<code>dns</code>后在访问网站过程中的所有采用<code>dns</code>协议的数据包会被一一罗列。通过Info栏下的信息，我们可以找到对<code>www.ujs.edu.cn</code>这个域名IP地址的请求数据包以及相应的应答数据包。</p><p>通过这个数据包我们可以获得到<code>www.ujs.edu.cn</code>这个域名所对应的IP地址为<code>36.156.27.229</code>。</p><h5 id="捕捉连接的过程">捕捉连接的过程</h5><p>在获取到域名对应的IP地址后，通过这个IP使用TCP/IP协议，建立TCP连接。</p><p><img src="image-20221102184747297.png" alt="监测TCP连接过程进行抓包"></p><p>从抓包的结果来看，数据交换采用的协议为TCP协议和TLSv1.3协议。</p><p>TCP协议是用来在广域网中与服务器建立连接用的，其过程双方在三次握手后建立相互保持的连接，然后稳定的传输数据，再经过三次挥手的过程来断开连接，在连接的过程中一但有一方单开了连接则整改连接过程全部关闭。</p><p>而TLS协议是由于目标网站开启了https服务。由于普通的http协议在传输过程中所有的数据都是明文传输，导致了传输过程通过抓包即可获取所有的传输数据，通过这个协议的加入，在连接开始传输数据之前，可以进行双方的秘钥的分发，从而进行加密传输，增强了传输数据的安全性。</p><h4 id="TCP协议的数据包分析">TCP协议的数据包分析</h4><p>（1）TCP分析：一个TCP报文段分为首部和数据两部分。TCP报文段首部的前二十个字节是固定的，后面有4N个字节是根据需要而增加的选项。因此TCP的最小长度是20个字节。</p><p><img src="image-20221102191437188.png" alt="分析TCP数据包"></p><p>（2）源端口和目的端口字段：各占两个字节，分别写入源端口号和目的端口号。在抓取的数据报中，源端口号和目的端口号的值分别是：443和26739</p><p><img src="image-20221102191556848.png" alt="寻找目的端口和源端口"></p><p>序号字段：占4个字节。序号范围是0到2^32-1 ，共2^32个序号</p><p>（3）确认号字段：在四个字节，是期望收到对方下一个报文段的第一个字节的序号。</p><p><img src="image-20221102191740214.png" alt="确认号字段"></p><p>（4）数据偏移字段：占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。这个字段实际上是指出TCP报文段的首部长度。由于首部中还有长度不确定的选项字段。因此数据偏移字段是必要的。现在本字段的值是32。</p><p><img src="image-20221102191822666.png" alt="数据偏移字段"></p><p>（5）保留字段：占6位，保留为今后使用；（6）窗口字段：占两个字节。窗口指的是发送本报文段的一方的接收窗口，而不是自己的发送窗口。本数据包中窗口字段的值是64240。</p><p><img src="image-20221102191916127.png" alt="窗口字段"></p><p>（7）校验和字段：占2个字节。校验和字段检验的范围包括首部和数据这两部分。</p><p><img src="image-20221102192047826.png" alt="校验和字段"></p><p>（8）紧急指针字段：占两个字节。紧急指针仅仅在URG=1时才有意义，它指出+选项字段：长度可变最长可达40个字节，当没有使用选项时，TCP的首部长度是20个字节。本数据包中没有选项字段。</p><h3 id="数据链路层与网络层的具体思考">数据链路层与网络层的具体思考</h3><p>数据链路层是OSI网络模型的倒数第二层，上层为网络层，下层为物理层，其作用为将网络层的数据转换成可以在物理层中传输的数据流的形式，也就是说数据链路层将网络层传来的IP数据包加上帧首部之后，封装成数据包，其表识方式为机器的MAC地址。</p><p>网络层是OSI网络模型的倒数第三层，其中具有大量的网络协议，其主要是从将应用层的数据封装，在数据包前加上IP报头，IP与数据链路层中的MAC地址有些类似，但是IP地址更适用于在大型的网络中进行传输。</p><p>数据链路层功能主要有：</p><ul class="lvl-0"><li class="lvl-2"><p>逻辑链路控制</p></li><li class="lvl-2"><p>媒体访问控制</p></li><li class="lvl-2"><p>封装链路层帧</p></li><li class="lvl-2"><p>MAC 寻址</p></li><li class="lvl-2"><p>差错检测与处理</p></li><li class="lvl-2"><p>定义物理层标准</p></li></ul><p>网络层主要功能为：</p><ul class="lvl-0"><li class="lvl-2"><p>IP 寻址</p></li><li class="lvl-2"><p>选路</p></li><li class="lvl-2"><p>封装打包</p></li><li class="lvl-2"><p>分片</p><p>总体来说，在当前网络规模巨大的背景下，单纯靠MAC地址去传输是不切实际的，现在的数据链路层更多的是与物理层一起为网络层的传输提供服务。而网络层是在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的数据通信，将数据设法从源端经过若干个中间节点传送到目的端，从而向运输层提供最基本的端到端的数据传送服务。只有当两层一起共同工作，共同发挥作用才能让保障我们的网络稳定与畅通。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>大学学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大作业</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux用户权限管理</title>
    <link href="/20221003/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <url>/20221003/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管 理员申请一个账号，然后以这个账号的身份进入系统。</p><p>为了更加方便的管理多个用户，就出现了用户组的概念，关于用户和用户组：</p><ul class="lvl-0"><li class="lvl-2"><p>系统上的每个进程(运行的程序)都是作为特定用户运行</p></li><li class="lvl-2"><p>每个文件是由一个特定的用户拥有</p></li><li class="lvl-2"><p>访问文件和目录受到用户的限制</p></li><li class="lvl-2"><p>与正在运行的进程相关联的用户确定该进程可访问的文件和目录</p></li></ul><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul class="lvl-0"><li class="lvl-2"><p>用户账号的添加、删除与修改</p></li><li class="lvl-2"><p>用户账号的添加、删除与修改</p></li><li class="lvl-2"><p>用户账号的添加、删除与修改</p></li></ul><h1>用户和用户组查看</h1><h2 id="id">id</h2><p>xxxxxxxxxx static {    System.out.println(“我是静态代码块中的内容”);}//这个会随着类的加载而加载，即在整个程序的最开始的时候进行执行。而且只加载一次就可以，不管其出现在什么地方java</p><p>id会显示用户以及所属群组的实际与有效ID。若两个ID相同，则仅显示实际ID。若仅指定用户名称，则 显示目前用户的ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">id [OPTION]... [USER]<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>-g：显示用户所属群组的ID。</p></li><li class="lvl-2"><p>-G：显示用户所属附加群组的ID。</p></li><li class="lvl-2"><p>-n：显示用户，所属群组或附加群组的名称。</p></li><li class="lvl-2"><p>-n：显示用户，所属群组或附加群组的名称。</p></li><li class="lvl-2"><p>-u：显示用户ID。</p></li></ul><h3 id="uid的约定">uid的约定</h3><p>Linux操作系统会依据用户的uid数值来判定这个用户的角色，分别如下</p><ul class="lvl-0"><li class="lvl-2"><p>0：超级管理员，也就是root，在linux系统中拥有所有权力</p></li><li class="lvl-2"><p>1~999：系统用户，系统用户往往是用来约束系统中的服务的</p></li><li class="lvl-2"><p>1000+：普通用户，可以用来登陆和使用Linux操作系统</p></li></ul><p>关于root用户</p><ul class="lvl-0"><li class="lvl-2"><p>uid是0</p></li><li class="lvl-2"><p>拥有操作系统所有权力</p></li><li class="lvl-2"><p>该用户有权力覆盖文件系统上的普通权限</p></li><li class="lvl-2"><p>安装或删除软件并管理系统文件和目录</p></li><li class="lvl-2"><p>大多数设备只能由root控制</p></li></ul><h3 id="实例">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查看当前登陆的用户信息</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# id<br>uid=0(root) gid=0(root) 组=0(root) 环境<br>=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看文件的拥有者</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ll anaconda-ks.cfg<br>-rw-------. 1 root root 1241 4月 4 16:53 anaconda-ks.cfg<br></code></pre></td></tr></table></figure><p><img src="image-20220714090329104.png" alt="ll命令解析"></p><ul class="lvl-0"><li class="lvl-2"><p>查看运行进程的用户名，ps命令会在后面进程管理部分讲解</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ps aux<br>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND<br>root 2 0.0 0.0 0 0 ? S 09:06 0:00 [kthreadd]<br>root 3 0.0 0.0 0 0 ? S 09:06 0:01 [ksoftirqd/0]<br>root 4 0.1 0.0 0 0 ? R 09:06 0:09 [kworker/0:0]<br>root 5 0.0 0.0 0 0 ? S&lt; 09:06 0:00 [kworker/0:0H]<br></code></pre></td></tr></table></figure><h1>相关的文件</h1><p>之前说过Linux一切皆文件，所以用户和用户组相关的信息也都是保存在文本文件中的，下面列举出相关 的文件。</p><h2 id="passwd文件">passwd文件</h2><p>用于保存用户的信息，一般第一行是root用户，下面都是其他用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# head -n 1 /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个格式为用户名:密码:uid:gid:描述:家目录:登陆后执行的命令</span><br></code></pre></td></tr></table></figure><h2 id="shadow文件">shadow文件</h2><p>格式中密码占位置太长了，所以使用x来替代，Linux系统会到shadow中查找x部分的的密码内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# head -n 1 /etc/shadow<br>root:$6$frokclXSnQa8EbKs$pWElbjPlmxjYh30tr8qLsTQVOhuPg7GmW9Sanm2yXAK8TNMgje1g<br>yc/vwPgqvmSMf6VaoEvveM0gFvtETmXy/.::0:99999:7:::<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个格式为用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前</span><br>的警告天数：密码过期后的宽限时间：账号失效时间：保留字段<br></code></pre></td></tr></table></figure><p>格式不需要大家记住，只需要知道关于这个用户的密码和有效期都在这个文件中即可。 密码在 passwd 文件中会使用加密算法加密，所以别想知道我的密码是什么，加密算法默认是 $6 ，这个 类型6的加密算法是sha-512。我们也可以在man手册中看到对shadow文件的详细解释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# man 5 shadow<br><span class="hljs-meta prompt_"># </span><span class="language-bash">man手册一个有9个章节，其中第5个章节是对文件格式的说明</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">对man手册感兴趣的同学，也可以自己在网上查找学习man手册的更多内容</span><br></code></pre></td></tr></table></figure><h2 id="group文件">group文件</h2><p>用户和组的对应关系，会保存在group文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# head -n 1 /etc/group<br>root:x:0:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个格式是组名:口令:组标识号:组内用户列表</span><br></code></pre></td></tr></table></figure><h2 id="group文件-2">group文件</h2><p>用户和组的对应关系，会保存在group文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# head -n 1 /etc/group<br>root:x:0:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个格式是组名:口令:组标识号:组内用户列表</span><br></code></pre></td></tr></table></figure><h1>用户组管理</h1><h2 id="添加用户组：groupadd">添加用户组：groupadd</h2><p>groupadd 命令用于创建一个新的工作组，新工作组的信息将被添加到系统文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd [选项] 组<br></code></pre></td></tr></table></figure><h2 id="选项">选项</h2><ul class="lvl-0"><li class="lvl-2"><p>-g：指定新建工作组的 id；</p></li><li class="lvl-2"><p>-r：创建系统工作组，系统工作组的组ID小于 500；</p></li><li class="lvl-2"><p>-K：覆盖配置文件 /etc/login.defs</p></li><li class="lvl-2"><p>-o：允许添加组 ID 号不唯一的工作组。</p></li><li class="lvl-2"><p>-f：如果指定的组已经存在，此选项将失明了仅以成功状态退出。当与 -g 一起使用，并且指定的 GID_MIN已经存在时，选择另一个唯一的GID（即-g关闭）。</p></li></ul><h3 id="实例-2">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>按照下图创建组，并且指定gid，并且检查是否成功</p></li></ul><p><img src="image-20220714120434011.png" alt="创建组示例"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# groupadd hr -g 1000<br>[root@localhost ~]# groupadd sale -g 2000<br>[root@localhost ~]# groupadd it -g 3000<br>[root@localhost ~]# groupadd fd -g 4000<br>[root@localhost ~]# tail -n 4 /etc/group<br>hr:x:1000:<br>sale:x:2000:<br>it:x:3000:<br>fd:x:4000:<br></code></pre></td></tr></table></figure><h2 id="修改用户组：groupmod">修改用户组：groupmod</h2><p>groupmod命令用于更改群组识别码或名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupmod [选项] 组<br></code></pre></td></tr></table></figure><h3 id="选项-2">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-g：将组 ID 改为 GID</p></li><li class="lvl-2"><p>-n：改名为 NEW_GROUP</p></li><li class="lvl-2"><p>-o：允许使用重复的 GID</p></li></ul><h3 id="实例-3">实例</h3><p>修改fd组的名字为finance</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# groupmod -n finance fd<br>[root@localhost ~]# tail -n 1 /etc/group<br>finance:x:4000:<br></code></pre></td></tr></table></figure><h2 id="删除用户组：groupdel">删除用户组：groupdel</h2><p>groupdel命令用于删除群组</p><p>需要从系统上删除群组时，可用groupdel(group delete)指令来完成这项工作。倘若该群组中仍包括某 些用户，则必须先删除这些用户后，方能删除群组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupdel [组名]<br></code></pre></td></tr></table></figure><h3 id="实例-4">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>删除一个用户组</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# groupadd test<br>[root@localhost ~]# groupdel test<br></code></pre></td></tr></table></figure><h2 id="用户组成员管理：gpasswd">用户组成员管理：gpasswd</h2><p>gpasswd 是 Linux 下工作组文件 /etc/group 和 /etc/gshadow 管理工具，用于将一个用户添加到组或 者从组中删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpasswd [选项] 组<br></code></pre></td></tr></table></figure><h3 id="选项-3">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-a：添加用户到组；</p></li><li class="lvl-2"><p>-d：从组删除用户；</p></li><li class="lvl-2"><p>-A：指定管理员；</p></li><li class="lvl-2"><p>-M：指定组成员和-A的用途差不多；</p></li><li class="lvl-2"><p>-R：限制用户登入组，只有组中的成员才可以用newgrp加入该组。</p></li></ul><h3 id="实例-5">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>创建用户itadmin，并且将其加入it组</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd itadmin<br>[root@localhost ~]# gpasswd -a itadmin it<br>正在将用户“itadmin”加入到“it”组中<br>[root@localhost ~]# cat /etc/group |grep it:<br>it:x:3000:itadmin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在组文件中，可以看到这个组的成员</span><br>[root@localhost ~]# id itadmin<br>uid=6667(itadmin) gid=6667(itadmin) 组=6667(itadmin),3000(it)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在用户的信息中，可以看到这个用户的所属组</span><br></code></pre></td></tr></table></figure><h1>用户管理</h1><h2 id="添加用户：useradd">添加用户：useradd</h2><p>useradd可以用来添加新的用户账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd [选项] 用户名<br></code></pre></td></tr></table></figure><h3 id="选项-4">选项</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>-c</strong> **comment：**指定一段注释性描述。</p></li><li class="lvl-2"><p><strong>-d</strong> **目录：**指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p></li><li class="lvl-2"><p><strong>-m</strong>：创建用户的主目录</p></li><li class="lvl-2"><p><strong>-g</strong> **用户组：**指定用户所属的用户组，默认会创建一个和用户名同名的用户组。</p></li><li class="lvl-2"><p><strong>-G</strong> **用户组：**用户组 指定用户所属的附加组，一个用户可以属于多个附加组。</p></li><li class="lvl-2"><p><strong>-s</strong> **Shell文件：**指定用户的登录Shell。</p></li><li class="lvl-2"><p>**-u 用户号：**指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p></li></ul><h3 id="实例-6">实例</h3><p>添加一般用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd user01<br></code></pre></td></tr></table></figure><p>为添加的用户指定相应的用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd -g root user02<br></code></pre></td></tr></table></figure><p>为新添加的用户指定home目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd -d /home/test user03<br></code></pre></td></tr></table></figure><p>建立一个不给登录的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd -s /sbin/nologin user04<br></code></pre></td></tr></table></figure><h2 id="修改用户：usermod">修改用户：usermod</h2><p>usermod命令用于修改用户帐号</p><p>usermod可用来修改用户帐号的各项设定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod [选项] 登录<br></code></pre></td></tr></table></figure><h3 id="选项-5">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>**-c&lt;备注&gt;：**修改用户帐号的备注文字。</p></li><li class="lvl-2"><p>**-a：**追加：默认的修改是覆盖</p></li><li class="lvl-2"><p>**-d登入目录&gt;：**修改用户登入时的目录。</p></li><li class="lvl-2"><p>**-e&lt;有效期限&gt;：**修改帐号的有效期限。</p></li><li class="lvl-2"><p>**-f&lt;缓冲天数&gt;：**修改在密码过期后多少天即关闭该帐号。</p></li><li class="lvl-2"><p>**-g&lt;群组&gt;：**修改用户所属的群组。</p></li><li class="lvl-2"><p>**-G&lt;群组&gt;：**修改用户所属的附加群组。</p></li><li class="lvl-2"><p>**-l&lt;帐号名称&gt;：**修改用户帐号名称。</p></li><li class="lvl-2"><p>**L：**锁定用户密码，使密码无效。</p></li><li class="lvl-2"><p>**-s：**修改用户登入后所使用的shell。</p></li><li class="lvl-2"><p>**-u：**修改用户ID。</p></li><li class="lvl-2"><p>**-U：**解除密码锁定。</p></li></ul><h3 id="实例-7">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>更改登录的目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# usermod -d /home user01<br>[root@localhost ~]# su - user01<br>-bash-4.2$ pwd<br>/home<br></code></pre></td></tr></table></figure><p>改变用户的uid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# usermod -u 6666 user02<br></code></pre></td></tr></table></figure><h2 id="删除用户：userdel">删除用户：userdel</h2><p>userdel命令用于删除用户帐号</p><p>userdel可删除用户帐号与相关的文件。若不加参数，则仅删除用户帐号，而不删除相关文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">userdel [-r][用户帐号]<br></code></pre></td></tr></table></figure><h3 id="选项-6">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-r：删除用户登入目录以及目录中所有文件</p></li></ul><h3 id="实例-8">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>删除用户账号</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# userdel user04<br></code></pre></td></tr></table></figure><h1>passwd文件中的shell</h1><p>查看 /etc/passwd 文件会发现在每行的最后是登录成功之后执行的命令，有两种是使用最为频繁的：</p><ul class="lvl-0"><li class="lvl-2"><p>/bin/bash：这个是Linux的命令行工具，我们正常登陆之后默认就是进入命令行</p></li><li class="lvl-2"><p>/sbin/nologin：如果写成nologin，那么用户将无法登录，有些用户是作为进程权限管理而存在 的，不需要登录。如果提供登录的功能反而不安全，所以写成nologin</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br></code></pre></td></tr></table></figure><p>我们可以新建一个用户，然后尝试自定义登录成功之后执行的命令，用来加深印象。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd test01<br>[root@localhost ~]# tail -n 1 /etc/passwd<br>test01:x:1000:1000::/home/test01:/bin/vi<br></code></pre></td></tr></table></figure><p>切换到test01用户，会发现自动进入vi的界面，说明最后的这个段内容就是用户登录之后会运行的程序</p><p><img src="image-20220714122150998.png" alt="用户逻辑图"></p><h1>用户密码管理</h1><p>root用户可以直接设置普通用户密码，普通用户必须要提供原密码，才可以修改自己密码。</p><h2 id="passwd">passwd</h2><p>passwd命令用来更改使用者的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd [选项...] &lt;帐号名称&gt;<br></code></pre></td></tr></table></figure><h3 id="选项-7">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-k：保持身份验证令牌不过期</p></li><li class="lvl-2"><p>-d：删除已命名帐号的密码(只有根用户才能进行此操作)</p></li><li class="lvl-2"><p>-l：锁定指名帐户的密码(仅限 root 用户)</p></li><li class="lvl-2"><p>-u：解锁指名账户的密码(仅限 root 用户)</p></li><li class="lvl-2"><p>-x：密码的最长有效时限(只有根用户才能进行此操作)</p></li><li class="lvl-2"><p>-n：密码的最短有效时限(只有根用户才能进行此操作)</p></li><li class="lvl-2"><p>-w：在密码过期前多少天开始提醒用户(只有根用户才能进行此操作)</p></li><li class="lvl-2"><p>-i：当密码过期后经过多少天该帐号会被禁用(只有根用户才能进行此操作)</p></li><li class="lvl-2"><p>-S：报告已命名帐号的密码状态(只有根用户才能进行此操作)</p></li><li class="lvl-2"><p>–stdin：从标准输入读取令牌(只有根用户才能进行此操作)</p></li></ul><h3 id="实例-9">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>修改test01用户密码</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# passwd test01<br>更改用户 test01 的密码 。<br>新的 密码：<br>重新输入新的 密码：<br>passwd：所有的身份验证令牌已经成功更新。<br></code></pre></td></tr></table></figure><p>使用管道符设置用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# echo 123456 | passwd --stdin test01<br>更改用户 test01 的密码 。<br>passwd：所有的身份验证令牌已经成功更新。<br></code></pre></td></tr></table></figure><h1>login.defs文件</h1><p>/etc/login.defs 文件是用来创建用户时进行一定的限制，但是优先级低于 /etc/passwd 和 /etc/shadow ,如果有冲突的地方,系统会以 /etc/passwd 和 /etc/shadow 为准</p><p>下面是这个文件的内容，egrep命令我们后续会讲到，这边可以理解为不看文件的注释和空行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# egrep -v &#x27;^[ ]*$|^#&#x27; /etc/login.defs<br>MAIL_DIR /var/spool/mail # 系统消息(邮件)文件夹<br>PASS_MAX_DAYS 99999 # 密码有效最大天数<br>PASS_MIN_DAYS 0 # 密码有效最小天数<br>PASS_MIN_LEN 5 # 密码长度<br>PASS_WARN_AGE 7 # 密码失效警告倒计时<br>UID_MIN 1000 # 用户UID最小1000<br>UID_MAX 60000 # 用户UID最大60000<br>SYS_UID_MIN 201 # 系统用户UID最小201<br>SYS_UID_MAX 999 # 系统用户UID最大999<br>GID_MIN 1000 # 用户组GID最小1000<br>GID_MAX 60000 # 用户组GID最大60000<br>SYS_GID_MIN 201<br>SYS_GID_MAX 999<br>CREATE_HOME yes # 创建家目录<br>UMASK 077 # 创建文件/目录的权限掩码<br>USERGROUPS_ENAB yes # 创建用户时同时生成组是 如果此处是no 创建的用户 会是<br>gid=100(users)groups=100(users)<br>ENCRYPT_METHOD SHA512 # 加密 方法 sha 512 这个方法生成的密码<br>在/etc/shadow里面的第二列会以$6$开头<br></code></pre></td></tr></table></figure><h2 id="chage">chage</h2><p>chage是用于更改用户密码过期信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chage [选项] 登录<br></code></pre></td></tr></table></figure><h3 id="选项-8">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-d：将最近一次密码设置时间设为“最近日期”</p></li><li class="lvl-2"><p>-E 过期日期：将帐户过期时间设为“过期日期”</p></li><li class="lvl-2"><p>-I INACITVE：过期 INACTIVE 天数后，设定密码为失效状态</p></li><li class="lvl-2"><p>-l：显示帐户年龄信息</p></li><li class="lvl-2"><p>-l：显示帐户年龄信息</p></li><li class="lvl-2"><p>-M 最大天数：将两次改变密码之间相距的最大天数设为“最大天数”</p></li><li class="lvl-2"><p>-W 警告天数：将过期警告天数设为“警告天数”</p></li></ul><h3 id="实例-10">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>强制用户在下次登录的时候换密码</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# chage -d 0 test01<br>[root@localhost ~]# logout<br>You must change your password now and login again!<br>更改用户 test01 的密码 。<br>为 test01 更改 STRESS 密码。<br>（当前）UNIX 密码：<br></code></pre></td></tr></table></figure><p>**小知识：**当你新建用户的时候，用户的home目录下会有一些默认的隐藏文件，这些隐藏文件是在创建 用户的时候从 /etc/skel/ 中复制过去的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cd /etc/skel<br>[root@localhost ~]# vim readme.txt<br>注意账号安全!!!<br>[root@localhost ~]# useradd user06<br>[root@localhost ~]# su -user06<br>发现里面有个readme.txt文件<br></code></pre></td></tr></table></figure><h2 id="sudoers">sudoers</h2><p>Linux是多用户多任务的操作系统, 共享该系统的用户往往不只一个。出于安全性考虑, 有必要通过 useradd创建一些非root用户, 只让它们拥有不完全的权限; 如有必要，再来提升权限执行。</p><p>sudo就是来解决这个需求的: 这些非root用户不需要知道root的密码，就可以提权到root，执行一些 root才能执行的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo [选项] [用户名] [命令]<br></code></pre></td></tr></table></figure><h2 id="sudo命令执行过程">sudo命令执行过程</h2><ol><li class="lvl-3"><p>当用户执行sudo时，系统会主动寻找 /etc/sudoers 文件，判断该用户是否有执行sudo的权限</p></li><li class="lvl-3"><p>确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认</p></li><li class="lvl-3"><p>确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认</p></li></ol><h2 id="赋予用户sudo操作的权限">赋予用户sudo操作的权限</h2><p>通过useradd添加的用户，并不具备sudo权限。在ubuntu/centos等系统下, 需要将用户加入admin组或 者wheel组或者sudo组。以root用户身份执行如下命令, 将用户加入wheel/admin/sudo组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">usermod -a -G wheel &lt;用户名&gt;<br></code></pre></td></tr></table></figure><p>如果提示wheel组不存在, 则还需要先创建该组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">groupadd wheel<br></code></pre></td></tr></table></figure><h2 id="配置文件">配置文件</h2><p>sudo的权限控制可以在 /etc/sudoers 文件中查看到。一般来说，通过cat /etc/sudoers指令来查看该 文件, 会看到如下几行代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# egrep -v &#x27;^[ ]*$|^#&#x27; /etc/sudoers<br>=====省略=====<br>root ALL=(ALL) ALL<br><span class="hljs-meta prompt_">%</span><span class="language-bash">wheel ALL=(ALL) ALL</span><br></code></pre></td></tr></table></figure><p>对/etc/sudoers文件进行编辑的代码公式可以概括为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...<br>字段1 字段2 =[(字段3)] [字段4] 字段5<br></code></pre></td></tr></table></figure><p>凡是[ ]中的内容, 都能省略; 命令和命令之间用 , 号分隔，字段3、字段4，是可以省略的。</p><p>“字段1&quot;不以%号开头的表示&quot;将要授权的用户”，以%号开头的表示&quot;将要授权的组&quot;。</p><p>&quot;字段2&quot;表示允许登录的主机, ALL表示所有，;如果该字段不为ALL,表示授权用户只能在某些机器上 登录本服务器来执行sudo命令</p><p>&quot;字段2&quot;表示允许登录的主机, ALL表示所有，;如果该字段不为ALL,表示授权用户只能在某些机器上 登录本服务器来执行sudo命令</p><p>&quot;字段3&quot;如果省略, 相当于(root:root)，表示可以通过sudo提权到root，如果为(ALL)或者(ALL:ALL), 表示能够提权到(任意用户:任意用户组)。</p><p>&quot;字段4&quot;的可能取值是NOPASSWD:。请注意NOPASSWD后面带有冒号:。表示执行sudo时可以不需 要输入密码。</p><p>比如: lucy ALL=(ALL) NOPASSWD: /bin/useradd 表示: 普通用户lucy可以在任何主机上, 通 过sudo执行/bin/useradd命令, 并且不需要输入密码</p><p>比如: peter ALL=(ALL) NOPASSWD: ALL ,表示: 普通用户peter可以在任何主机上, 通过sudo 执行任何命令, 并且不需要输入密码。</p><p>&quot;字段5&quot;是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。命令 都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患。</p><p>如果你将授权写成如下安全性欠妥的格式: lucy ALL=(ALL) chown,chmod,useradd 那么用 户就有可能创建一个他自己的程序, 也命名为userad, 然后放在它的本地路径中, 如此一来他就 能够使用root来执行这个&quot;名为useradd的程序&quot;。这是相当危险的!</p><h2 id="编辑配置文件">编辑配置文件</h2><p>在实践中,去编辑 /etc/sudoers 文件，系统提示我没权限，这是因为 /etc/sudoers 的内容如此敏感， 以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么。</p><p>强烈建议通过 visudo 命令来修改该文件，通过 visudo 修改，如果配置出错，会有提示。</p><p>官方文档推荐的做法，不是直接修改 /etc/sudoers 文件，而是将修改写在 /etc/sudoers.d/ 目录下的 文件中。如果使用这种方式修改sudoers，需要在 /etc/sudoers 文件的最后行，加上 #includedir /etc/sudoers.d 一行(默认已有)。需要注意，这个 #includedir /etc/sudoers.d 中的 # 并不是注 释，请勿修改。</p><h3 id="选项-9">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>**-u：**以指定用户或 ID 运行命令(或编辑文件)</p></li><li class="lvl-2"><p>**-l：**显示出自己（执行 sudo 的使用者）的权限</p></li><li class="lvl-2"><p>**-b：**将要执行的指令放在后台执行</p></li><li class="lvl-2"><p><strong>-i：</strong> 以目标用户身份运行一个登录 shell；可同时指定一条命令。相当于切换到root，不过只需要用 户自己的密码即可。</p></li></ul><h3 id="实例-11">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>以管理员身份查看shadow文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd user<br>[root@localhost ~]# echo 123456 | passwd --stdin user<br>[root@localhost ~]# usermod -a -G wheel user<br>[root@localhost ~]# su - user<br>[user@localhost ~]$ cat /etc/shadow<br>cat: /etc/shadow: 权限不够<br>[user@localhost ~]$ sudo -u root cat /etc/shadow<br>[sudo] user 的密码：<br>[user@localhost ~]$ sudo cat /etc/shadow<br><span class="hljs-meta prompt_"># </span><span class="language-bash">sudo -u root用的比较多，可以被精简为sudo</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看下列示例</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">papi ALL=(root) NOPASSWD: /bin/chown,/usr/sbin/useradd<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 表示: 用户papi能在所有可能出现的主机上, 提权到root下执行`/bin/chown`, 不必输入密码;<br>但运行`/usr/sbin/useradd`命令时需要密码<br>* 在具有sudo操作的用户下, 执行`sudo -l`可以查看到该用户被允许和被禁止运行的命令<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看下列示例</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">papi ALL=/usr/sbin/,/sbin/,!/usr/sbin/fdisk<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 命令前面加上!号表示取消该命令<br>* 用户papi在所有可能出现的主机上, 能够运行目录/usr/sbin和/sbin下所有的程序, 但fdisk除外。<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>默认情况下输入一次sudo可以保持15分钟不再要求输入密码，如果想要延长这个时间，可以修改 配置文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# visudo<br>Defaults env_reset,pwfeedback,timestamp_timeout=60<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个是改成60分钟才会需要再次输入密码，并且输入密码的时候会显示*号</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux权限管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件基本属性与文件查找</title>
    <link href="/20221003/Linux%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/"/>
    <url>/20221003/Linux%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1>文件时间</h1><p>任何一个操作系统都有时间的概念，时间的概念主要用于对文件和系统中发生的时间进行记录，在Linux 中，可以使用stat查看Linux系统中文件的时间</p><h2 id="stat">stat</h2><p>用于显示文件时间和 inode 内容，inode相关的知识会在后面的磁盘管理章节详细讲解，这边主要来看 文件的时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">stat [选项]... 文件...<br></code></pre></td></tr></table></figure><h3 id="实例">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>stat查看文件时间，这边为了我们方便看得懂，建议改为英文系统环境</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# export LANG=&quot;en_US.UTF-8&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">改回中文是LANG=<span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span></span><br>[root@localhost ~]# stat anaconda-ks.cfg<br>File: ‘anaconda-ks.cfg’<br>Size: 1241 Blocks: 8 IO Block: 4096 regular file<br>Device: fd00h/64768d Inode: 33574979 Links: 1<br>Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)<br>Context: system_u:object_r:admin_home_t:s0<br>Access: 2021-04-04 17:54:09.700844151 +0800<br>Modify: 2021-04-04 16:53:30.524854041 +0800<br>Change: 2021-04-04 16:53:30.524854041 +0800<br>Birth: -<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Access：访问时间，也叫atime</p><ul class="lvl-2"><li class="lvl-4">当文件被访问的时候，这个时间就会发生改变</li><li class="lvl-4">Linux文件运行的时候查看文件又频繁数量又大，如果每次atime发生变化的时候都记入硬 盘，或造成很大的压力。RHEL6开始relatime，atime延迟修改，必须满足其中一个条件：<ul class="lvl-4"><li class="lvl-6">自上次atime修改后，已达到86400秒</li><li class="lvl-6">发生写操作时</li></ul></li></ul></li><li class="lvl-2"><p>Modify：修改时间，也叫mtime</p><ul class="lvl-2"><li class="lvl-4">当文件内容发生变化的时候，这个时间就会发生改变</li></ul></li><li class="lvl-2"><p>Change：改变时间，也叫ctime</p><ul class="lvl-2"><li class="lvl-4">当文件状态被改变的时候，这个时间就会发生修改</li></ul></li></ul><h1>文件类型</h1><p>Linux系统和Windows系统有很大的区别，Windows系统查看文件的后缀名就可以知道这个是什么类型 的文件，比如： test.jpg 这个是一个图片，如果你在windows上双击打开，就会使用支持查看图片的 软件打开。</p><p>Linux系统就根本不看文件的后缀名，你认为这个是什么文件，你就使用什么工具打开这个文件，如果打 开错误，就会报错，看下面的案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat file<br>cat: file: Is a directory<br></code></pre></td></tr></table></figure><h2 id="方法一：ls">方法一：ls</h2><p>使用ls可以查看当前目录下有哪些文件，我们会发现文件夹和文件的颜色并不一样，所以我们可以简单 的通过颜色来进行判断，不过这种判断的方式并不准确，因为不同的Linux发行套件颜色的标准并不一 样，不同的远程管理工具对颜色的理解也有偏差，比如可能把蓝色显示为淡蓝色，而淡蓝色又显示成其 他颜色。所以最推荐的做法是通过 ls -l 查看第一个字母：</p><ul class="lvl-0"><li class="lvl-2"><p>-普通文件(文本文档，二进制文件，压缩文件，电影，图片。。。)</p></li><li class="lvl-2"><p>d目录文件(蓝色)</p></li><li class="lvl-2"><p>b块设备文件(块设备)存储设备硬盘，U盘 /dev/sda,/dev/sda1</p></li><li class="lvl-2"><p>c字符设备文件(字符设备)打印机，终端 /dev/tty1,/dev/zero</p></li><li class="lvl-2"><p>s套接字文件</p></li><li class="lvl-2"><p>p管道文件</p></li><li class="lvl-2"><p>p管道文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# type ll<br>ll 是 `ls -l --color=auto&#x27; 的别名<br>[root@localhost ~]# ll -d /etc/hosts /bin/ls /home /dev/sda /dev/tty1<br>/etc/grub2.cfg /dev/log /run/dmeventd-client<br>-rwxr-xr-x. 1 root root 117680 10月 31 2018 /bin/ls<br>srw-rw-rw-. 1 root root 0 4月 4 16:54 /dev/log<br>brw-rw----. 1 root disk 8, 0 4月 4 16:54 /dev/sda<br>crw--w----. 1 root tty 4, 1 4月 4 16:56 /dev/tty1<br>lrwxrwxrwx. 1 root root 22 4月 4 16:49 /etc/grub2.cfg -&gt;<br>../boot/grub2/grub.cfg<br>-rw-r--r--. 1 root root 158 6月 7 2013 /etc/hosts<br>drwxr-xr-x. 2 root root 6 4月 11 2018 /home<br>prw-------. 1 root root 0 4月 4 16:54 /run/dmeventd-client<br></code></pre></td></tr></table></figure><p>对于初学者而言，我们现在只要知道可以通过这样的方式查看文件的类型，并且能够知道 - 和 d 的意思 即可。后面在学习的过程中，会慢慢的将所有文件类型都掌握的。</p><h2 id="方法二：file">方法二：file</h2><p>file是专门用来查看文件的类型的命令，有时候也可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# file /etc/hosts<br>/etc/hosts: ASCII text<br>[root@localhost ~]# file /bin/ls<br>/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically<br>linked (uses shared libs), for GNU/Linux 2.6.32,<br>BuildID[sha1]=ceaf496f3aec08afced234f4f36330d3d13a657b, stripped<br>[root@localhost ~]# file /dev/sda<br>/dev/sda: block special<br>[root@localhost ~]# file /dev/tty1<br>/dev/tty1: character special<br>[root@localhost ~]# file /etc/grub2.cfg<br>/etc/grub2.cfg: symbolic link to `../boot/grub2/grub.cfg&#x27;<br>[root@localhost ~]# file /home<br>/home: directory<br>[root@localhost ~]# file /run/dmeventd-client<br>/run/dmeventd-client: fifo (named pipe)<br></code></pre></td></tr></table></figure><h2 id="方法三：stat">方法三：stat</h2><p>这个命令上面已经介绍过了，在输出结果中也是可以看到文件的类型</p><h1>文件查找</h1><p>在windows中可以在文件管理器中很方便的输入文件名查找文件，然而Linux的文件查找功能更加的方 便，并且功能更加的强大，现在就介绍三个用于查找文件的命令。</p><p>在这三种查找命令中功能最强大的是 find 命令，所以在学习的时候， which 和 locate 需要掌握， find 命令需要熟练掌握！</p><h2 id="which">which</h2><p>用于查找文件</p><p>which指令会在环境变量 $PATH 设置的目录里查找符合条件的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">which [文件...]<br></code></pre></td></tr></table></figure><h3 id="补充知识：环境变量">补充知识：环境变量</h3><p>环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数， 如：临时文件夹位置和系统文件夹位置等。</p><p>简单的理解就是告诉操作系统在程序运行的时候，有一些默认的设置是什么。</p><p>比如上面我们修改了 LANG 变量，就是一个环境变量，会影响到显示的语言是中文还是英文。</p><p>比如在讲解 pwd 命令的时候，我们修改了 $PWD 变量，就影响了当前所处的文件夹。</p><p>在我们使用shell命令行输入命令的时候，其实每个命令都是有一个可执行文件去完成我们下达的任务， 这个可执行文件在操作系统中是分布在不同的文件夹中的，我们总不能每次执行的时候都要告诉操作系 统这个文件在哪里，那么就算是查看一个文件，我们都需要输入如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# /usr/bin/ls -lh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在Linux中，<span class="hljs-built_in">ls</span>的可执行程序在/usr/bin目录下</span><br></code></pre></td></tr></table></figure><p>这样就太麻烦了，所以就指定了一个环境变量 $PATH ，这个变量中有很多的目录地址，当我们执行命令 的时候，操作系统就会到这些目录中查找，是否存在你所输入的命令。如果有那么就会去执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# echo $PATH<br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br></code></pre></td></tr></table></figure><p>如果你想让自己安装的某个软件可以在操作系统的任意位置直接输入文件名执行，那么你也可以把自定 义的目录加入到这个 $PATH 中</p><h3 id="实例-2">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查看ls命令的可执行文件在什么目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# which ls<br>alias ls=&#x27;ls --color=auto&#x27;<br>/usr/bin/ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">which</span>会先告诉你<span class="hljs-built_in">ls</span>其实是一个别名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后显示出来<span class="hljs-built_in">ls</span>所在的具体位置</span><br></code></pre></td></tr></table></figure><p>**小知识：**我们在执行 ls 的时候，其实执行的是 ls --color=auto 这条命令，在显示文件的时候使用不 同的颜色表示不同的文件类型，如果我们想执行 ls 本体，而不想执行别名，我们可以输入 \ls 就可以 了，这样就不会有不同的颜色表示文件类型了。</p><ul class="lvl-0"><li class="lvl-2"><p>查看poweroff在什么目录</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs she">[root@localhost ~]# which poweroff<br>/usr/sbin/poweroff<br></code></pre></td></tr></table></figure><h2 id="locate">locate</h2><p>用于查找符合条件的文件，他会去保存文件和目录名称的数据库内，查找合乎范本样式条件的文件或目 录</p><p>在centos7的最小化安装中，并没有自带locate命令，我们需要输入如下命令进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum -y install mlocate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意，在安装的时候需要确保虚拟机有网络</span><br></code></pre></td></tr></table></figure><p>ocate的使用方式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">locate [选项]... [范本样式]...<br></code></pre></td></tr></table></figure><p>在使用locate之前，需要更新一下数据库，因为locate只会在数据库中查找文件所在的位置，所以locate 查找速度极快，缺点就是数据库更新并不是实时的，更新数据库有两种方式：</p><ul class="lvl-0"><li class="lvl-2"><p>手动更新，输入 updatedb</p></li><li class="lvl-2"><p>默认情况下， updatedb 会每天自动执行一次</p></li><li class="lvl-2"><p>配置文件在/etc/updatedb.conf</p></li></ul><h3 id="选项">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-c：只输出找到的数量</p></li><li class="lvl-2"><p>-c：只输出找到的数量</p></li><li class="lvl-2"><p>-i：忽略大小写</p></li><li class="lvl-2"><p>-r：使用基本正则表达式</p></li><li class="lvl-2"><p>–regex：使用扩展正则表达式</p></li><li class="lvl-2"><p>-d DBPATH：使用 DBPATH 指定的数据库，而不是默认数据库 /var/lib/mlocate/mlocate.db</p></li></ul><h3 id="实例-3">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查找passwd文件所在的位置</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# updatedb<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新数据库并不是每次查找都需要，但是建议更新数据库来保证数据是最新的</span><br>[root@localhost ~]# locate passwd<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找ens33网卡配置文件所在的位置</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">查找ens33网卡配置文件所在的位置<br></code></pre></td></tr></table></figure><p>关于正则表达式，我们会在后续文本三剑客中详细学习</p><h2 id="find">find</h2><p>实时查找工具，通过遍历指定路径下的文件系统完成文件查找</p><p>工作特点:</p><ul class="lvl-0"><li class="lvl-2"><p>查找速度略慢</p></li><li class="lvl-2"><p>精确查找</p></li><li class="lvl-2"><p>实时查找</p></li><li class="lvl-2"><p>可以满足多种条件匹配</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">find [选项] [路径] [查找条件 + 处理动作]<br>查找路径：指定具体目录路径，默认是当前文件夹<br>查找条件：指定的查找标准（文件名/大小/类型/权限等），默认是找出所有文件<br>处理动作：对符合条件的文件做什么操作，默认输出屏幕<br></code></pre></td></tr></table></figure><h3 id="查找条件">查找条件</h3><ul class="lvl-0"><li class="lvl-2"><p>根据文件名查找</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -name &quot;ifcfg-ens33&quot;<br>[root@localhost ~]# find /etc -iname &quot;ifcfg-ens33&quot; # 忽略大小写<br>[root@localhost ~]# find /etc -iname &quot;ifcfg*&quot;<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按文件大小</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -size +5M # 大于5M<br>[root@localhost ~]# find /etc -size 5M # 等于5M<br>[root@localhost ~]# find /etc -size -5M # 小于5M<br>[root@localhost ~]# find /etc -size +5M -ls # 找到的处理动作-ls<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>指定查找的目录深度</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find / -maxdepth 3 -a -name &quot;ifcfg-ens33&quot; # 最大查找深度<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a是同时满足，-o是或</span><br>[root@localhost ~]# find / -mindepth 3 -a -name &quot;ifcfg-ens33&quot; # 最小查找深度<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按时间找</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -mtime +5 # 修改时间超过5天<br>[root@localhost ~]# find /etc -mtime 5 # 修改时间等于5天<br>[root@localhost ~]# find /etc -mtime -5 # 修改时间5天以内<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按照文件属主、属组找，文件的属主和属组，会在下一篇详细讲解。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /home -user xwz # 属主是xwz的文件<br>[root@localhost ~]# find /home -group xwz<br>[root@localhost ~]# find /home -user xwz -group xwz<br>[root@localhost ~]# find /home -user xwz -a -group root<br>[root@localhost ~]# find /home -user xwz -o -group root<br>[root@localhost ~]# find /home -nouser # 没有属主的文件<br>[root@localhost ~]# find /home -nogroup # 没有属组的文件<br></code></pre></td></tr></table></figure><p>按文件类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /dev -type d<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按文件权限，文件权限会在下一篇详细讲解</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find / -perm 644 -ls<br>[root@localhost ~]# find / -perm -644 -ls # 权限小于644的<br>[root@localhost ~]# find / -perm 4000 -ls<br>[root@localhost ~]# find / -perm -4000 -ls<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按正则表达式</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -regex &#x27;.*ifcfg-ens[0-9][0-9]&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">.* 任意多个字符</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[0-9] 任意一个数字</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>条件组合</p><ul class="lvl-2"><li class="lvl-4"><p>-a：多个条件and并列</p></li><li class="lvl-4"><p>-o：多个条件or并列</p></li><li class="lvl-4"><p>-not：条件取反</p></li></ul></li></ul><h2 id="处理动作">处理动作</h2><ul class="lvl-0"><li class="lvl-2"><p>‐print：默认的处理动作，显示至屏幕</p></li><li class="lvl-2"><p>‐ls：类型于对查找到的文件执行 ls ‐l 命令</p></li><li class="lvl-2"><p>‐delete：删除查找到的文件</p></li><li class="lvl-2"><p>‐fls /path/to/somefile：查找到的所有文件的长格式信息保存至指定文件中</p></li><li class="lvl-2"><p><em>‐ok COMMAND {}</em>：对查找到的每个文件执行由COMMAND指定的命令，需要确认</p></li><li class="lvl-2"><p>*‐exec COMMAND {} *：对查找到的每个文件执行由COMMAND指定的命令，不需要确认</p></li><li class="lvl-2"><p>*‐exec COMMAND {} *：对查找到的每个文件执行由COMMAND指定的命令，不需要确认</p></li></ul><p>下面的实例大家学习完后续用户权限管理之后，就可以完全看的懂了</p><h3 id="实例-4">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查找/var目录下属主为root，且属组为mail的所有文件或目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /var ‐user root ‐group mail<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找/usr目录下不属于root，bin或Hadoop的所有文件或目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /usr ‐not ‐user root ‐a ‐not ‐user bin ‐a ‐not ‐user<br>centos<br>[root@localhost ~]# find /usr ‐not \(‐user root ‐o ‐user bin ‐o ‐user hadoop\)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找/etc目录下最近一周内容曾被修改过的文件或目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc/ ‐mtime ‐7<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找当前系统上没有属主或属组，且最近一周内曾被访问过的文件或目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find / \(‐nouser ‐o ‐nogroup\) ‐a ‐atime ‐7<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找/etc目录下大于1M且类型为普通文件的所有文件或目录</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc ‐size +1M ‐type f<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找/etc目录下所有用户都没有写权限的文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc ‐not ‐perm -222<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找/etc目录下至少一类用户没有执行权限的文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc ‐not ‐perm ‐111<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查找/etc/init.d目录下，所有用户都执行权限，且其它用户写权限的文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]#find /etc/init.d ‐perm ‐113<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux文件管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python与协程</title>
    <link href="/20221001/Python%E4%B8%8E%E5%8D%8F%E7%A8%8B/"/>
    <url>/20221001/Python%E4%B8%8E%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1>协程理论</h1><p>进程是资源分配的最小单位,线程是CPU调度的最小单位</p><p>无论是创建多进程还是创建多线程来解决问题，都要消耗一定的时间来创建进程、创建线程、以及管理 他们之间的切换。</p><p>随着我们对于效率的追求不断提高，基于单线程来实现并发又成为一个新的课题，即只用一个主线程 （很明显可利用的cpu只有一个）情况下实现并发。这样就可以节省创建线进程所消耗的时间。</p><p>cpu正在运行一个任务，会在两种情况下切走去执行其他的任务（切换由操作系统强制控制），一种情 况是该任务发生了阻塞，另外一种情况是该任务计算的时间过长</p><p><img src="image-20220711210310648.png" alt="CPU任务切换图"></p><p>其中第二种情况并不能提升效率，只是为了让cpu能够雨露均沾，实现看起来所有任务都被“同时”执行的 效果，如果多个任务都是纯计算的，这种切换反而会降低效率。</p><p>为此我们可以基于yield来验证。yield本身就是一种在单线程下可以保存任务运行状态的方法</p><ol><li class="lvl-3"><p>yield可以保存状态，yield的状态保存与操作系统的保存线程状态很像，但是yield是代码级别控制 的，更轻量级</p></li><li class="lvl-3"><p>send可以把一个函数的结果传给另外一个函数，以此实现单线程内程序之间的切换</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;任务1:接收数据,处理数据&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-comment"># print(&quot;消费&quot;)</span><br>x=<span class="hljs-keyword">yield</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;任务2:生产数据&#x27;&#x27;&#x27;</span><br>    g=consumer()<br>    <span class="hljs-built_in">next</span>(g)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>        <span class="hljs-comment"># print(&quot;生产&quot;)</span><br>        g.send(i)<br>        <br>start=time.time()<br><span class="hljs-comment">#基于yield保存状态,实现两个任务直接来回切换,即并发的效果</span><br><span class="hljs-comment">#PS:如果每个任务中都加上打印,那么明显地看到两个任务的打印是你一次我一次,即并发执行的.</span><br>producer()<br><br>stop=time.time()<br><span class="hljs-built_in">print</span>(stop-start) <span class="hljs-comment">#2.0272178649902344</span><br></code></pre></td></tr></table></figure><p>第一种情况的切换。在任务一遇到io情况下，切到任务二去执行，这样就可以利用任务一阻塞的时间完 成任务二的计算，效率的提升就在于此。但是如果一直在执行高强度的计算，这样切换反而会降低效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;任务1:接收数据,处理数据&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>x=<span class="hljs-keyword">yield</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27;任务2:生产数据&#x27;&#x27;&#x27;</span><br>    g=consumer()<br>    <span class="hljs-built_in">next</span>(g)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>        g.send(i)<br>        time.sleep(<span class="hljs-number">2</span>)<br><br>start=time.time()<br>producer() <span class="hljs-comment">#并发执行,但是任务producer遇到io就会阻塞住,并不会切到该线程内的其他任务去执行</span><br><br>stop=time.time()<br><span class="hljs-built_in">print</span>(stop-start)<br></code></pre></td></tr></table></figure><ol><li class="lvl-3"><p>可以控制多个任务之间的切换，切换之前将任务的状态保存下来，以便重新运行时，可以基于暂停 的位置继续执行。</p></li><li class="lvl-3"><p>可以控制多个任务之间的切换，切换之前将任务的状态保存下来，以便重新运行时，可以基于暂停 的位置继续执行。</p></li></ol><h1>协程</h1><p>协程是一种用户态的轻量级线程，即协程是由用户程序自己控制调度的。</p><ol><li class="lvl-3"><p>python的线程属于内核级别的，即由操作系统控制调度（如单线程遇到io或执行时间过长就会被迫 交出cpu执行权限，切换其他线程运行）</p></li><li class="lvl-3"><p>单线程内开启协程，一旦遇到io，就会从应用程序级别（而非操作系统）控制切换，以此来提升效 率（！！！非io操作的切换与效率无关）</p></li></ol><p>对比操作系统控制线程的切换，用户在单线程内控制协程的切换</p><p>优点：</p><ol><li class="lvl-3"><p>协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级</p></li><li class="lvl-3"><p>单线程内就可以实现并发的效果，最大限度地利用cpu</p></li></ol><p>缺点：</p><ol><li class="lvl-3"><p>协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线 程，每个线程内开启协程</p></li><li class="lvl-3"><p>协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程</p></li></ol><p>协程特点：</p><ol><li class="lvl-3"><p>必须在只有一个单线程里实现并发</p></li><li class="lvl-3"><p>修改共享数据不需加锁</p></li><li class="lvl-3"><p>用户程序里自己保存多个控制流的上下文栈</p></li><li class="lvl-3"><p>附加：一个协程遇到IO操作自动切换到其它协程（如何实现检测IO，yield、greenlet都无法实现， 就用到了gevent模块（select机制）</p></li></ol><h1>Greenlet模块</h1><p>pip install greenlet</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> greenlet <span class="hljs-keyword">import</span> greenlet<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s eat 1&#x27;</span> %name)<br>    g2.switch(<span class="hljs-string">&#x27;aaron&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s eat 2&#x27;</span> %name)<br>    g2.switch()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s play 1&#x27;</span> %name)<br>    g1.switch()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s play 2&#x27;</span> %name)<br>    <br>g1=greenlet(eat)<br>g2=greenlet(play)<br><br>g1.switch(<span class="hljs-string">&#x27;aaron&#x27;</span>) <span class="hljs-comment"># 可以在第一次switch时传入参数，以后都不需要</span><br></code></pre></td></tr></table></figure><p>单纯的切换（在没有io的情况下或者没有重复开辟内存空间的操作），反而会降低程序的执行速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#顺序执行</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    res=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>res+=i<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    res=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>res*=i<br><br>start=time.time()<br>f1()<br>f2()<br>stop=time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;run time is %s&#x27;</span> %(stop-start))<br><br><span class="hljs-comment">#切换</span><br><span class="hljs-keyword">from</span> greenlet <span class="hljs-keyword">import</span> greenlet<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    res=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>        res+=i<br>        g2.switch()<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    res=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>    res*=i<br>g1.switch()<br>        <br>start=time.time()<br>g1=greenlet(f1)<br>g2=greenlet(f2)<br>g1.switch()<br>stop=time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;run time is %s&#x27;</span> %(stop-start))<br></code></pre></td></tr></table></figure><p>greenlet只是提供了一种比generator更加便捷的切换方式，当切到一个任务执行时如果遇到io，那就原 地阻塞，仍然是没有解决遇到IO自动切换来提升效率的问题。</p><p>单线程里的这20个任务的代码通常会既有计算操作又有阻塞操作，我们完全可以在执行任务1时遇到阻 塞，就利用阻塞的时间去执行任务2。。。。如此，才能提高效率，这就用到了Gevent模块。</p><h1>Gevent模块</h1><p>pip install gevent</p><p>Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式 是Greenlet, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进 程的内部，但它们被协作式地调度。</p><p>用法介绍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">g1=gevent.spawn(func,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,x=<span class="hljs-number">4</span>,y=<span class="hljs-number">5</span>) <span class="hljs-comment"># 创建一个协程对象g1，spawn括号内第一个参数是函数名，如eat，后面可以有多个参数，可以是位置实参或关键字实参，都是传给函数eat的</span><br><br>g2=gevent.spawn(func2)<br><br>g1.join() <span class="hljs-comment">#等待g1结束</span><br><br>g2.join() <span class="hljs-comment">#等待g2结束</span><br><br><span class="hljs-comment">#或者上述两步合作一步：gevent.joinall([g1,g2])</span><br><br>g1.value<span class="hljs-comment">#拿到func1的返回值</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s eat 1&#x27;</span> %name)<br>    gevent.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s eat 2&#x27;</span> %name)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s play 1&#x27;</span> %name)<br>    gevent.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s play 2&#x27;</span> %name)<br>    <br>g1=gevent.spawn(eat,<span class="hljs-string">&#x27;aaron&#x27;</span>)<br>g2=gevent.spawn(play,name=<span class="hljs-string">&#x27;aaron&#x27;</span>)<br>g1.join()<br>g2.join()<br><span class="hljs-comment">#或者gevent.joinall([g1,g2])</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上例gevent.sleep(2)模拟的是gevent可以识别的io阻塞,而time.sleep(2)或其他的阻塞,gevent是不能直接识别的需要用下面一行代码,打补丁,就可以识别了</p><p>from gevent import monkey;monkey.patch_all()必须放到被打补丁者的前面，如time，socket模块之前</p><p>或者我们干脆记忆成：要用gevent，需要将from gevent import monkey;monkey.patch_all()放到文件的开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey;monkey.patch_all()<br><br><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;eat food 1&#x27;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;eat food 2&#x27;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;play 1&#x27;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;play 2&#x27;</span>)<br>    <br>g1=gevent.spawn(eat)<br>g2=gevent.spawn(play)<br>gevent.joinall([g1,g2])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><p>用threading.current_thread().getName()来查看每个g1和g2，查看的结果为DummyThread-n，即假线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey;monkey.patch_all()<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>():<br>    <span class="hljs-built_in">print</span>(threading.current_thread().getName())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;eat food 1&#x27;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;eat food 2&#x27;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>():<br>    <span class="hljs-built_in">print</span>(threading.current_thread().getName())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;play 1&#x27;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;play 2&#x27;</span>)<br>    <br>g1=gevent.spawn(eat)<br>g2=gevent.spawn(play)<br>gevent.joinall([g1,g2])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><h1>Gevent之同步与异步</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> spawn,joinall,monkey;monkey.patch_all()<br><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">pid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Some non-deterministic task</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Task %s done&#x27;</span> % pid)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">synchronous</span>(): <span class="hljs-comment"># 同步</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>task(i)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">asynchronous</span>(): <span class="hljs-comment"># 异步</span><br>g_l=[spawn(task,i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>joinall(g_l)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;DONE&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Synchronous:&#x27;</span>)<br>    synchronous()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Asynchronous:&#x27;</span>)<br>    asynchronous()<br><span class="hljs-comment"># 上面程序的重要部分是将task函数封装到Greenlet内部线程的gevent.spawn。</span><br><span class="hljs-comment"># 初始化的greenlet列表存放在数组threads中，此数组被传给gevent.joinall 函数，</span><br><span class="hljs-comment"># 后者阻塞当前流程，并执行所有给定的greenlet任务。执行流程只会在 所有greenlet执行完后才会继续向下走。</span><br></code></pre></td></tr></table></figure><h1>Gevent之应用举例一</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey;monkey.patch_all()<br><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;GET: %s&#x27;</span> %url)<br>    response=requests.get(url)<br>    <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d bytes received from %s&#x27;</span> %(<span class="hljs-built_in">len</span>(response.text),url))<br>    <br>start_time=time.time()<br>gevent.joinall([<br>    gevent.spawn(get_page,<span class="hljs-string">&#x27;https://www.python.org/&#x27;</span>),<br>    gevent.spawn(get_page,<span class="hljs-string">&#x27;https://www.yahoo.com/&#x27;</span>),<br>    gevent.spawn(get_page,<span class="hljs-string">&#x27;https://github.com/&#x27;</span>),<br>])<br>stop_time=time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))<br></code></pre></td></tr></table></figure><h1>Gevent之应用举例二，协程并发聊天室</h1><p>通过gevent实现单线程下的socket并发</p><p>注意 ：from gevent import monkey;monkey.patch_all()一定要放到导入socket模块之前，否则gevent 无法识别socket的阻塞</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey;<br>monkey.patch_all()<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gevent<br><br><span class="hljs-comment">#如果不想用money.patch_all()打补丁,可以用gevent自带的socket</span><br><span class="hljs-comment"># from gevent import socket</span><br><span class="hljs-comment"># s=socket.socket()</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server</span>(<span class="hljs-params">server_ip,port</span>):<br>    s=socket(AF_INET,SOCK_STREAM)<br>    s.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="hljs-number">1</span>)<br>    s.bind((server_ip,port))<br>    s.listen(<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        conn,addr=s.accept()<br>        gevent.spawn(talk,conn,addr)<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">talk</span>(<span class="hljs-params">conn,addr</span>):<br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            res=conn.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;client %s:%s msg: %s&#x27;</span> %(addr[<span class="hljs-number">0</span>],addr[<span class="hljs-number">1</span>],res))<br>            conn.send(res.upper())<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">finally</span>:<br>conn.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>server(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8088</span>)<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><br>client=socket(AF_INET,SOCK_STREAM)<br>client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    msg=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>).strip()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<span class="hljs-keyword">continue</span><br>    <br>    client.send(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    msg=client.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>多线程并发客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">client</span>(<span class="hljs-params">server_ip,port</span>):<br>c=socket(AF_INET,SOCK_STREAM) <span class="hljs-comment">#套接字对象一定要加到函数内，即局部名称空间内，放在函数外则被所有线程共享，则大家公用一个套接字对象，那么客户端端口永远一样了</span><br>c.connect((server_ip,port))<br><br>    count=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>c.send((<span class="hljs-string">&#x27;%s say hello %s&#x27;</span> %<br>(threading.current_thread().getName(),count)).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        msg=c.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        count+=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>        t=Thread(target=client,args=(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8088</span>))<br>        t.start()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python与线程</title>
    <link href="/20221001/Python%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/20221001/Python%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1>操作系统线程理论</h1><h2 id="进程">进程</h2><p>进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</p><p>进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。</p><h2 id="线程">线程</h2><p>60年代，在OS中能拥有资源和独立运行的基本单位是进程，然而随着计算机技术的发展，进程出现了很多弊端</p><ol><li class="lvl-3"><p>是由于进程是资源拥有者，创建、撤消与切换存在较大的时空开销，因此需要引入轻型进程；</p></li><li class="lvl-3"><p>是由于对称多处理机（SMP）出现，可以满足多个运行单位，而多个进程并行开销过大。</p></li></ol><p>因此在80年代，出现了能独立运行的基本单位——线程（Threads）。</p><p>注意：进程是资源分配的最小单位,线程是CPU调度的最小单位.每一个进程中至少有一个线程。</p><h2 id="进程和线程的关系">进程和线程的关系</h2><p><img src="image-20220711181423215.png" alt="进程与线程示意图"></p><p>线程与进程的区别可以归纳为以下4点：</p><ol><li class="lvl-3"><p>地址空间和其它资源共享（如打开文件）：进程间相互独立，同一进程的各线程间共享。某进程内 的线程在其它进程不可见。</p></li><li class="lvl-3"><p>通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程 同步和互斥手段的辅助，以保证数据的一致性。</p></li><li class="lvl-3"><p>调度和切换：线程上下文切换比进程上下文切换要快得多。</p><ul class="lvl-2"><li class="lvl-5"><p>**上下文切换：**操作系统通过处理器调度让处理器轮流执行多个进程。实现不同进程中指令交替 执行的机制称为进程的上下文切换。</p></li><li class="lvl-5"><p>**进程的上下文：**进程的物理实体（代码和数据等）和支持运行的环境合称为进程的上下文。进 程的上下文包括用户级上下文和系统级上下文</p></li></ul></li></ol><h2 id="使用线程的实际场景">使用线程的实际场景</h2><p>开启一个字处理软件进程，该进程肯定需要办不止一件事情，比如监听键盘输入，处理文字，定时自动 将文字保存到硬盘，这三个任务操作的都是同一块数据，因而不能用多进程。只能在一个进程里并发地 开启三个线程,如果是单线程，那就只能是，键盘输入时，不能处理文字和自动保存，自动保存时又不能 输入和处理文字。</p><h2 id="内存中的线程">内存中的线程</h2><p><img src="image-20220711181634439.png" alt="内存中的线程"></p><p>线程通常是有益的，但是带来了不小程序设计难度，线程的问题是：</p><ol><li class="lvl-3"><p>父进程有多个线程，那么开启的子线程是否需要同样多的线程</p></li><li class="lvl-3"><p>在同一个进程中，如果一个线程关闭了文件，而另外一个线程正准备往该文件内写内容呢？</p></li></ol><p>因此，在多线程的代码中，需要更多的心思来设计程序的逻辑、保护程序的数据。</p><h1>python使用线程</h1><h2 id="全局解释器锁GIL">全局解释器锁GIL</h2><p>Python代码的执行由Python虚拟机(也叫解释器主循环)来控制。Python在设计之初就考虑到要在主循环 中，同时只有一个线程在执行。虽然 Python 解释器中可以“运行”多个线程，但在任意时刻只有一个线程 在解释器中运行。</p><p>对Python虚拟机的访问由全局解释器锁(GIL)来控制，正是这个锁能保证同一时刻只有一个线程在运 行。</p><p>在多线程环境中，Python 虚拟机按以下方式执行：</p><p><img src="image-20220711181746655.png" alt="Python 虚拟机运行方式"></p><p>设置 GIL；</p><p>切换到一个线程去运行；</p><p>运行指定数量的字节码指令或者线程主动让出控制(可以调用 time.sleep(0))；</p><p>把线程设置为睡眠状态；</p><p>解锁 GIL；</p><p>再次重复以上所有步骤。</p><p>在调用外部代码(如 C/C++扩展函数)的时候，GIL将会被锁定，直到这个函数结束为止(由于在这期 间没有Python的字节码被运行，所以不会做线程切换)编写扩展的程序员可以主动解锁GIL。</p><p><a href="https://blog.csdn.net/weixin_42239402/article/details/95375147">https://blog.csdn.net/weixin_42239402/article/details/95375147</a></p><h2 id="python线程模块的选择">python线程模块的选择</h2><p>Python提供了几个用于多线程编程的模块，包括thread、threading和Queue等。thread和threading 模块允许程序员创建和管理线程。thread模块提供了基本的线程和锁的支持，threading提供了更高级别、功能更强的线程管理的功能。Queue模块允许用户创建一个可以用于多个线程之间共享数据的队列 数据结构。</p><p>避免使用thread模块，因为更高级别的threading模块更为先进，对线程的支持更为完善，而且使用 thread模块里的属性有可能会与threading出现冲突；其次低级别的thread模块的同步原语很少(实际上 只有一个)，而threading模块则有很多；再者，thread模块中当主线程结束时，所有的线程都会被强制 结束掉，没有警告也不会有正常的清除工作，至少threading模块能确保重要的子线程退出后进程才退 出。</p><p>thread模块不支持守护线程，当主线程退出时，所有的子线程不论它们是否还在工作，都会被强行退 出。而threading模块支持守护线程，守护线程一般是一个等待客户请求的服务器，如果没有客户提出请 求它就在那等着，如果设定一个线程为守护线程，就表示这个线程是不重要的，在进程退出的时候，不 用等待这个线程退出。</p><h1>threading模块</h1><h2 id="线程的创建">线程的创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sayhi</span>(<span class="hljs-params">name</span>):<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s say hello&#x27;</span> %name)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t=Thread(target=sayhi,args=(<span class="hljs-string">&#x27;aaron&#x27;</span>,))<br>    t.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程&#x27;</span>)<br></code></pre></td></tr></table></figure><p>另一种以类继承创建进程的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sayhi</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br><span class="hljs-built_in">super</span>().__init__()<br>self.name=name<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>time.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s say hello&#x27;</span> % self.name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>t = Sayhi(<span class="hljs-string">&#x27;aaron&#x27;</span>)<br>t.start()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="多线程与多进程">多线程与多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,os.getpid())<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#part1:在主进程下开启多个线程,每个线程都跟主进程的pid一样</span><br>    t1=Thread(target=work)<br>    t2=Thread(target=work)<br>    t1.start()<br>    t2.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())<br><br>    <span class="hljs-comment">#part2:开多个进程,每个进程都有不同的pid</span><br>    p1=Process(target=work)<br>    p2=Process(target=work)<br>    p1.start()<br>    p2.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())<br></code></pre></td></tr></table></figure><p>效率对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hi</span>(<span class="hljs-params">n</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">print</span>(n+<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>t_list=[]<br>t1=time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>t=Thread(target=say_hi,args=(i,))<br>t.start()<br>t_list.append(t)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t_list:<br>i.join()<br>t2=time.time()<br><span class="hljs-built_in">print</span>(t2-t1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主线程&quot;</span>)<br></code></pre></td></tr></table></figure><p>内存数据共享</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    <span class="hljs-keyword">global</span> n<br>    n=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># n=100</span><br>    <span class="hljs-comment"># p=Process(target=work)</span><br>    <span class="hljs-comment"># p.start()</span><br>    <span class="hljs-comment"># p.join()</span><br>    <span class="hljs-comment"># print(&#x27;主&#x27;,n) #毫无疑问子进程p已经将自己的全局的n改成了0,但改的仅仅是它自己的,查看父进程的n仍然为100</span><br><br>    n=<span class="hljs-number">1</span><br>    t=Thread(target=work)<br>    t.start()<br>    t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>,n) <span class="hljs-comment">#查看结果为0,因为同一进程内的线程之间共享进程内的数据</span><br></code></pre></td></tr></table></figure><h1>多线程实现socket</h1><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">import</span> socket<br>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>s.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br>s.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">conn</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data=conn.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(data)<br>        conn.send(data.upper())<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        conn,addr=s.accept()<br><br>        p=threading.Thread(target=action,args=(conn,))<br>        p.start()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>s.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    msg=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>).strip()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<span class="hljs-keyword">continue</span><br>    <br>    s.send(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    data=s.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><h2 id="Thread类的其他方法">Thread类的其他方法</h2><ul class="lvl-0"><li class="lvl-2"><p>Thread实例对象的方法</p><ul class="lvl-2"><li class="lvl-4">isAlive(): 返回线程是否活动的。</li><li class="lvl-4">getName(): 返回线程名。</li><li class="lvl-4">setName(): 设置线程名。</li></ul></li><li class="lvl-2"><p>threading模块提供的一些方法：</p><ul class="lvl-2"><li class="lvl-4">threading.currentThread(): 返回当前的线程变量。</li><li class="lvl-4">threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li><li class="lvl-4">threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br><span class="hljs-keyword">import</span> time<br>time.sleep(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(threading.current_thread().getName())<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-comment">#在主进程下开启线程</span><br>t=Thread(target=work)<br>t.start()<br><br>    <span class="hljs-built_in">print</span>(threading.current_thread().getName())<br>    <span class="hljs-built_in">print</span>(threading.current_thread()) <span class="hljs-comment">#主线程</span><br>    <span class="hljs-built_in">print</span>(threading.<span class="hljs-built_in">enumerate</span>()) <span class="hljs-comment">#连同主线程在内有两个运行的线程</span><br>    <span class="hljs-built_in">print</span>(threading.active_count())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程/主进程&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用join</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sayhi</span>(<span class="hljs-params">name</span>):<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s say hello&#x27;</span> %name)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t=Thread(target=sayhi,args=(<span class="hljs-string">&#x27;aaron&#x27;</span>,))<br>    t.start()<br>    t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(t.is_alive())<br></code></pre></td></tr></table></figure><h1>守护线程</h1><p>无论是进程还是线程，都遵循：守护xx会等待主xx运行完毕后被销毁。需要强调的是：运行完毕并非终止运行</p><ol><li class="lvl-3"><p>对主进程来说，运行完毕指的是主进程代码运行完毕</p><p>主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守 护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束，</p></li><li class="lvl-3"><p>对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运 行完毕</p><p>主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结 束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sayhi</span>(<span class="hljs-params">name</span>):<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s say hello&#x27;</span> %name)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t=Thread(target=sayhi,args=(<span class="hljs-string">&#x27;aaron&#x27;</span>,))<br>    t.setDaemon(<span class="hljs-literal">True</span>) <span class="hljs-comment">#必须在t.start()之前设置</span><br>    t.start()<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(t.is_alive())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end123&quot;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end456&quot;</span>)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t1=Thread(target=foo)<br>    t2=Thread(target=bar)<br>    <br>    t1.daemon=<span class="hljs-literal">True</span><br>    t1.start()<br>    t2.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main&quot;</span>)<br><span class="hljs-comment">#结果：</span><br><span class="hljs-comment">#123</span><br><span class="hljs-comment">#456</span><br><span class="hljs-comment">#main</span><br><span class="hljs-comment">#end123</span><br><span class="hljs-comment">#end456</span><br><span class="hljs-comment">#出现结果的原因时因为要等主进程内全部线程运行完成，守护线程才会跟着主进程一起结束而结束</span><br></code></pre></td></tr></table></figure><h1>锁</h1><h2 id="同步锁">同步锁</h2><p>没有锁的情况下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> os,time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    <span class="hljs-keyword">global</span> n<br>    temp=n<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    n=temp-<span class="hljs-number">1</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n=<span class="hljs-number">100</span><br>    l=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        p=Thread(target=work)<br>        l.append(p)<br>        p.start()<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> l:<br>p.join()<br><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-comment">#线程太快了，大家都操作了一下就返回了，结果为99</span><br></code></pre></td></tr></table></figure><p>同步锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br>R=threading.Lock()<br>R.acquire()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">对公共数据的操作</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>R.release()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread,Lock<br><span class="hljs-keyword">import</span> os,time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    <span class="hljs-keyword">global</span> n<br>    lock.acquire()<br>    temp=n<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    n=temp-<span class="hljs-number">1</span><br>    lock.release()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    lock=Lock()<br>    n=<span class="hljs-number">100</span><br>    l=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        p=Thread(target=work)<br>        l.append(p)<br>        p.start()<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> l:<br>p.join()<br><br><span class="hljs-built_in">print</span>(n) <span class="hljs-comment">#结果肯定为0，由原来的并发执行变成串行，牺牲了执行效率保证了数据安全</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#不加锁:并发执行,速度快,数据不安全</span><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> current_thread,Thread,Lock<br><span class="hljs-keyword">import</span> os,time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>    <span class="hljs-keyword">global</span> n<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s is running&#x27;</span> %current_thread().getName())<br>    temp=n<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    n=temp-<span class="hljs-number">1</span><br>    <br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n=<span class="hljs-number">100</span><br>    lock=Lock()<br>    threads=[]<br>    start_time=time.time()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t=Thread(target=task)<br>        threads.append(t)<br>        t.start()<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>t.join()<br><br>    stop_time=time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#不加锁:未加锁部分并发执行,加锁部分串行执行,速度慢,数据安全</span><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> current_thread,Thread,Lock<br><span class="hljs-keyword">import</span> os,time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>    <span class="hljs-comment">#未加锁的代码并发运行</span><br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s start to run&#x27;</span> %current_thread().getName())<br>    <span class="hljs-keyword">global</span> n<br>    <span class="hljs-comment">#加锁的代码串行运行</span><br>    lock.acquire()<br>    temp=n<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    n=temp-<span class="hljs-number">1</span><br>    lock.release()<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n=<span class="hljs-number">100</span><br>    lock=Lock()<br>    threads=[]<br>    start_time=time.time()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t=Thread(target=task)<br>        threads.append(t)<br>        t.start()<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br>    stop_time=time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))<br></code></pre></td></tr></table></figure><p>有的同学可能有疑问:既然加锁会让运行变成串行,那么我在start之后立即使用join,就不用加锁了啊,也是串行的效果啊</p><p>没错:在start之后立刻使用join,肯定会将100个任务的执行变成串行,毫无疑问,最终n的结果也肯定是0,是 安全的,但问题是</p><p>start后立即join:任务内的所有代码都是串行执行的,而加锁,只是加锁的部分即修改共享数据的部分是串 行的</p><p>单从保证数据安全方面,二者都可以实现,但很明显是加锁的效率更高.</p><p>立刻join版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> current_thread,Thread,Lock<br><span class="hljs-keyword">import</span> os,time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s start to run&#x27;</span> %current_thread().getName())<br>    <span class="hljs-keyword">global</span> n<br>    temp=n<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    n=temp-<span class="hljs-number">1</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n=<span class="hljs-number">100</span><br>    lock=Lock()<br>    start_time=time.time()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>t=Thread(target=task)<br>t.start()<br>t.join()<br>stop_time=time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))<br></code></pre></td></tr></table></figure><h2 id="死锁与递归锁">死锁与递归锁</h2><p>两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为<strong>死锁进程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Lock <span class="hljs-keyword">as</span> Lock<br><span class="hljs-keyword">import</span> time<br>mutexA=Lock()<br>mutexA.acquire()<br>mutexA.acquire() <span class="hljs-comment"># 上面已经拿过一次key了，这边就拿不到了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>mutexA.release()<br>mutexA.release()<br><span class="hljs-comment">#程序就一直卡住了</span><br></code></pre></td></tr></table></figure><p>解决方法，递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁 RLock。</p><p>这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次acquire。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> RLock <span class="hljs-keyword">as</span> Lock<br><span class="hljs-keyword">import</span> time<br>mutexA=Lock()<br>mutexA.acquire()<br>mutexA.acquire()<br><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>mutexA.release()<br>mutexA.release()<br></code></pre></td></tr></table></figure><p>吃面的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread,Lock<br>noodle_lock = Lock()<br>fork_lock = Lock()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat1</span>(<span class="hljs-params">name</span>):<br>    noodle_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了面条&#x27;</span>%name)<br>    fork_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了叉子&#x27;</span>%name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃面&#x27;</span>%name)<br>    fork_lock.release()<br>    noodle_lock.release()<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat2</span>(<span class="hljs-params">name</span>):<br>    fork_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了叉子&#x27;</span> % name)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    noodle_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了面条&#x27;</span> % name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃面&#x27;</span> % name)<br>    noodle_lock.release()<br>    fork_lock.release()<br>    <br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;顾客1&#x27;</span>,<span class="hljs-string">&#x27;顾客2&#x27;</span>,<span class="hljs-string">&#x27;顾客3&#x27;</span>]:<br>    t1 = Thread(target=eat1,args=(name,))<br>    t2 = Thread(target=eat2,args=(name,))<br>    t1.start()<br>    t2.start()<br><span class="hljs-comment">#有人只有叉子，有人只有面，就会死锁</span><br></code></pre></td></tr></table></figure><p>使用递归锁解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread,RLock<br><br>noodle_lock = fork_lock = RLock()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat1</span>(<span class="hljs-params">name</span>):<br>    noodle_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了面条&#x27;</span>%name)<br>    fork_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了叉子&#x27;</span>%name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃面&#x27;</span>%name)<br>    fork_lock.release()<br>    noodle_lock.release()<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat2</span>(<span class="hljs-params">name</span>):<br>    fork_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了叉子&#x27;</span> % name)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    noodle_lock.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 抢到了面条&#x27;</span> % name)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃面&#x27;</span> % name)<br>    noodle_lock.release()<br>    fork_lock.release()<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;顾客1&#x27;</span>,<span class="hljs-string">&#x27;顾客2&#x27;</span>,<span class="hljs-string">&#x27;顾客3&#x27;</span>]:<br>    t1 = Thread(target=eat1,args=(name,))<br>    t2 = Thread(target=eat2,args=(name,))<br>    t1.start()<br>    t2.start()<br></code></pre></td></tr></table></figure><h2 id="线程队列">线程队列</h2><p>queue队列 ：使用import queue，用法与进程Queue一样</p><p>先进先出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><br>q=queue.Queue()<br>q.put(<span class="hljs-string">&#x27;first&#x27;</span>)<br>q.put(<span class="hljs-string">&#x27;second&#x27;</span>)<br>q.put(<span class="hljs-string">&#x27;third&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br></code></pre></td></tr></table></figure><p>先进后出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><br>q=queue.LifoQueue()<br>q.put(<span class="hljs-string">&#x27;first&#x27;</span>)<br>q.put(<span class="hljs-string">&#x27;second&#x27;</span>)<br>q.put(<span class="hljs-string">&#x27;third&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br></code></pre></td></tr></table></figure><p>优先级队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><br>q=queue.PriorityQueue()<br><span class="hljs-comment">#put进入一个元组,元组的第一个元素是优先级(通常是数字,也可以是非数字之间的比较),数字越小优</span><br>先级越高<br>q.put((<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;a&#x27;</span>))<br>q.put((<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;b&#x27;</span>))<br>q.put((<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;c&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br></code></pre></td></tr></table></figure><h1>多进程多线程总结</h1><table><thead><tr><th>比较内容</th><th>多线程</th><th>多进程</th></tr></thead><tbody><tr><td>引入模块</td><td>from threading import Thread</td><td>from multiprocessing import Process</td></tr><tr><td>创建使用</td><td>t =Thread(target=func1, args=(i,))</td><td>p = Process(target=func, args= (i,))</td></tr><tr><td>队列</td><td>import queue</td><td>from multiprocessing import Queue</td></tr><tr><td>锁</td><td>from threading import Lock</td><td>from multiprocessing import Lock</td></tr><tr><td>池</td><td>from concurrent.futures import ThreadPoolExecutor</td><td>from multiprocessing import Pool</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python与进程</title>
    <link href="/20221001/Python%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    <url>/20221001/Python%E4%B8%8E%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1>什么是进程?</h1><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基 本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体； 在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进 程是程序的实体。</p><p>狭义定义：进程是正在运行的程序的实例（an instance of a computer program that is being executed）。</p><p>广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态 执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p><ol><li class="lvl-3"><p>进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码； 数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和 本地变量。</p></li><li class="lvl-3"><p>进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时（操作系统 执行之），它才能成为一个活动的实体，我们称其为进程。 进程是操作系统中最基本、重要的概念。是多道程序系统出现后，为了刻画系统内部出现的动态情 况，描述系统内部各道程序的活动规律引进的一个概念,所有多道程序设计操作系统都建立在进程的 基础上。</p></li></ol><p>进程的特性</p><p>动态性：进程的实质是程序在多道程序系统中的一次执行过程，进程是动态产生，动态消亡的。</p><p>并发性：任何进程都可以同其他进程一起并发执行</p><p>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位；</p><p>异步性：由于进程间的相互制约，使进程具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进</p><p>结构特征：进程由程序、数据和进程控制块三部分组成。</p><p>多个不同的进程可以包含相同的程序：一个程序在不同的数据集里就构成不同的进程，能得到不同的结 果；但是执行过程中，程序不能发生改变</p><p>程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</p><p>而进程是程序在处理机上的一次执行过程，它是一个动态的概念。</p><p>程序可以作为一种软件资料长期存在，而进程是有一定生命期的。</p><p>程序可以作为一种软件资料长期存在，而进程是有一定生命期的。</p><h1>进程调度</h1><p>扩展阅读</p><p>要想多个进程交替运行，操作系统必须对这些进程进行调度，这个调度也不是随即进行的，而是需要遵 循一定的法则，由此就有了进程的调度算法。</p><p>先来先服务（FCFS）调度算法</p><blockquote><p>短作业（进程）优先调度算法（SJ/PF）是指对短作业或短进程优先调度的算法，该算法既可用于作业调 度，也可用于进程调度。但其对长作业不利；不能保证紧迫性作业（进程）被及时处理；作业的长短只是 被估算出来的。</p></blockquote><p>时间片轮转(Round Robin，RR)法</p><blockquote><p>时间片轮转(Round Robin，RR)法的基本思路是让每个进程在就绪队列中的等待时间与享受服务的时间 成比例。在时间片轮转法中，需要将CPU的处理时间分成固定大小的时间片，例如，几十毫秒至几百毫 秒。如果一个进程在被调度选中之后用完了系统规定的时间片，但又未完成要求的任务，则它自行释放自 己所占有的CPU而排到就绪队列的末尾，等待下一次调度。同时，进程调度程序又去调度当前就绪队列中 的第一个进程。</p><p>显然，轮转法只能用来调度分配一些可以抢占的资源。这些可以抢占的资源可以随时被剥夺，而且可以将 它们再分配给别的进程。CPU是可抢占资源的一种。但打印机等资源是不可抢占的。由于作业调度是对除 了CPU之外的所有系统硬件资源的分配，其中包含有不可抢占资源，所以作业调度不使用轮转法。 在轮转法中，时间片长度的选取非常重要。首先，时间片长度的选择会直接影响到系统的开销和响应时 间。如果时间片长度过短，则调度程序抢占处理机的次数增多。这将使进程上下文切换次数也大大增加， 从而加重系统开销。反过来，如果时间片长度选择过长，例如，一个时间片能保证就绪队列中所需执行时 间最长的进程能执行完毕，则轮转法变成了先来先服务法。时间片长度的选择是根据系统对响应时间的要 求和就绪队列中所允许最大的进程数来确定的。 在轮转法中，加入到就绪队列的进程有3种情况：</p><p>一种是分给它的时间片用完，但进程还未完成，回到就绪队列的末尾等待下次调度去继续执行。</p><p>另一种情况是分给该进程的时间片并未用完，只是因为请求I/O或由于进程的互斥与同步关系而被阻 塞。当阻塞解除之后再回到就绪队列。</p><p>第三种情况就是新创建进程进入就绪队列。 如果对这些进程区别对待，给予不同的优先级和时间片从直观上看，可以进一步改善系统服务质量和效 率。例如，我们可把就绪队列按照进程到达就绪队列的类型和进程被阻塞时的阻塞原因分成不同的就绪队 列，每个队列按FCFS原则排列，各队列之间的进程享有不同的优先级，但同一队列内优先级相同。这样， 当一个进程在执行完它的时间片之后，或从睡眠中被唤醒以及被创建之后，将进入不同的就绪队列。</p></blockquote><p>多级反馈队列</p><blockquote><p>前面介绍的各种用作进程调度的算法都有一定的局限性。如短进程优先的调度算法，仅照顾了短进程而忽 略了长进程，而且如果并未指明进程的长度，则短进程优先和基于进程长度的抢占式调度算法都将无法使 用。</p><p>而多级反馈队列调度算法则不必事先知道各种进程所需的执行时间，而且还可以满足各种类型进程的需 要，因而它是目前被公认的一种较好的进程调度算法。在采用多级反馈队列调度算法的系统中，调度算法 的实施过程如下所述。</p><p>(1) 应设置多个就绪队列，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二个队列次 之，其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先权 愈高的队列中，为每个进程所规定的执行时间片就愈小。例如，第二个队列的时间片要比第一个队列的时 间片长一倍，……，第i+1个队列的时间片要比第i个队列的时间片长一倍。</p><p>(2) 当一个新进程进入内存后，首先将它放入第一队列的末尾，按FCFS原则排队等待调度。当轮到该进 程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程 序便将该进程转入第二队列的末尾，再同样地按FCFS原则等待调度执行；如果它在第二队列中运行一个时 间片后仍未完成，再依次将它放入第三队列，……，如此下去，当一个长作业(进程)从第一队列依次降到第 n队列后，在第n 队列便采取按时间片轮转的方式运行。</p><p>(3) 仅当第一队列空闲时，调度程序才调度第二队列中的进程运行；仅当第1～(i-1)队列均空时，才会 调度第i队列中的进程运行。如果处理机正在第i队列中为某进程服务时，又有新进程进入优先权较高的队 列(第1～(i-1)中的任何一个队列)，则此时新进程将抢占正在运行进程的处理机，即由调度程序把正在 运行的进程放回到第i队列的末尾，把处理机分配给新到的高优先权进程。</p></blockquote><h1>进程的并行与并发</h1><p><strong>并行 :</strong> 并行是指两者同时执行，比如赛跑，两个人都在不停的往前跑；（资源够用，比如三个线程，四 核的CPU ）</p><p><strong>并发 :</strong> 并发是指资源有限的情况下，两者交替轮流使用资源，比如一段路(单核CPU资源)同时只能过一个 人，A走一段后，让给B，B用完继续给A ，交替使用，目的是提高效率。</p><p><strong>区别:</strong></p><p><strong>并行</strong>是从微观上，也就是在一个精确的时间片刻，有不同的程序在执行，这就要求必须有多个处理器。</p><p><strong>并发</strong>是从宏观上，在一个时间段上可以看出是同时执行的，比如一个服务器同时处理多个session。</p><h1>同步异步阻塞非阻塞</h1><p><img src="image-20220711153025029.png" alt="进程三状态转换示意图"></p><p>在了解其他概念之前，我们首先要了解进程的几个状态。在程序运行的过程中，由于被操作系统的调度算法控制，程序会进入几个状态：就绪，运行和阻塞。</p><ul class="lvl-0"><li class="lvl-2"><p>就绪(Ready)状态</p><p>当进程已分配到除CPU以外的所有必要的资源，只要获得处理机便可立即执行，这时的进程状 态称为就绪状态。</p></li><li class="lvl-2"><p>执行/运行（Running）状态</p><p>当进程已获得处理机，其程序正在处理机上执行，此时的进程状态称为执行状态。</p></li><li class="lvl-2"><p>阻塞(Blocked)状态</p><p>正在执行的进程，由于等待某个事件发生而无法执行时，便放弃处理机而处于阻塞状态。引起 进程阻塞的事件可有多种，例如，等待I/O完成、申请缓冲区不能满足、等待信件(信号)等</p></li></ul><p><img src="image-20220711153151271.png" alt="阻塞距离示意图"></p><h2 id="同步和异步">同步和异步</h2><p>所谓同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才 能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。</p><p>所谓异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即 执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法 确定，所以它是不可靠的任务序列。</p><ul class="lvl-0"><li class="lvl-2"><p>异步 =&gt;“我去吃饭了。”</p></li><li class="lvl-2"><p>同步 =&gt;“我去吃饭了。” ”嗯“</p></li></ul><h2 id="阻塞与非阻塞">阻塞与非阻塞</h2><p>阻塞和非阻塞这两个概念与程序（线程）等待消息通知(无所谓同步或者异步)时的状态有关。也就是说阻塞与非阻塞主要是程序（线程）等待消息通知时的状态角度来说的</p><h2 id="同步-异步与阻塞-非阻塞">同步/异步与阻塞/非阻塞</h2><ul class="lvl-0"><li class="lvl-2"><p>同步阻塞形式</p><p>效率最低。就是你专心排队，什么别的事都不做。</p></li><li class="lvl-2"><p>异步阻塞形式</p><p>如果在银行等待办理业务的人采用的是异步的方式去等待消息被触发（通知），也就是领了一 张小纸条，假如在这段时间里他不能离开银行做其它的事情，那么很显然，这个人被阻塞在了 这个等待的操作上面</p><p>异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息通知时被阻 塞。</p></li><li class="lvl-2"><p>同步非阻塞形式</p><p>实际上是效率低下的。</p><p>想象一下你一边打着电话一边还需要抬头看到底队伍排到你了没有，如果把打电话和观察排队 的位置看成是程序的两个操作的话，这个程序需要在这两种不同的行为之间来回的切换，效率 可想而知是低下的。</p></li><li class="lvl-2"><p>异步非阻塞形式</p><p>效率更高</p></li><li class="lvl-2"><p>因为打电话是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的 操作中来回切换。</p></li><li class="lvl-2"><p>比如说，这个人突然发觉自己烟瘾犯了，需要出去抽根烟，于是他告诉大堂经理说，排到我这个号 码的时候麻烦到外面通知我一下，那么他就没有被阻塞在这个等待的操作上面，自然这个就是异步 +非阻塞的方式了。现在很多餐厅取号就是这样的形式。</p></li></ul><p>很多人会把同步和阻塞混淆，是因为很多时候同步操作会以阻塞的形式表现出来，同样的，很多人也会 把异步和非阻塞混淆，因为异步操作一般都不会在真正的IO操作处被阻塞。</p><h1>进程的创建与结束</h1><h2 id="进程的创建">进程的创建</h2><p>但凡是硬件，都需要有操作系统去管理，只要有操作系统，就有进程的概念，就需要有创建进程的方式，一些操作系统只为一个应用程序设计，比如微波炉中的控制器，一旦启动微波炉，所有的进程都已经存在</p><p>而对于通用系统（跑很多应用程序），需要有系统运行过程中创建或撤销进程的能力，主要分为4中形式 创建新的进程：</p><ol><li class="lvl-3"><p>系统初始化（查看进程linux中用ps命令，windows中用任务管理器，前台进程负责与用户交互， 后台运行的进程与用户无关，运行在后台并且只在需要时才唤醒的进程，称为守护进程，如电子邮 件、web页面、新闻、打印）</p></li><li class="lvl-3"><p>一个进程在运行过程中开启了子进程（如nginx开启多进程，os.fork,subprocess.Popen等）</p></li><li class="lvl-3"><p>用户的交互式请求，而创建一个新进程（如用户双击暴风影音）</p></li><li class="lvl-3"><p>一个批处理作业的初始化（只在大型机的批处理系统中应用）</p></li></ol><p>无论哪一种，新进程的创建都是由一个已经存在的进程执行了一个用于创建进程的系统调用而创建的。</p><h2 id="进程的结束">进程的结束</h2><ol><li class="lvl-3"><p>正常退出（自愿，如用户点击交互式页面的叉号，或程序执行完毕调用发起系统调用正常退出，在 linux中用exit，在windows中用ExitProcess）</p></li><li class="lvl-3"><p>出错退出（自愿，python a.py中a.py不存在）</p></li><li class="lvl-3"><p>严重错误（非自愿，执行非法指令，如引用不存在的内存，1/0等，可以捕捉异常， try…except…）</p></li><li class="lvl-3"><p>被其他进程杀死（非自愿，如kill -9）</p></li></ol><h1>multiprocess模块</h1><p>由于提供的子模块非常多，为了方便大家归类记忆，我将这部分大致分为四个部分：创建进程部分，进 程同步部分，进程池部分，进程之间数据共享。</p><h1>multiprocess.process模块</h1><h2 id="process模块介绍">process模块介绍</h2><p>process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Process([group [, <span class="hljs-keyword">target</span> [, <span class="hljs-keyword">name</span> [, args [, kwargs]]]]])，由该类实例化得到的对<br>象，表示一个子进程中的任务（尚未启动）<br>强调：<br><span class="hljs-number">1.</span> 需要使用关键字的方式来指定参数<br><span class="hljs-number">2.</span> args指定的为传给<span class="hljs-keyword">target</span>函数的位置参数，是一个元组形式，必须有逗号<br>参数介绍：<br><span class="hljs-number">1</span> group参数未使用，值始终为<span class="hljs-keyword">None</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">target</span>表示调用对象，即子进程要执行的任务<br><span class="hljs-number">3</span> args表示调用对象的位置参数元组<br><span class="hljs-number">4</span> kwargs表示调用对象的字典<br><span class="hljs-number">5</span> <span class="hljs-keyword">name</span>为子进程的名称<br></code></pre></td></tr></table></figure><p>方法介绍</p><table><thead><tr><th>p.start()</th><th>启动进程，并调用该子进程中的p.run()</th></tr></thead><tbody><tr><td>p.run()</td><td>进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类 中一定要实现该方法</td></tr><tr><td>p.terminate()</td><td>强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就 成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那 么也将不会被释放，进而导致死锁</td></tr><tr><td>p.is_alive()</td><td>如果p仍然运行，返回True</td></tr><tr><td>p.join([timeout])</td><td>主线程等待p终止（强调：是主线程处于等的状态，而p是处于运行的状 态）。timeout是可选的超时时间，需要强调的是，p.join只能join住start开 启的进程，而不能join住run开启的进程</td></tr></tbody></table><p>属性介绍</p><table><thead><tr><th>p.daemon</th><th>默认值为False，如果设为True，代表p为后台运行的守护进程，当p的父进程终止 时，p也随之终止，并且设定为True后，p不能创建自己的新进程，必须在 p.start()之前设置</th></tr></thead><tbody><tr><td><a href="http://p.name">p.name</a></td><td>进程的名称</td></tr><tr><td>p.pid</td><td>进程的pid</td></tr><tr><td>p.exitcode</td><td>进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</td></tr><tr><td>p.authkey</td><td>进程的身份验证键,默认是由os.urandom()随机生成的32字符的字符串。这个键的 用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的 身份验证键时才能成功（了解即可）</td></tr></tbody></table><p>注意：在Windows操作系统中由于没有fork(linux操作系统中创建进程的机制)，在创建子进程的时候会 自动 import 启动它的这个文件，而在 import 的时候又执行了整个文件。因此如果将process()直接写在 文件中就会无限递归创建子进程报错。所以必须把创建子进程的部分使用 if <strong>name</strong> ==‘<strong>main</strong>’ 判断保护起来，import 的时候 ，就不会递归运行了。</p><h1>使用process模块创建进程</h1><p>在一个python进程中开启子进程，start方法和并发效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">name</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p = Process(target=f,args=(<span class="hljs-string">&#x27;aaron&#x27;</span>,))<br>p.start()<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主程序&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用join方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">name</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,name)<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p = Process(target=f,args=(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,))<br>p.start()<br>p.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主程序&#x27;</span>)<br></code></pre></td></tr></table></figure><p>查看进程号（通过进程号可以看出来哪个程序是先结束）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程id：&#x27;</span>,os.getpid(),<span class="hljs-string">&#x27;父进程id：&#x27;</span>,os.getppid())<br><span class="hljs-keyword">return</span> x*x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程id: &#x27;</span>,os.getpid())<span class="hljs-comment">#去查看进程号</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>p = Process(target=f,args=(i,))<br>p.start()<br></code></pre></td></tr></table></figure><p>进阶，多个进程同时运行（注意，子进程的执行顺序不是根据启动顺序决定的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">name</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,name)<br>time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p_lst = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>p = Process(target=f, args=(i,))<br>p.start()<br>p_lst.append(p)<br></code></pre></td></tr></table></figure><p>多进程同时运行使用join方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">name</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,name)<br>time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>p = Process(target=f, args=(i,))<br>p.start()<br>p.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还是想要借助join的同时，进程之间是异步的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">name</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,name)<br>time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p_lst = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>p = Process(target=f, args=(i,))<br>p.start()<br>p_lst.append(p)<br>[p.join() <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_lst]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程&#x27;</span>)<br></code></pre></td></tr></table></figure><p>以继承Process类的形式开启进程的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProcess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br><span class="hljs-built_in">super</span>().__init__()<br>self.name=name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(os.getpid())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 正在和女主播聊天&#x27;</span> %self.name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p1 = MyProcess(<span class="hljs-string">&#x27;陈松&#x27;</span>)<br>    p2 = MyProcess(<span class="hljs-string">&#x27;松哥&#x27;</span>)<br>    p3 = MyProcess(<span class="hljs-string">&#x27;松松&#x27;</span>)<br><br>    p1.start()<br>    p2.start()<br>    p3.start()<br><br>    p1.join()<br>    p2.join()<br>    p3.join()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程&#x27;</span>)<br></code></pre></td></tr></table></figure><h1>守护进程</h1><p>会随着主进程的结束而结束。</p><p>主进程创建守护进程</p><ol><li class="lvl-3"><p><strong>守护进程会在主进程代码执行结束后就终止</strong></p></li><li class="lvl-3"><p><strong>守护进程内无法再开启子进程,否则抛出异常</strong></p></li></ol><p>注意：进程之间是互相独立的，主进程代码运行结束，守护进程随即终止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myprocess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br><span class="hljs-built_in">super</span>().__init__()<br>self.name = name<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(os.getpid(),self.name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在和女主播聊天&#x27;</span> %self.name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p=Myprocess(<span class="hljs-string">&#x27;陈松&#x27;</span>)<br>p.daemon=<span class="hljs-literal">True</span> <span class="hljs-comment">#一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程代码执行结束,p即终止运行</span><br>p.start()<br>time.sleep(<span class="hljs-number">10</span>) <span class="hljs-comment"># 在sleep时查看进程id对应的进程</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end123&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>time.sleep(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end456&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p1=Process(target=foo)<br>p2=Process(target=bar)<br><br>p1.daemon=<span class="hljs-literal">True</span><br>p1.start()<br>p2.start()<br>time.sleep(<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main-------&quot;</span>)<br><span class="hljs-comment"># 打印该行则主进程代码结束,则守护进程p1应该被终止.#可能会有p1任务执行的打印信息123,因为主进程打印main----时,p1也执行了,但是随即被终止.</span><br></code></pre></td></tr></table></figure><h1>socket聊天并发实例</h1><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br>server=socket(AF_INET,SOCK_STREAM)<br>server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="hljs-number">1</span>)<br>server.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br>server.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">talk</span>(<span class="hljs-params">conn,client_addr</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">try</span>:<br>msg=conn.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<span class="hljs-keyword">break</span><br>conn.send(msg.upper())<br><span class="hljs-keyword">except</span> Exception:<br><span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: <span class="hljs-comment">#windows下start进程一定要写到这下面</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>conn,client_addr=server.accept()<br><span class="hljs-built_in">print</span>(client_addr)<br>p=Process(target=talk,args=(conn,client_addr))<br>p.start()<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><br>client=socket(AF_INET,SOCK_STREAM)<br>client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>msg=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>).strip()<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<span class="hljs-keyword">continue</span><br><br>client.send(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>msg=client.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="多进程中的其他方法">多进程中的其他方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myprocess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,person</span>):<br>self.name=person<br><span class="hljs-built_in">super</span>().__init__()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在和陈松聊天&#x27;</span> %self.name)<br>time.sleep(random.randrange(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s还在和陈松聊天&#x27;</span> %self.name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p1=Myprocess(<span class="hljs-string">&#x27;陈松&#x27;</span>)<br>p1.start()<br>p1.terminate() <span class="hljs-comment"># 关闭进程,不会立即关闭,所以is_alive立刻查看的结果可能还是存活</span><br><span class="hljs-built_in">print</span>(p1.is_alive()) <span class="hljs-comment"># 结果为True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始&#x27;</span>)<br>time.sleep(<span class="hljs-number">0.5</span>)<br><span class="hljs-built_in">print</span>(p1.is_alive()) <span class="hljs-comment"># 结果为False</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myprocess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,person</span>):<br>self.name=person <span class="hljs-comment"># name属性是Process中的属性，标示进程的名字</span><br><span class="hljs-built_in">super</span>().__init__() <span class="hljs-comment"># 执行父类的初始化方法会覆盖name属性</span><br><span class="hljs-comment">#self.name = person # 在这里设置就可以修改进程名字了</span><br><span class="hljs-comment">#self.person = person #如果不想覆盖进程名，就修改属性名称就可以了</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在和女主播聊天&#x27;</span> %self.name)<br><span class="hljs-comment"># print(&#x27;%s正在和网红脸聊天&#x27; %self.person)</span><br>time.sleep(random.randrange(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在和女主播聊天&#x27;</span> %self.name)<br><span class="hljs-comment"># print(&#x27;%s正在和网红脸聊天&#x27; %self.person)</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p1=Myprocess(<span class="hljs-string">&#x27;陈松&#x27;</span>)<br>p1.start()<br><span class="hljs-built_in">print</span>(p1.pid) <span class="hljs-comment">#可以查看子进程的进程id</span><br></code></pre></td></tr></table></figure><h1>进程同步(multiprocess.Lock)</h1><h2 id="锁-——-multiprocess-Lock">锁 —— multiprocess.Lock</h2><p>当多个进程使用同一份数据资源的时候，就会引发数据安全或顺序混乱问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">n</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %s is running&#x27;</span> %(n,os.getpid()))<br>time.sleep(random.random())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s:%s is done&#x27;</span> %(n,os.getpid()))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>p=Process(target=work,args=(i,))<br>p.start()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Lock<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">lock,n</span>):<br>lock.acquire()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %s is running&#x27;</span> % (n, os.getpid()))<br>time.sleep(random.random())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %s is done&#x27;</span> % (n, os.getpid()))<br>lock.release()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>lock=Lock()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>p=Process(target=work,args=(lock,i))<br>p.start()<br></code></pre></td></tr></table></figure><p>上面这种情况虽然使用加锁的形式实现了顺序的执行，但是程序又重新变成串行了，这样确实会浪费了 时间，却保证了数据的安全。</p><p>写一个抢票程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#文件db的内容为：&#123;&quot;count&quot;:1&#125;</span><br><span class="hljs-comment">#注意一定要用双引号，不然json无法识别</span><br><span class="hljs-comment">#并发运行，效率高，但竞争写同一文件，数据写入错乱</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Lock<br><span class="hljs-keyword">import</span> time,json,random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>dic=json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;db&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> %dic[<span class="hljs-string">&#x27;count&#x27;</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>():<br>dic=json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;db&#x27;</span>))<br>time.sleep(<span class="hljs-number">0.1</span>) <span class="hljs-comment">#模拟读数据的网络延迟</span><br><span class="hljs-keyword">if</span> dic[<span class="hljs-string">&#x27;count&#x27;</span>] &gt;<span class="hljs-number">0</span>:<br>dic[<span class="hljs-string">&#x27;count&#x27;</span>]-=<span class="hljs-number">1</span><br>time.sleep(<span class="hljs-number">0.2</span>) <span class="hljs-comment">#模拟写数据的网络延迟</span><br>json.dump(dic,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;db&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\033[43m购票成功\033[0m&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>search()<br>get()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>): <span class="hljs-comment">#模拟并发100个客户端抢票</span><br>p=Process(target=task)<br>p.start()<br></code></pre></td></tr></table></figure><p>用锁来保护票</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#文件db的内容为：&#123;&quot;count&quot;:1&#125;</span><br><span class="hljs-comment">#注意一定要用双引号，不然json无法识别</span><br><span class="hljs-comment">#并发运行，效率高，但竞争写同一文件，数据写入错乱</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Lock<br><span class="hljs-keyword">import</span> time,json,random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br>    dic=json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;db&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> %dic[<span class="hljs-string">&#x27;count&#x27;</span>])<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>():<br>    dic=json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;db&#x27;</span>))<br>    time.sleep(<span class="hljs-number">0.1</span>) <span class="hljs-comment">#模拟读数据的网络延迟</span><br>    <span class="hljs-keyword">if</span> dic[<span class="hljs-string">&#x27;count&#x27;</span>] &gt;<span class="hljs-number">0</span>:<br>        dic[<span class="hljs-string">&#x27;count&#x27;</span>]-=<span class="hljs-number">1</span><br>        time.sleep(<span class="hljs-number">0.2</span>) <span class="hljs-comment">#模拟写数据的网络延迟</span><br>        json.dump(dic,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;db&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\033[43m购票成功\033[0m&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\033[31m购票失败\033[0m&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">lock</span>):<br>    search()<br>    lock.acquire()<br>    get()<br>    lock.release()<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    lock = Lock()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>): <span class="hljs-comment">#模拟并发50个客户端抢票</span><br>        p=Process(target=task,args=(lock,))<br>        p.start()<br></code></pre></td></tr></table></figure><p>虽然可以用文件共享数据实现进程间通信，但问题是：</p><ol><li class="lvl-3"><p>效率低（共享数据基于文件，而文件是硬盘上的数据）</p></li><li class="lvl-3"><p>需要自己加锁处理</p></li></ol><p>队列和管道都是将数据存放于内存中</p><p>队列又是基于（管道+锁）实现的，可以让我们从复杂的锁问题中解脱出来，</p><p>我们应该尽量避免使用共享数据，尽可能使用消息传递和队列，避免处理复杂的同步和锁问题，而且在</p><p>进程数目增多时，往往可以获得更好的可获展性</p><h1>进程间通信——队列 （multiprocess.Queue）</h1><h2 id="进程间通信">进程间通信</h2><p>IPC(Inter-Process Communication)</p><p>进程之间的数据隔离问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br><span class="hljs-keyword">global</span> n<br>n = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程&#x27;</span>,n)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>n = <span class="hljs-number">100</span><br>p = Process(target=work)<br>p.start()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程&#x27;</span>,n)<br></code></pre></td></tr></table></figure><h2 id="队列">队列</h2><h3 id="概念介绍">概念介绍</h3><p>创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Queue([maxsize])<br>创建共享的进程队列。<br>参数 ：maxsize是队列中允许的最大项数。如果省略此参数，则无大小限制。<br>底层队列使用管道和锁定实现。<br></code></pre></td></tr></table></figure><p>队列方法介绍</p><ul class="lvl-0"><li class="lvl-2"><p>Queue([maxsize])</p><p>创建共享的进程队列。maxsize是队列中允许的最大项数。如果省略此参数，则无大小限制。 底层队列使用管道和锁定实现。另外，还需要运行支持线程以便队列中的数据传输到底层管道 中。</p></li><li class="lvl-2"><p>Queue的实例q具有以下方法：</p><p>q.get( [ block [ ,timeout ] ] )</p><p>返回q中的一个项目。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控 制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块 中）。timeout是可选超时时间，用在阻塞模式中。如果在制定的时间间隔内没有项目变为可 用，将引发Queue.Empty异常。</p><p>q.get_nowait( )</p><p>同q.get(False)方法。</p><p>q.put(item [, block [,timeout ] ] )</p><p>将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默 认为True。如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。 timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。</p><p>q.qsize()</p><p>返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使 用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发 NotImplementedError异常。</p><p>q.empty()</p><p>如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是 不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。</p><p>q.full()</p><p>如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考q.empty（）方 法）。。</p></li></ul><p>其他方法</p><ul class="lvl-0"><li class="lvl-2"><p>q.close()</p><p>关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写 入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会 在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（） 操作上，关闭生产者中的队列不会导致get（）方法返回错误。</p></li><li class="lvl-2"><p>q.cancel_join_thread()</p><p>不会再进程退出时自动连接后台线程。这可以防止join_thread()方法阻塞。</p></li><li class="lvl-2"><p>q.join_thread()</p><p>连接队列的后台线程。此方法用于在调用q.close()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用q.cancel_join_thread()方法可以禁止这种行为。</p></li></ul><h2 id="代码实例">代码实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br>q=Queue(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">#put ,get ,put_nowait,get_nowait,full,empty</span><br>q.put(<span class="hljs-number">1</span>)<br>q.put(<span class="hljs-number">2</span>)<br>q.put(<span class="hljs-number">3</span>)<br><span class="hljs-comment"># q.put(4) # 如果队列已经满了，程序就会停在这里，等待数据被别人取走，再将数据放入队列。</span><br>  <span class="hljs-comment"># 如果队列中的数据一直不被取走，程序就会永远停在这里。</span><br><span class="hljs-keyword">try</span>:<br>q.put_nowait(<span class="hljs-number">4</span>) <span class="hljs-comment"># 可以使用put_nowait，如果队列满了不会阻塞，但是会因为队列满了而报错。</span><br><span class="hljs-keyword">except</span>: <span class="hljs-comment"># 因此我们可以用一个try语句来处理这个错误。这样程序不会一直阻塞下去，但是会丢掉这个消息。</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;队列已经满了&#x27;</span>)<br><br><span class="hljs-comment"># 因此，我们再放入数据之前，可以先看一下队列的状态，如果已经满了，就不继续put了。</span><br><span class="hljs-built_in">print</span>(q.full()) <span class="hljs-comment">#满了</span><br><br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-built_in">print</span>(q.get())<br><span class="hljs-comment"># print(q.get()) # 同put方法一样，如果队列已经空了，那么继续取就会出现阻塞。</span><br><span class="hljs-keyword">try</span>:<br>q.get_nowait(<span class="hljs-number">3</span>) <span class="hljs-comment"># 可以使用get_nowait，如果队列满了不会阻塞，但是会因为没取到值而报错。</span><br><span class="hljs-keyword">except</span>: <span class="hljs-comment"># 因此我们可以用一个try语句来处理这个错误。这样程序不会一直阻塞下去。</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;队列已经空了&#x27;</span>)<br><span class="hljs-built_in">print</span>(q.empty()) <span class="hljs-comment">#空了</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">q</span>):<br>q.put([time.asctime(), <span class="hljs-string">&#x27;from earth&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]) <span class="hljs-comment">#调用主函数中p进程传递过来的进程参数 put函数为向队列中添加一条数据。</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = Queue() <span class="hljs-comment">#创建一个Queue对象</span><br>    p = Process(target=f, args=(q,)) <span class="hljs-comment">#创建一个进程</span><br>    p.start()<br>    <span class="hljs-built_in">print</span>(q.get())<br>    p.join()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-comment"># 向queue中输入数据的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inputQ</span>(<span class="hljs-params">queue</span>):<br>    info = <span class="hljs-built_in">str</span>(os.getpid()) + <span class="hljs-string">&#x27;(put):&#x27;</span> + <span class="hljs-built_in">str</span>(time.asctime())<br>    queue.put(info)<br>    <br><span class="hljs-comment"># 向queue中输出数据的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outputQ</span>(<span class="hljs-params">queue</span>):<br>    info = queue.get()<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;%s%s\033[32m%s\033[0m&#x27;</span>%(<span class="hljs-built_in">str</span>(os.getpid()), <span class="hljs-string">&#x27;(get):&#x27;</span>,info))<br>    <br><br><span class="hljs-comment"># Main</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    multiprocessing.freeze_support()<br>    <span class="hljs-comment"># 解决在Windows下运行有可能崩溃</span><br>    record1 = [] <span class="hljs-comment"># store input processes</span><br>    record2 = [] <span class="hljs-comment"># store output processes</span><br>    queue = multiprocessing.Queue(<span class="hljs-number">3</span>)<br>    <br><span class="hljs-comment"># 输入进程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    process = multiprocessing.Process(target=inputQ,args=(queue,))<br>    time.sleep(<span class="hljs-number">1</span>)<br>    process.start()<br>    record1.append(process)<br>    <br><span class="hljs-comment"># 输出进程</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    process = multiprocessing.Process(target=outputQ,args=(queue,))<br>    process.start()<br>    record2.append(process)<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> record1:<br>p.join()<br>    <br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> record2:<br>p.join()<br></code></pre></td></tr></table></figure><h2 id="生产者消费者模型">生产者消费者模型</h2><p>在并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线 程的工作能力来提高程序的整体处理数据的速度。</p><p><strong>为什么要使用生产者和消费者模式</strong></p><p>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生 产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数 据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问 题于是引入了生产者和消费者模式。</p><p><strong>什么是生产者消费者模式</strong></p><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直 接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞 队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生 产者和消费者的处理能力。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Queue<br><span class="hljs-keyword">import</span> time,random,os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res=q.get()<br>        time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃 %s&#x27;</span> %(os.getpid(),res))<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>res=<span class="hljs-string">&#x27;包子%s&#x27;</span> %i<br>q.put(res)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 生产了 %s&#x27;</span> %(os.getpid(),res))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>q=Queue()<br><br><span class="hljs-comment">#生产者们:即厨师们</span><br>p1=Process(target=producer,args=(q,))<br><br><span class="hljs-comment">#消费者们:即吃货们</span><br>c1=Process(target=consumer,args=(q,))<br><br><span class="hljs-comment">#开始</span><br>p1.start()<br>c1.start()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><p>消费者c在取空了q之后，则一直处于死循环中且卡在q.get()这一步。</p><p>生产者在生产完毕后，往队列中再发一个结束信号，这样消费者在接收到结束信号后就可以break出死 循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Queue<br><span class="hljs-keyword">import</span> time,random,os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res=q.get()<br>        <span class="hljs-keyword">if</span> res <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<span class="hljs-keyword">break</span> <span class="hljs-comment">#收到结束信号则结束</span><br>        time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃 %s&#x27;</span> %(os.getpid(),res))<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>res=<span class="hljs-string">&#x27;包子%s&#x27;</span> %i<br>q.put(res)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 生产了 %s&#x27;</span> %(os.getpid(),res))<br>q.put(<span class="hljs-literal">None</span>) <span class="hljs-comment">#发送结束信号</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>q=Queue()<br><span class="hljs-comment">#生产者们:即厨师们</span><br>p1=Process(target=producer,args=(q,))<br><br><span class="hljs-comment">#消费者们:即吃货们</span><br>c1=Process(target=consumer,args=(q,))<br><br><span class="hljs-comment">#开始</span><br>p1.start()<br>c1.start()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结束信号None，不一定要由生产者发，主进程里同样可以发，但主进程需要等生产者结束后才应该发送 该信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Queue<br><span class="hljs-keyword">import</span> time,random,os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res=q.get()<br>        <span class="hljs-keyword">if</span> res <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<span class="hljs-keyword">break</span> <span class="hljs-comment">#收到结束信号则结束</span><br>        time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃 %s&#x27;</span> %(os.getpid(),res))<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>res=<span class="hljs-string">&#x27;包子%s&#x27;</span> %i<br>q.put(res)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 生产了 %s&#x27;</span> %(os.getpid(),res))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>q=Queue()<br><span class="hljs-comment">#生产者们:即厨师们</span><br>p1=Process(target=producer,args=(q,))<br>    <br>    <span class="hljs-comment">#消费者们:即吃货们</span><br>    c1=Process(target=consumer,args=(q,))<br>    <br>    <span class="hljs-comment">#开始</span><br>    p1.start()<br>    c1.start()<br>    <br>    p1.join()<br>    q.put(<span class="hljs-literal">None</span>) <span class="hljs-comment">#发送结束信号</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有多个生产者和多个消费者时 有几个消费者就需要发送几次结束信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Queue<br><span class="hljs-keyword">import</span> time,random,os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res=q.get()<br>        <span class="hljs-keyword">if</span> res <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<span class="hljs-keyword">break</span> <span class="hljs-comment">#收到结束信号则结束</span><br>        time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃 %s&#x27;</span> %(os.getpid(),res))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">name,q</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        time.sleep(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>))<br>        res=<span class="hljs-string">&#x27;%s%s&#x27;</span> %(name,i)<br>        q.put(res)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 生产了 %s&#x27;</span> %(os.getpid(),res))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q=Queue()<br>    <span class="hljs-comment">#生产者们:即厨师们</span><br>    p1=Process(target=producer,args=(<span class="hljs-string">&#x27;包子&#x27;</span>,q))<br>    p2=Process(target=producer,args=(<span class="hljs-string">&#x27;骨头&#x27;</span>,q))<br>    p3=Process(target=producer,args=(<span class="hljs-string">&#x27;泔水&#x27;</span>,q))<br>    <br>    <span class="hljs-comment">#消费者们:即吃货们</span><br>    c1=Process(target=consumer,args=(q,))<br>    c2=Process(target=consumer,args=(q,))<br><br>    <span class="hljs-comment">#开始</span><br>    p1.start()<br>    p2.start()<br>    p3.start()<br>    c1.start()<br>    <span class="hljs-comment"># c2.start()</span><br>    p1.join() <span class="hljs-comment">#必须保证生产者全部生产完毕,才应该发送结束信号</span><br>    p2.join()<br>    p3.join()<br>    q.put(<span class="hljs-literal">None</span>) <span class="hljs-comment">#有几个消费者就应该发送几次结束信号None</span><br>    <span class="hljs-comment"># q.put(None) #发送结束信号</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br></code></pre></td></tr></table></figure><p>JoinableQueue([maxsize])</p><p>创建可连接的共享进程队列。这就像是一个Queue对象，但队列允许项目的使用者通知生产者项目已经 被成功处理。通知进程是使用共享的信号和条件变量来实现的。</p><ul class="lvl-0"><li class="lvl-2"><p>q.task_done()</p><pre><code class="hljs">  使用者使用此方法发出信号，表示q.get()返回的项目已经被处理。如果调用此方法的次数大于从队 列中删除的项目数量，将引发ValueError异常。</code></pre></li><li class="lvl-2"><p>q.join()</p><pre><code class="hljs">  生产者将使用此方法进行阻塞，直到队列中所有项目均被处理。阻塞将持续到为队列中的每个项目 均调用q.task_done()方法为止。</code></pre></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, JoinableQueue<br><span class="hljs-keyword">import</span> time, random, os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>res = q.get()<br>time.sleep(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃 %s&#x27;</span> % (os.getpid(), res))<br>q.task_done() <span class="hljs-comment"># 向q.join()发送一次信号,证明一个数据已经被取走了</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>(<span class="hljs-params">name, q</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>time.sleep(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>res = <span class="hljs-string">&#x27;%s%s&#x27;</span> % (name, i)<br>q.put(res)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 生产了 %s&#x27;</span> % (os.getpid(), res))<br>q.join() <span class="hljs-comment"># 生产完毕，使用此方法进行阻塞，直到队列中所有项目均被处理。</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = JoinableQueue()<br>    <span class="hljs-comment"># 生产者们:即厨师们</span><br>    p1 = Process(target=producer, args=(<span class="hljs-string">&#x27;包子&#x27;</span>, q))<br>    p2 = Process(target=producer, args=(<span class="hljs-string">&#x27;骨头&#x27;</span>, q))<br>    p3 = Process(target=producer, args=(<span class="hljs-string">&#x27;泔水&#x27;</span>, q))<br>    <br>    <span class="hljs-comment"># 消费者们:即吃货们</span><br>    c1 = Process(target=consumer, args=(q,))<br>    c2 = Process(target=consumer, args=(q,))<br>    c1.daemon = <span class="hljs-literal">True</span><br>    c2.daemon = <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-comment"># 开始</span><br>    p_l = [p1, p2, p3, c1, c2]<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_l:<br>p.start()<br><br>    p1.join()<br>    p2.join()<br>    p3.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主&#x27;</span>)<br><br><span class="hljs-comment"># 主进程等---&gt;p1,p2,p3等----&gt;c1,c2</span><br><span class="hljs-comment"># p1,p2,p3结束了,证明c1,c2肯定全都收完了p1,p2,p3发到队列的数据</span><br><span class="hljs-comment"># 因而c1,c2也没有存在的价值了,不需要继续阻塞在进程中影响主进程了。应该随着主进程的结束而结束,所以设置成守护进程就可以了。</span><br></code></pre></td></tr></table></figure><h1>进程之间的数据共享</h1><p>但进程间应该尽量避免通信，即便需要通信，也应该选择进程安全的工具来避免加锁带来的问题。</p><p>以后我们会尝试使用数据库来解决现在进程之间的数据共享问题</p><p>进程间数据是独立的，可以借助于队列或管道实现通信，二者都是基于消息传递的</p><p>虽然进程间数据独立，但可以通过Manager实现数据共享，事实上Manager的功能远不止于此</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Manager,Process,Lock<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">d,lock</span>):<br><br><span class="hljs-keyword">with</span> lock: <span class="hljs-comment">#不加锁而操作共享的数据,肯定会出现数据错乱</span><br>d[<span class="hljs-string">&#x27;count&#x27;</span>]-=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>lock=Lock()<br><span class="hljs-keyword">with</span> Manager() <span class="hljs-keyword">as</span> m:<br>dic=m.<span class="hljs-built_in">dict</span>(&#123;<span class="hljs-string">&#x27;count&#x27;</span>:<span class="hljs-number">10</span>&#125;)<br>p_l=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>p=Process(target=work,args=(dic,lock))<br>p_l.append(p)<br>p.start()<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_l:<br>p.join()<br><span class="hljs-built_in">print</span>(dic)<br></code></pre></td></tr></table></figure><h1>进程池和multiprocess.Pool模块</h1><h2 id="进程池">进程池</h2><p>那么在成千上万个任务需要被执行的时候，我们就需要去创建成千上万个进程么？首先，创建进程需要 消耗时间，销毁进程也需要消耗时间。第二即便开启了成千上万的进程，操作系统也不能让他们同时执 行，这样反而会影响程序的效率。因此我们不能无限制的根据任务开启或者结束进程。</p><p>定义一个池子，在里面放上固定数量的进程，有需求来了，就拿一个池中的进程来处理任务，等到处理 完毕，进程并不关闭，而是将进程再放回进程池中继续等待任务。如果有很多任务需要执行，池中的进 程数量不够，任务就要等待之前的进程执行任务完毕归来，拿到空闲进程才能继续执行。也就是说，池 中进程的数量是固定的，那么同一时间最多有固定数量的进程在运行。这样不会增加操作系统的调度难 度，还节省了开闭进程的时间，也一定程度上能够实现并发效果。</p><h2 id="multiprocess-Pool模块">multiprocess.Pool模块</h2><h3 id="概念介绍-2">概念介绍</h3><p><code>Pool([numprocess [,initializer [, initargs]]]):创建进程池</code></p><p>numprocess:要创建的进程数，如果省略，将默认使用cpu_count()的值</p><p>initializer：是每个工作进程启动时要执行的可调用对象，默认为None</p><p>initargs：是要传给initializer的参数组</p><p><strong>方法介绍</strong></p><p>p.apply(func [, args [, kwargs]]):在一个池工作进程中执行func(*args,**kwargs),然后返回结果。</p><p>‘’‘需要强调的是：此操作并不会在所有池工作进程中并执行func函数。如果要通过不同参数并发地执行 func函数，必须从不同线程调用p.apply()函数或者使用p.apply_async()’‘’</p><p>p.apply_async(func [, args [, kwargs]]):在一个池工作进程中执行func(*args,**kwargs),然后返回结果。</p><p>‘’‘此方法的结果是AsyncResult类的实例，callback是可调用对象，接收输入参数。当func的结果变为可 用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。’‘’</p><p>p.close():关闭进程池，防止进一步操作。如果所有操作持续挂起，它们将在工作进程终止前完成 P.join():等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</p><p><strong>其他方法</strong></p><p>方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法</p><p>obj.get():返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达</p><p>将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。</p><p>obj.ready():如果调用完成，返回True</p><p>obj.successful():如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常</p><p>obj.wait([timeout]):等待结果变为可用。</p><p>obj.terminate()：立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回 收，将自动调用此函数</p><h2 id="代码实例-2">代码实例</h2><p><strong>进程池和多进程效率对比</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>): <span class="hljs-comment"># 同样将1到100，每个数打印十次</span><br><span class="hljs-built_in">print</span>(n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>t1 = time.time()<br>p_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>p = Process(target=func, args=(i,))<br>p_list.append(p)<br>p.start()<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_list:<br>p.join()<br>t2 = (time.time() - t1)<br><span class="hljs-built_in">print</span>(t2)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>): <span class="hljs-comment"># 将1到100，每个数打印十次</span><br><span class="hljs-built_in">print</span>(n +<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start = time.time()<br>    pool = Pool(<span class="hljs-number">5</span>)<br>    pool.<span class="hljs-built_in">map</span>(func, <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)) <span class="hljs-comment"># 一百个任务</span><br>    t2 = (time.time() - start)<br>    <span class="hljs-built_in">print</span>(t2)<br></code></pre></td></tr></table></figure><p><strong>同步和异步</strong></p><p>同步调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os,time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s run&#x27;</span> %os.getpid())<br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> n**<span class="hljs-number">2</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#进程池中从无到有创建三个进程,以后一直是这三个进程在执行任务</span><br>    p=Pool(<span class="hljs-number">3</span>)<br>    res_l=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-comment"># 同步调用，直到本次任务执行完毕拿到res，等待任务work执行的过程中可能有阻塞也可能没有阻塞</span><br>res=p.apply(work,args=(i,))<br><span class="hljs-comment"># 但不管该任务是否存在阻塞，同步调用都会在原地等着</span><br><span class="hljs-built_in">print</span>(res_l)<br></code></pre></td></tr></table></figure><p>异步调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s run&#x27;</span> %os.getpid())<br>    time.sleep(random.random())<br>    <span class="hljs-keyword">return</span> n**<span class="hljs-number">2</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p=Pool(<span class="hljs-number">3</span>) <span class="hljs-comment">#进程池中从无到有创建三个进程,以后一直是这三个进程在执行任务</span><br>    res_l=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>res=p.apply_async(work,args=(i,)) <span class="hljs-comment"># 异步运行，根据进程池中有的进程数，每次最多3个子进程在异步执行</span><br><span class="hljs-comment"># 返回结果之后，将结果放入列表，归还进程，之后再执行新的任务</span><br><span class="hljs-comment"># 需要注意的是，进程池中的三个进程不会同时开启或者同时结束</span><br><span class="hljs-comment"># 而是执行完一个就释放一个进程，这个进程就去接收新的任务。</span><br>res_l.append(res)<br><span class="hljs-comment"># 异步apply_async用法：如果使用异步提交的任务，主进程需要使用join，等待进程池内任务都处理完，然后可以用get收集结果</span><br><span class="hljs-comment"># 否则，主进程结束，进程池可能还没来得及执行，也就跟着一起结束了</span><br>    p.close()<br>    p.join()<br>    <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> res_l:<br>    <span class="hljs-built_in">print</span>(res.get()) <span class="hljs-comment">#使用get来获取apply_aync的结果,如果是apply,则没有get方法,因为apply是同步执行,立刻获取结果,也根本无需get</span><br></code></pre></td></tr></table></figure><p>进程池聊天</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Pool内的进程数默认是cpu核数，假设为4（查看方法os.cpu_count()）</span><br><span class="hljs-comment">#开启6个客户端，会发现2个客户端处于等待状态</span><br><span class="hljs-comment">#在每个进程内查看pid，会发现pid使用为4个，即多个客户端公用4个进程</span><br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> os<br><br>server=socket(AF_INET,SOCK_STREAM)<br>server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="hljs-number">1</span>)<br>server.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br>server.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">talk</span>(<span class="hljs-params">conn</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;进程pid: %s&#x27;</span> %os.getpid())<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">try</span>:<br>            msg=conn.recv(<span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<span class="hljs-keyword">break</span><br>            conn.send(msg.upper())<br>        <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>p=Pool(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        conn,addr=server.accept()<br>        p.apply_async(talk,args=(conn,))<br>        <span class="hljs-comment">#p.apply(talk,args=(conn,)) # 同步的话，则同一时间只有一个客户端能访问</span><br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><br>client=socket(AF_INET,SOCK_STREAM)<br>client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    msg=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>).strip()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<span class="hljs-keyword">continue</span><br><br>    client.send(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    msg=client.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>并发开启多个客户端，服务端同一时间只有4个不同的pid，只能结束一个客户端，另外一个客户端才会 进来.</p><p><strong>回调函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">需要回调函数的场景：进程池中任何一个任务一旦处理完了，就立即告知主进程：我好了额，你可以处理<br>我的结果了。主进程则调用一个函数去处理该结果，该函数即回调函数<br><br>我们可以把耗时间（阻塞）的任务放到进程池中，然后指定回调函数（主进程负责执行），这样主进程在<br>执行回调函数时就省去了I/O的过程，直接拿到的是任务的结果。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&lt;进程%s&gt; get %s&#x27;</span> %(os.getpid(),url))<br>    respone=requests.get(url)<br>    <span class="hljs-keyword">if</span> respone.status_code == <span class="hljs-number">200</span>:<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;url&#x27;</span>:url,<span class="hljs-string">&#x27;text&#x27;</span>:respone.text&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pasrse_page</span>(<span class="hljs-params">res</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&lt;进程%s&gt; parse %s&#x27;</span> %(os.getpid(),res[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>    parse_res=<span class="hljs-string">&#x27;url:&lt;%s&gt; size:[%s]\n&#x27;</span> %(res[<span class="hljs-string">&#x27;url&#x27;</span>],<span class="hljs-built_in">len</span>(res[<span class="hljs-string">&#x27;text&#x27;</span>]))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;db.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(parse_res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>urls=[<br>        <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.python.org&#x27;</span>,<br>        <span class="hljs-string">&#x27;https://www.openstack.org&#x27;</span>,<br>        <span class="hljs-string">&#x27;http://www.sina.com.cn/&#x27;</span><br>]<br><br>    p=Pool(<span class="hljs-number">3</span>)<br>    res_l=[]<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        res=p.apply_async(get_page,args=(url,),callback=pasrse_page)<br>        res_l.append(res)<br>    p.close()<br>p.join()<br><span class="hljs-built_in">print</span>([res.get()[<span class="hljs-string">&#x27;url&#x27;</span>] <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> res_l]) <span class="hljs-comment">#拿到的是get_page的结果,其实完全没必要拿该结果,该结果已经传给回调函数处理了</span><br></code></pre></td></tr></table></figure><p>爬虫实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page</span>(<span class="hljs-params">url,pattern</span>):<br>    response=urlopen(url).read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> pattern,response<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_page</span>(<span class="hljs-params">info</span>):<br>    pattern,page_content=info<br>    res=re.findall(pattern,page_content)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> res:<br>dic=&#123;<br>            <span class="hljs-string">&#x27;index&#x27;</span>:item[<span class="hljs-number">0</span>].strip(),<br>            <span class="hljs-string">&#x27;title&#x27;</span>:item[<span class="hljs-number">1</span>].strip(),<br>            <span class="hljs-string">&#x27;actor&#x27;</span>:item[<span class="hljs-number">2</span>].strip(),<br>            <span class="hljs-string">&#x27;time&#x27;</span>:item[<span class="hljs-number">3</span>].strip(),<br>        &#125;<br><span class="hljs-built_in">print</span>(dic)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>regex = <span class="hljs-string">r&#x27;&lt;dd&gt;.*?&lt;.*?class=&quot;board-index.*?&gt;(\d+)&lt;/i&gt;.*?title=&quot;(.*?)&quot;.*?</span><br><span class="hljs-string">class=&quot;movie-item-info&quot;.*?&lt;p class=&quot;star&quot;&gt;(.*?)&lt;/p&gt;.*?&lt;p</span><br><span class="hljs-string">class=&quot;releasetime&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span><br>pattern1=re.<span class="hljs-built_in">compile</span>(regex,re.S)<br><br>url_dic=&#123;<br><span class="hljs-string">&#x27;http://maoyan.com/board/7&#x27;</span>:pattern1,<br>&#125;<br><br>    p=Pool()<br>    res_l=[]<br>    <span class="hljs-keyword">for</span> url,pattern <span class="hljs-keyword">in</span> url_dic.items():<br>        res=p.apply_async(get_page,args=(url,pattern),callback=parse_page)<br>        res_l.append(res)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res_l:<br>i.get()<br></code></pre></td></tr></table></figure><p>如果在主进程中等待进程池中所有任务都执行完毕后，再统一处理结果，则无需回调函数</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的套接字</title>
    <link href="/20221001/Python%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    <url>/20221001/Python%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1>套接字的工作流程（基于TCP和 UDP两个协议）</h1><h2 id="TCP和UDP对比">TCP和UDP对比</h2><ul class="lvl-0"><li class="lvl-2"><p>TCP（Transmission Control Protocol）</p><ul class="lvl-2"><li class="lvl-4">可靠的、面向连接的协议（eg:打电话）、传输效率低全双工通信（发送缓存&amp;接收缓存）、 面向字节流。使用TCP的应用：Web浏览器；文件传输程序。</li></ul></li><li class="lvl-2"><p>UDP（User Datagram Protocol）</p><ul class="lvl-2"><li class="lvl-4">不可靠的、无连接的服务，传输效率高（发送前时延小），一对一、一对多、多对一、多对 多、面向报文(数据包)，尽最大努力服务，无拥塞控制。使用UDP的应用：域名系统 (DNS)； 视频流；IP语音(VoIP)。</li></ul></li></ul><h2 id="TCP协议下的socket">TCP协议下的socket</h2><p><img src="image-20220712140039302.png" alt="TCP过程示意图"></p><p>服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客 户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时 客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应 数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-comment"># 初始化格式如下</span><br>socket.socket(socket_family,socket_type,protocal=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># socket_family 可以是 AF_UNIX 或 AF_INET。socket_type 可以是 SOCK_STREAM 或</span><br>SOCK_DGRAM。protocol 一般不填,默认值为 <span class="hljs-number">0</span>。<br><span class="hljs-comment"># 获取tcp/ip套接字</span><br>tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><span class="hljs-comment"># 获取udp/ip套接字</span><br>udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br><span class="hljs-comment"># 由于 socket 模块中有太多的属性。我们在这里破例使用了&#x27;from module import *&#x27;语句。使</span><br>用 <span class="hljs-string">&#x27;from socket import *&#x27;</span>,我们就把 socket 模块里的所有属性都带到我们的命名空间里了,这<br>样能 大幅减短我们的代码。<br><span class="hljs-comment"># 例如</span><br>tcpSock = socket(AF_INET, SOCK_STREAM)<br></code></pre></td></tr></table></figure><p><strong>服务端</strong>套接字函数</p><table><thead><tr><th>s.bind()</th><th>绑定(主机,端口号)到套接字</th></tr></thead><tbody><tr><td>s.listen()</td><td>开始TCP监听</td></tr><tr><td>s.accept()</td><td>被动接受TCP客户的连接,(阻塞式)等待连接的到来</td></tr></tbody></table><p><strong>客户端</strong>套接字函数</p><table><thead><tr><th>s.connect()</th><th>s.connect_ex()</th></tr></thead><tbody><tr><td>s.connect_ex()</td><td>connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td></tr></tbody></table><p>公共用途的套接字函数</p><table><thead><tr><th>s.recv()</th><th>接收TCP数据</th></tr></thead><tbody><tr><td>s.send()</td><td>发送TCP数据(send在待发送数据量大于己端缓存区剩余空间时,数据丢失,不 会发完)</td></tr><tr><td>s.sendall()</td><td>发送完整的TCP数据(本质就是循环调用send,sendall在待发送数据量大于己 端缓存区剩余空间时,数据不丢失,循环调用send直到发完)</td></tr><tr><td>s.recvfrom()</td><td>接收UDP数据</td></tr><tr><td>s.sendto()</td><td>发送UDP数据</td></tr><tr><td>s.getpeername()</td><td>连接到当前套接字的远端的地址</td></tr><tr><td>s.getsockname()</td><td>当前套接字的地址</td></tr><tr><td>s.getsockopt()</td><td>返回指定套接字的参数</td></tr><tr><td>s.setsockopt()</td><td>设置指定套接字的参数</td></tr><tr><td>s.close()</td><td>关闭套接字</td></tr></tbody></table><p>面向锁的套接字方法</p><table><thead><tr><th>s.setblocking()</th><th>设置套接字的阻塞与非阻塞模式</th></tr></thead><tbody><tr><td>s.settimeout()</td><td>设置阻塞套接字操作的超时时间</td></tr><tr><td>s.gettimeout()</td><td>得到阻塞套接字操作的超时时间</td></tr></tbody></table><p>面向文件的套接字的函数</p><table><thead><tr><th>s.fileno()</th><th>套接字的文件描述符</th></tr></thead><tbody><tr><td>s.makefile()</td><td>创建一个与该套接字相关的文件</td></tr></tbody></table><p>第一版，单个客户端与服务端通信</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="hljs-comment"># 买电话</span><br><br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>)) <span class="hljs-comment"># 0 ~ 65535 1024之前系统分配好的端口 绑定电话卡</span><br><br>phone.listen(<span class="hljs-number">5</span>) <span class="hljs-comment"># 同一时刻有5个请求，但是可以有N多个链接。 开机。</span><br><br><br>conn, client_addr = phone.accept() <span class="hljs-comment"># 接电话</span><br><span class="hljs-built_in">print</span>(conn, client_addr, sep=<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>from_client_data = conn.recv(<span class="hljs-number">1024</span>) <span class="hljs-comment"># 一次接收的最大限制 bytes</span><br><span class="hljs-built_in">print</span>(from_client_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>conn.send(from_client_data.upper())<br><br>conn.close() <span class="hljs-comment"># 挂电话</span><br><br>phone.close() <span class="hljs-comment"># 关机</span><br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="hljs-comment"># 买电话</span><br><br>phone.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>)) <span class="hljs-comment"># 与客户端建立连接， 拨号</span><br><br>phone.send(<span class="hljs-string">&#x27;hello&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>from_server_data = phone.recv(<span class="hljs-number">1024</span>)<br><br><span class="hljs-built_in">print</span>(from_server_data)<br><br>phone.close() <span class="hljs-comment"># 挂电话</span><br></code></pre></td></tr></table></figure><p>第二版，通信循环</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br>phone.listen(<span class="hljs-number">5</span>)<br><br>conn,client_addr = phone.accept()<br><span class="hljs-built_in">print</span>(conn,client_addr,sep=<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">try</span>:<br>from_client_data = conn.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(from_client_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>conn.send(from_client_data.upper())<br><span class="hljs-keyword">except</span> ConnectionResetError:<br><span class="hljs-keyword">break</span><br><br>conn.close()<br>phone.close()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>phone.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    client_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>)<br>    phone.send(client_data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <br>    from_server_data = phone.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(from_server_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <br>phone.close()<br></code></pre></td></tr></table></figure><p>第三版， 通信，连接循环</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br><br>phone.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    conn,client_addr = phone.accept()<br>    <span class="hljs-built_in">print</span>(conn,client_addr,sep=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">try</span>:<br>from_client_data = conn.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> from_client_data:<br><span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(from_client_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>conn.send(from_client_data.upper())<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">break</span><br><br>conn.close()<br>phone.close()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>phone.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    client_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt; &#x27;</span>)<br>    phone.send(client_data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">if</span> client_data == <span class="hljs-string">&#x27;q&#x27;</span>:<span class="hljs-keyword">break</span><br>    <br>    from_server_data = phone.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(from_server_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <br>phone.close()<br></code></pre></td></tr></table></figure><p>远程执行命令的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br>phone.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>: <span class="hljs-comment"># 循环连接客户端</span><br>    conn, client_addr = phone.accept()<br>    <span class="hljs-built_in">print</span>(client_addr)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">try</span>:<br>            cmd = conn.recv(<span class="hljs-number">1024</span>)<br>            ret = subprocess.Popen(cmd.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), shell=<span class="hljs-literal">True</span>,<br>stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>            correct_msg = ret.stdout.read()<br>            error_msg = ret.stderr.read()<br>            conn.send(correct_msg + error_msg)<br><span class="hljs-keyword">except</span> ConnectionResetError:<br><span class="hljs-keyword">break</span><br><br>conn.close()<br>phone.close()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-comment"># 买电话</span><br><br>phone.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>)) <span class="hljs-comment"># 与客户端建立连接， 拨号</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br>phone.send(cmd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>from_server_data = phone.recv(<span class="hljs-number">1024</span>)<br><br><span class="hljs-built_in">print</span>(from_server_data.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>))<br><br>phone.close() <span class="hljs-comment"># 挂电话</span><br></code></pre></td></tr></table></figure><h1>UDP协议下的socket</h1><p>udp是无链接的，先启动哪一端都不会报错</p><p><img src="image-20220712141427062.png" alt="UDP的过程示意图"></p><p>服务器端先初始化Socket，然后与端口绑定(bind)，recvform接收消息，这个消息有两项，消息内容和 对方客户端的地址，然后回复消息时也要带着你收到的这个客户端的地址，发送回去，最后关闭连接， 一次交互结束</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>udp_sk = socket.socket(<span class="hljs-built_in">type</span>=socket.SOCK_DGRAM) <span class="hljs-comment">#创建一个服务器的套接字</span><br>udp_sk.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9000</span>)) <span class="hljs-comment">#绑定服务器套接字</span><br>msg,addr = udp_sk.recvfrom(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(msg)<br>udp_sk.sendto(<span class="hljs-string">b&#x27;hi&#x27;</span>,addr) <span class="hljs-comment"># 对话(接收与发送)</span><br>udp_sk.close() <span class="hljs-comment"># 关闭服务器套接字</span><br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>ip_port=(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9000</span>)<br>udp_sk=socket.socket(<span class="hljs-built_in">type</span>=socket.SOCK_DGRAM)<br>udp_sk.sendto(<span class="hljs-string">b&#x27;hello&#x27;</span>,ip_port)<br>back_msg,addr=udp_sk.recvfrom(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(back_msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),addr)<br></code></pre></td></tr></table></figure><p>类似于qq聊天的代码示例</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>ip_port=(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8081</span>)<br>udp_server_sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)<br><span class="hljs-comment">#DGRAM:datagram 数据报文的意思，象征着UDP协议的通信方式</span><br>udp_server_sock.bind(ip_port)<span class="hljs-comment">#你对外提供服务的端口就是这一个，所有的客户端都是通过这个端口和你进行通信的</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    qq_msg,addr=udp_server_sock.recvfrom(<span class="hljs-number">1024</span>)<span class="hljs-comment"># 阻塞状态，等待接收消息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;来自[%s:%s]的一条消息:\033[1;34;43m%s\033[0m&#x27;</span> %(addr[<span class="hljs-number">0</span>],addr[<span class="hljs-number">1</span>],qq_msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br>back_msg=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;回复消息: &#x27;</span>).strip()<br><br>udp_server_sock.sendto(back_msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),addr)<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>BUFSIZE=<span class="hljs-number">1024</span><br>udp_client_socket=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)<br><br>qq_name_dic=&#123;<br>    <span class="hljs-string">&#x27;taibai&#x27;</span>:(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8081</span>),<br>    <span class="hljs-string">&#x27;Jedan&#x27;</span>:(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8081</span>),<br>    <span class="hljs-string">&#x27;Jack&#x27;</span>:(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8081</span>),<br>    <span class="hljs-string">&#x27;John&#x27;</span>:(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8081</span>),<br>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 选择聊天对象</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        qq_name=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请选择聊天对象: &#x27;</span>).strip()<br>        <span class="hljs-keyword">if</span> qq_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> qq_name_dic:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没有这个聊天对象&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">break</span><br>        <br><span class="hljs-comment"># 聊天过程</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>msg=<span class="hljs-string">&#x27;发给&#x27;</span>+ qq_name + <span class="hljs-string">&#x27;: &#x27;</span> + <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入消息,回车发送,输入q结束和他的聊天: &#x27;</span>).strip()<br><span class="hljs-keyword">if</span> msg == <span class="hljs-string">&#x27;q&#x27;</span>:<span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<span class="hljs-keyword">continue</span><br>udp_client_socket.sendto(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),qq_name_dic[qq_name])<span class="hljs-comment">#必须带着自己的地址，这就是UDP不一样的地方，不需要建立连接，但是要带着自己的地址给服务端，否则服务端无法判断是谁给我发的消息，并且不知道该把消息回复到什么地方，因为我们之间没有建立连接通道</span><br><br>        back_msg,addr=udp_client_socket.recvfrom(BUFSIZE)<span class="hljs-comment"># 同样也是阻塞状态，等待接收消息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;来自[%s:%s]的一条消息:\033[1;34;43m%s\033[0m&#x27;</span> %(addr[<span class="hljs-number">0</span>],addr[<span class="hljs-number">1</span>],back_msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br>        <br>udp_client_socket.close()<br></code></pre></td></tr></table></figure><p>自制时间服务器</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> strftime<br><span class="hljs-keyword">import</span> time<br>ip_port = (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">9000</span>)<br>bufsize = <span class="hljs-number">1024</span><br><br>tcp_server = socket(AF_INET, SOCK_DGRAM)<br>tcp_server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="hljs-number">1</span>)<br>tcp_server.bind(ip_port)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    msg, addr = tcp_server.recvfrom(bufsize)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;===&gt;&#x27;</span>, msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    stru_time = time.localtime() <span class="hljs-comment">#当前的结构化时间</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<br>    time_fmt = <span class="hljs-string">&#x27;%Y-%m-%d %X&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>    time_fmt = msg.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    back_msg = strftime(time_fmt,stru_time)<br>    <span class="hljs-built_in">print</span>(back_msg,<span class="hljs-built_in">type</span>(back_msg))<br>    tcp_server.sendto(back_msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), addr)<br>tcp_server.close()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br>ip_port=(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">9000</span>)<br>bufsize=<span class="hljs-number">1024</span><br><br>tcp_client=socket(AF_INET,SOCK_DGRAM)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    msg=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入时间格式(例%Y %m %d)&gt;&gt;: &#x27;</span>).strip()<br>    tcp_client.sendto(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>),ip_port)<br>    <br>    data=tcp_client.recv(bufsize)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前日期：&#x27;</span>,<span class="hljs-built_in">str</span>(data,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><h1>粘包</h1><p><img src="image-20220712142023973.png" alt="粘包过程图"></p><p>每个 socket 被创建后，都会分配两个缓冲区，输入缓冲区和输出缓冲区。</p><p>write()/send() 并不立即向网络中传输数据，而是先将数据写入缓冲区中，再由TCP协议将数据从缓冲区 发送到目标机器。一旦将数据写入到缓冲区，函数就可以成功返回，不管它们有没有到达目标机器，也 不管它们何时被发送到网络，这些都是TCP协议负责的事情。</p><p>TCP协议独立于 write()/send() 函数，数据有可能刚被写入缓冲区就发送到网络，也可能在缓冲区中不断 积压，多次写入的数据被一次性发送到网络，这取决于当时的网络情况、当前线程是否空闲等诸多因 素，不由程序员控制。</p><p>read()/recv() 函数也是如此，也从输入缓冲区中读取数据，而不是直接从网络中读取。</p><p>这些I/O缓冲区特性可整理如下：</p><ol><li class="lvl-3"><p>I/O缓冲区在每个TCP套接字中单独存在；</p></li><li class="lvl-3"><p>I/O缓冲区在创建套接字时自动生成；</p></li><li class="lvl-3"><p>即使关闭套接字也会继续传送输出缓冲区中遗留的数据；</p></li><li class="lvl-3"><p>关闭套接字将丢失输入缓冲区中的数据。</p></li></ol><h2 id="两种情况下会发生粘包">两种情况下会发生粘包</h2><ol><li class="lvl-3"><p>接收方没有及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部 分，服务端下次再收的时候还是从缓冲区拿上次遗留的数据，产生粘包）</p></li></ol><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br>phone.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>: <span class="hljs-comment"># 循环连接客户端</span><br>    conn, client_addr = phone.accept()<br>    <span class="hljs-built_in">print</span>(client_addr)<br>    <br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">try</span>:<br>cmd = conn.recv(<span class="hljs-number">1024</span>)<br>ret = subprocess.Popen(cmd.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), shell=<span class="hljs-literal">True</span>,stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>            correct_msg = ret.stdout.read()<br>            error_msg = ret.stderr.read()<br>            conn.send(correct_msg + error_msg)<br><span class="hljs-keyword">except</span> ConnectionResetError:<br><span class="hljs-keyword">break</span><br><br>conn.close()<br>phone.close()<br></code></pre></td></tr></table></figure><p>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据也很小，会合到一 起，产生粘包）</p><p>服务端</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> socket<br><br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br>phone.listen(<span class="hljs-number">5</span>)<br><br>conn, client_addr = phone.accept()<br><br>frist_data = conn.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1:&#x27;</span>,frist_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-comment"># 1: helloworld</span><br>second_data = conn.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;2:&#x27;</span>,second_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br>conn.close()<br>phone.close()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br>phone.send(<span class="hljs-string">b&#x27;hello&#x27;</span>)<br>phone.send(<span class="hljs-string">b&#x27;world&#x27;</span>)<br><br>phone.close()<br></code></pre></td></tr></table></figure><h1>粘包的解决方案</h1><h2 id="struct模块">struct模块</h2><p>该模块可以把一个类型，如数字，转成固定长度的bytes</p><p><img src="image-20220712142819170.png" alt="Struct转换对应图"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> struct<br><span class="hljs-comment"># 将一个数字转化成等长度的bytes类型。</span><br>ret = struct.pack(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">183346</span>)<br><span class="hljs-built_in">print</span>(ret, <span class="hljs-built_in">type</span>(ret), <span class="hljs-built_in">len</span>(ret))<br><br><span class="hljs-comment"># 通过unpack反解回来</span><br>ret1 = struct.unpack(<span class="hljs-string">&#x27;i&#x27;</span>,ret)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(ret1, <span class="hljs-built_in">type</span>(ret1), <span class="hljs-built_in">len</span>(ret1))<br><br><span class="hljs-comment"># 但是通过struct 处理不能处理太大</span><br></code></pre></td></tr></table></figure><p>方案一:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> struct<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br>phone.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    conn, client_addr = phone.accept()<br>    <span class="hljs-built_in">print</span>(client_addr)<br>    <br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">try</span>:<br>        cmd = conn.recv(<span class="hljs-number">1024</span>)<br>        ret = subprocess.Popen(cmd.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), shell=<span class="hljs-literal">True</span>,stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>        correct_msg = ret.stdout.read()<br>        error_msg = ret.stderr.read()<br><br><span class="hljs-comment"># 1 制作固定报头</span><br>        total_size = <span class="hljs-built_in">len</span>(correct_msg) + <span class="hljs-built_in">len</span>(error_msg)<br>        header = struct.pack(<span class="hljs-string">&#x27;i&#x27;</span>, total_size)<br><br><span class="hljs-comment"># 2 发送报头</span><br>conn.send(header)<br><br>        <span class="hljs-comment"># 发送真实数据：</span><br>        conn.send(correct_msg)<br>        conn.send(error_msg)<br>     <span class="hljs-keyword">except</span> ConnectionResetError:<br>        <span class="hljs-keyword">break</span><br>        <br>conn.close()<br>phone.close()<br><br><span class="hljs-comment"># 但是low版本有问题：</span><br><span class="hljs-comment"># 1，报头不只有总数据大小，而是还应该有MD5数据，文件名等等一些数据。</span><br><span class="hljs-comment"># 2，通过struct模块直接数据处理，不能处理太大。</span><br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cmd: <span class="hljs-keyword">continue</span><br>    phone.send(cmd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <br><span class="hljs-comment"># 1，接收固定报头</span><br>header = phone.recv(<span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># 2，解析报头</span><br>total_size = struct.unpack(<span class="hljs-string">&#x27;i&#x27;</span>, header)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 3，根据报头信息，接收真实数据</span><br>recv_size = <span class="hljs-number">0</span><br>res = <span class="hljs-string">b&#x27;&#x27;</span><br><br><span class="hljs-keyword">while</span> recv_size &lt; total_size:<br>recv_data = phone.recv(<span class="hljs-number">1024</span>)<br>res += recv_data<br>recv_size += <span class="hljs-built_in">len</span>(recv_data)<br><br><span class="hljs-built_in">print</span>(res.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>))<br><br>phone.close()<br></code></pre></td></tr></table></figure><p>方案二：可自定制报头</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino">整个流程的大致解释：<br>我们可以把报头做成字典，字典里包含将要发送的真实数据的描述信息(大小啊之类的)，然后json序列<br>化，然后用struck将序列化后的数据长度打包成<span class="hljs-number">4</span>个字节。<br>我们在网络上传输的所有数据 都叫做数据包，数据包里的所有数据都叫做报文，报文里面不止有你的数<br>据，还有ip地址、mac地址、端口号等等，其实所有的报文都有报头，这个报头是协议规定的，看一下<br><br>发送时：<br>先发报头长度<br>再编码报头内容然后发送<br>最后发真实内容<br><br>接收时：<br>先手报头长度，用<span class="hljs-keyword">struct</span>取出来<br>根据取出的长度收取报头内容，然后解码，反序列化<br>从反序列化的结果中取出待取数据的描述信息，然后去取真实的数据内容<br></code></pre></td></tr></table></figure><p>服务端</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> json<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br>phone.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    conn, client_addr = phone.accept()<br>    <span class="hljs-built_in">print</span>(client_addr)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">try</span>:<br>cmd = conn.recv(<span class="hljs-number">1024</span>)<br>ret = subprocess.Popen(cmd.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), shell=<span class="hljs-literal">True</span>,stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>correct_msg = ret.stdout.read()<br>error_msg = ret.stderr.read()<br><br>             <span class="hljs-comment"># 1 制作固定报头</span><br>             total_size = <span class="hljs-built_in">len</span>(correct_msg) + <span class="hljs-built_in">len</span>(error_msg)<br><br>header_dict = &#123;<br>                <span class="hljs-string">&#x27;md5&#x27;</span>: <span class="hljs-string">&#x27;fdsaf2143254f&#x27;</span>,<br>                <span class="hljs-string">&#x27;file_name&#x27;</span>: <span class="hljs-string">&#x27;f1.txt&#x27;</span>,<br>                <span class="hljs-string">&#x27;total_size&#x27;</span>: total_size,<br>&#125;<br><br>             header_dict_json = json.dumps(header_dict) <span class="hljs-comment"># str</span><br>             bytes_headers = header_dict_json.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>header_size = <span class="hljs-built_in">len</span>(bytes_headers)<br><br>header = struct.pack(<span class="hljs-string">&#x27;i&#x27;</span>, header_size)<br><br>            <span class="hljs-comment"># 2 发送报头长度</span><br>            conn.send(header)<br><br>            <span class="hljs-comment"># 3 发送报头</span><br>            conn.send(bytes_headers)<br><br>            <span class="hljs-comment"># 4 发送真实数据：</span><br>            conn.send(correct_msg)<br>            conn.send(error_msg)<br><span class="hljs-keyword">except</span> ConnectionResetError:<br><span class="hljs-keyword">break</span><br><br>conn.close()<br>phone.close()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> json<br><br>phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>phone.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cmd: <span class="hljs-keyword">continue</span><br>    phone.send(cmd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <br>    <span class="hljs-comment"># 1，接收固定报头</span><br>    header_size = struct.unpack(<span class="hljs-string">&#x27;i&#x27;</span>, phone.recv(<span class="hljs-number">4</span>))[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 2，解析报头长度</span><br>    header_bytes = phone.recv(header_size)<br>    <br>header_dict = json.loads(header_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>    <span class="hljs-comment"># 3,收取报头</span><br>    total_size = header_dict[<span class="hljs-string">&#x27;total_size&#x27;</span>]<br>    <br>    <span class="hljs-comment"># 3，根据报头信息，接收真实数据</span><br>    recv_size = <span class="hljs-number">0</span><br>    res = <span class="hljs-string">b&#x27;&#x27;</span><br><br><span class="hljs-keyword">while</span> recv_size &lt; total_size:<br>recv_data = phone.recv(<span class="hljs-number">1024</span>)<br>res += recv_data<br>recv_size += <span class="hljs-built_in">len</span>(recv_data)<br><br><span class="hljs-built_in">print</span>(res.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>))<br><br>phone.close()<br></code></pre></td></tr></table></figure><p>FTP上传下载文件的代码（简单版）</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> json<br>sk = socket.socket()<br><span class="hljs-comment"># buffer = 4096 # 当双方的这个接收发送的大小比较大的时候，就像这个4096，就会丢数据，这</span><br>个等我查一下再告诉大家，改小了就ok的，在linux上也是ok的。<br>buffer = <span class="hljs-number">1024</span> <span class="hljs-comment">#每次接收数据的大小</span><br>sk.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8090</span>))<br>sk.listen()<br><br>conn,addr = sk.accept()<br><span class="hljs-comment">#接收</span><br>head_len = conn.recv(<span class="hljs-number">4</span>)<br>head_len = struct.unpack(<span class="hljs-string">&#x27;i&#x27;</span>,head_len)[<span class="hljs-number">0</span>] <span class="hljs-comment">#解包</span><br><br>json_head = conn.recv(head_len).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-comment">#反序列化</span><br>head = json.loads(json_head)<br>filesize = head[<span class="hljs-string">&#x27;filesize&#x27;</span>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(head[<span class="hljs-string">&#x27;filename&#x27;</span>],<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-keyword">while</span> filesize:<br><span class="hljs-keyword">if</span> filesize &gt;= buffer: <span class="hljs-comment">#&gt;=是因为如果刚好等于的情况出现也是可以的。</span><br>             content = conn.recv(buffer)<br>f.write(content)<br>filesize -= buffer<br><span class="hljs-keyword">else</span>:<br>content = conn.recv(buffer)<br>f.write(content)<br><span class="hljs-keyword">break</span><br><br>conn.close()<br>sk.close()<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> struct<br>sk = socket.socket()<br>sk.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8090</span>))<br>buffer = <span class="hljs-number">1024</span> <span class="hljs-comment">#读取文件的时候，每次读取的大小</span><br>head = &#123;<br>            <span class="hljs-string">&#x27;filepath&#x27;</span>:<span class="hljs-string">r&#x27;C:\Users\Aaron\Desktop\新建文件夹&#x27;</span>, <span class="hljs-comment">#需要下载的文件路径，也就是文件所在的文件夹</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>:<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-comment">#改成上面filepath下的一个文件</span><br>            <span class="hljs-string">&#x27;filesize&#x27;</span>:<span class="hljs-literal">None</span>,<br>       &#125;<br>       <br>file_path = os.path.join(head[<span class="hljs-string">&#x27;filepath&#x27;</span>],head[<span class="hljs-string">&#x27;filename&#x27;</span>])<br>filesize = os.path.getsize(file_path)<br>head[<span class="hljs-string">&#x27;filesize&#x27;</span>] = filesize<br><br><span class="hljs-comment"># json_head = json.dumps(head,ensure_ascii=False) #字典转换成字符串</span><br>json_head = json.dumps(head) <span class="hljs-comment">#字典转换成字符串</span><br>bytes_head = json_head.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-comment">#字符串转换成bytes类型</span><br><span class="hljs-built_in">print</span>(json_head)<br><span class="hljs-built_in">print</span>(bytes_head)<br><br><span class="hljs-comment">#计算head的长度，因为接收端先接收我们自己定制的报头，对吧</span><br>head_len = <span class="hljs-built_in">len</span>(bytes_head) <span class="hljs-comment">#报头长度</span><br>pack_len = struct.pack(<span class="hljs-string">&#x27;i&#x27;</span>,head_len)<br><span class="hljs-built_in">print</span>(head_len)<br><span class="hljs-built_in">print</span>(pack_len)<br>sk.send(pack_len) <span class="hljs-comment">#先发送报头长度</span><br>sk.send(bytes_head) <span class="hljs-comment">#再发送bytes类型的报头</span><br><br><span class="hljs-comment">#即便是视频文件，也是可以按行来读取的，也可以readline，也可以for循环，但是读取出来的数据</span><br>大小就不固定了，影响效率，有可能读的比较小，也可能很大，像视频文件一般都是一行的二进制字节<br>流。<br><span class="hljs-comment">#所有我们可以用read，设定一个一次读取内容的大小，一边读一边发，一边收一边写</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-keyword">while</span> filesize:<br><span class="hljs-keyword">if</span> filesize &gt;= buffer: <span class="hljs-comment">#&gt;=是因为如果刚好等于的情况出现也是可以的。</span><br>            content = f.read(buffer) <span class="hljs-comment">#每次读取出来的内容</span><br>            sk.send(content)<br>            filesize -= buffer <span class="hljs-comment">#每次减去读取的大小</span><br>        <span class="hljs-keyword">else</span>: <span class="hljs-comment">#那么说明剩余的不够一次读取的大小了，那么只要把剩下的读取出来发送过去就行了</span><br>content = f.read(filesize)<br>sk.send(content)<br><span class="hljs-keyword">break</span><br>sk.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的反射与双下方法</title>
    <link href="/20221001/Python%E7%9A%84%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%8F%8C%E4%B8%8B%E6%96%B9%E6%B3%95/"/>
    <url>/20221001/Python%E7%9A%84%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%8F%8C%E4%B8%8B%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>反射</h1><p>python面向对象中的反射：通过字符串的形式操作对象相关的属性。python中的一切事物都是对象（都 可以使用反射）</p><p>四个可以实现自省的函数</p><p>下列方法适用于类和对象（一切皆对象，类本身也是一个对象）</p><p><strong>对对象的反射</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>:<br>    f = <span class="hljs-string">&#x27;类的静态变量&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name=name<br>        self.age=age<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hi</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hi,%s&#x27;</span>%self.name)<br><br>obj=Foo(<span class="hljs-string">&#x27;KD&#x27;</span>,<span class="hljs-number">73</span>)<br><br><span class="hljs-comment"># 检测是否含有某属性</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hasattr</span>(obj,<span class="hljs-string">&#x27;name&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hasattr</span>(obj,<span class="hljs-string">&#x27;say_hi&#x27;</span>))<br><br><span class="hljs-comment"># 获取属性</span><br>n=<span class="hljs-built_in">getattr</span>(obj,<span class="hljs-string">&#x27;name&#x27;</span>)<br><span class="hljs-built_in">print</span>(n)<br>func=<span class="hljs-built_in">getattr</span>(obj,<span class="hljs-string">&#x27;say_hi&#x27;</span>)<br>func()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(obj,<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,<span class="hljs-string">&#x27;不存在啊&#x27;</span>)) <span class="hljs-comment"># 报错</span><br><br><span class="hljs-comment"># 设置属性</span><br><span class="hljs-built_in">setattr</span>(obj,<span class="hljs-string">&#x27;sb&#x27;</span>,<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">setattr</span>(obj,<span class="hljs-string">&#x27;show_name&#x27;</span>,<span class="hljs-keyword">lambda</span> self:self.name+<span class="hljs-string">&#x27;sb&#x27;</span>)<br><span class="hljs-built_in">print</span>(obj.__dict__)<br><span class="hljs-built_in">print</span>(obj.show_name(obj))<br><br><span class="hljs-comment"># 删除属性</span><br><span class="hljs-built_in">delattr</span>(obj,<span class="hljs-string">&#x27;age&#x27;</span>)<br><span class="hljs-built_in">delattr</span>(obj,<span class="hljs-string">&#x27;show_name&#x27;</span>)<br><span class="hljs-comment"># delattr(obj,&#x27;show_name111&#x27;) # 不存在,则报错</span><br><br><span class="hljs-built_in">print</span>(obj.__dict__)<br></code></pre></td></tr></table></figure><p><strong>对类的反射</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">object</span>):<br>staticField = <span class="hljs-string">&quot;test&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self.name = <span class="hljs-string">&#x27;陈松&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;func&#x27;</span><br><br><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;bar&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(Foo, <span class="hljs-string">&#x27;staticField&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(Foo, <span class="hljs-string">&#x27;func&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(Foo, <span class="hljs-string">&#x27;bar&#x27;</span>))<br></code></pre></td></tr></table></figure><p>当前模块的反射</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s2&#x27;</span>)<br><br>this_module = sys.modules[__name__]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hasattr</span>(this_module, <span class="hljs-string">&#x27;s1&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(this_module, <span class="hljs-string">&#x27;s2&#x27;</span>))<br></code></pre></td></tr></table></figure><p>其他模块的反射</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">程序目录：<br>    module_test.py<br>    test.py<br>    <br>当前文件：<br>test.py<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> module_test <span class="hljs-keyword">as</span> obj<br><br>obj.test()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hasattr</span>(obj,<span class="hljs-string">&#x27;test&#x27;</span>))<br><br><span class="hljs-built_in">getattr</span>(obj,<span class="hljs-string">&#x27;test&#x27;</span>)()<br></code></pre></td></tr></table></figure><p>举例:</p><p>使用反射前</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎来到登录页面&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎来到注册页面&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎来到存储页面&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>choose = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()<br><span class="hljs-keyword">if</span> choose == <span class="hljs-string">&#x27;login&#x27;</span>:<br>        obj = User()<br>        obj.login()<br><br>    <span class="hljs-keyword">elif</span> choose == <span class="hljs-string">&#x27;register&#x27;</span>:<br>        obj = User()<br>        obj.register()<br>        <br><span class="hljs-keyword">elif</span> choose == <span class="hljs-string">&#x27;save&#x27;</span>:<br>        obj = User()<br>        obj.save()<br></code></pre></td></tr></table></figure><p>用了反射之后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎来到登录页面&#x27;</span>)<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎来到注册页面&#x27;</span>)<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎来到存储页面&#x27;</span>)<br><br>user = User()<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>choose = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(user, choose):<br>func = <span class="hljs-built_in">getattr</span>(user, choose)<br>func()<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入错误。。。。&#x27;</span>)<br></code></pre></td></tr></table></figure><h1>函数 vs 方法</h1><h2 id="通过打印函数-方法-名确定">通过打印函数(方法)名确定</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(func)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(A.func)<br>obj = A()<br><span class="hljs-built_in">print</span>(obj.func)<br></code></pre></td></tr></table></figure><h2 id="通过types模块验证">通过types模块验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> FunctionType<br><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MethodType<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><br>obj = A()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(func,FunctionType))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(A.func,FunctionType))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(obj.func,FunctionType))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(obj.func,MethodType))<br></code></pre></td></tr></table></figure><h2 id="静态方法是函数">静态方法是函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> FunctionType<br><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MethodType<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">@classmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">cls</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><br>obj = A()<br><br><span class="hljs-comment">#类方法是方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(A.func1,FunctionType))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(obj.func1,FunctionType))<br><span class="hljs-comment"># 静态方法其实是函数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(A.func2,FunctionType))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(obj.func2,FunctionType))<br></code></pre></td></tr></table></figure><h2 id="函数与方法的区别">函数与方法的区别</h2><p>那么，函数和方法除了上述的不同之处，我们还总结了一下几点区别。</p><ol><li class="lvl-3"><p>函数的是显式传递数据的。如我们要指明为 len() 函数传递一些要处理数据。</p></li><li class="lvl-3"><p>函数则跟对象无关。</p></li><li class="lvl-3"><p>方法中的数据则是隐式传递的。</p></li><li class="lvl-3"><p>方法可以操作类内部的数据。</p></li><li class="lvl-4"><p>方法跟对象是关联的。如我们在用strip()方法是，是不是都是要通过str对象调用，比如我们有字符串s,然后<code>s.strip()</code>这样调用。是的，strip()方法属于str对象。</p></li></ol><p>我们或许在日常中会口语化称呼函数和方法时不严谨，但是我们心中要知道二者之间的区别。</p><p>在其他语言中，如Java中只有方法，C中只有函数，C++么，则取决于是否在类中</p><h1>双下方法</h1><h2 id="len"><code>__len__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-number">666</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(b)) <span class="hljs-comment"># len 一个对象就会触发 __len__方法。</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self.a = <span class="hljs-number">1</span><br>self.b = <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.__dict__)<br>a = A()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br></code></pre></td></tr></table></figure><h2 id="hash"><code>__hash__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self.a = <span class="hljs-number">1</span><br>            self.b = <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>(<span class="hljs-built_in">str</span>(self.a)+<span class="hljs-built_in">str</span>(self.b))<br>a = A()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(a))<br></code></pre></td></tr></table></figure><h2 id="str"><code>__str__</code></h2><p>如果一个类中定义了 <code>__str__</code> 方法，那么在打印 对象 时，默认输出该方法的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;陈松&#x27;</span><br>a = A()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s&#x27;</span> % a)<br></code></pre></td></tr></table></figure><h2 id="repr"><code>__repr__</code></h2><p>如果一个类中定义了 <code>__repr__</code> 方法，那么在repr(对象) 时，默认输出该方法的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;陈松&#x27;</span><br>a = A()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%r&#x27;</span>%a)<br></code></pre></td></tr></table></figure><h2 id="call"><code>__call__</code></h2><p>对象后面加括号，触发执行。</p><p>注：构造方法new的执行是由创建对象触发的，即：对象 = 类名() ；而对于 call 方法的执行是由对象后 加括号触发的，即：对象() 或者 类()()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__init__&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__call__&#x27;</span>)<br><br>obj = Foo() <span class="hljs-comment"># 执行 __init__</span><br>obj() <span class="hljs-comment"># 执行 __call__</span><br></code></pre></td></tr></table></figure><h2 id="eq"><code>__eq__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span><br>        self.b = <span class="hljs-number">2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self,obj</span>):<br><span class="hljs-keyword">if</span> self.a == obj.a <span class="hljs-keyword">and</span> self.b == obj.b:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>a = A()<br>b = A()<br><span class="hljs-built_in">print</span>(a == b)<br></code></pre></td></tr></table></figure><h2 id="del"><code>__del__</code></h2><p>析构方法，当对象在内存中被释放时，自动触发执行。</p><p>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放， 因为此工作都是交给Python解释器来执行，所以，析构函数的调用是由解释器在进行垃圾回收时自动触 发执行的。</p><h2 id="new"><code>__new__</code></h2><ol><li class="lvl-3"><p><code>__new__()</code> 方法是在类准备将自身实例化时调用。</p></li><li class="lvl-3"><p><code>__new__()</code> 方法始终都是类的静态方法，即使没有被加上静态方法装饰器</p></li><li class="lvl-3"><p>通常来说，新式类开始实例化时， <code>__new__()</code> 方法会返回cls（cls指代当前类）的实例，然后该类 的 <code>__init__()</code> 方法作为构造方法会接收这个实例（即self）作为自己的第一个参数，然后依次传 入 <code>__new__()</code> 方法中接收的位置参数和命名参数。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.x = <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in init function&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in new function&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">object</span>.__new__(A, *args, **kwargs)<br>        <br>a = A()<br><span class="hljs-built_in">print</span>(a.x)<br></code></pre></td></tr></table></figure><p>单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>__instance = <span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br><span class="hljs-keyword">if</span> cls.__instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>obj = <span class="hljs-built_in">object</span>.__new__(cls)<br>cls.__instance = obj<br><span class="hljs-keyword">return</span> cls.__instance<br><br>a=A()<br>b=A()<br><span class="hljs-built_in">print</span>(a==b)<br></code></pre></td></tr></table></figure><p>单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p><p><strong>【采用单例模式动机、原因】</strong></p><p>对于系统中的某些类来说，只有一个实例很重要，例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID(序号)生成器。如在Windows中就只能打开一个任务管理器。如果不使用机制对窗口对象进行唯一化，将弹出多个窗口，如果这些窗口显示的内容完全一致，则是重复对象，浪费内存资源；如果这些窗口显示的内容不一致，则意味着在某一瞬间系统有多个状态，与实际不符，也会给用户带来误解，不知道哪一个才是真实的状态。因此有时确保系统中某个对象的唯一性即一个类只能有一个实例非常重要。 如何保证一个类只有一个实例并且这个实例易于被访问呢？定义一个全局变量可以确保对象随时都可以被访问，但不能防止我们实例化多个对象。一个更好的解决办法是让类自身负责保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</p><p><strong>【单例模式优缺点】</strong></p><p><strong>【优点】</strong></p><p>一、实例控制</p><p>单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。</p><p>二、灵活性</p><p>因为类控制了实例化过程，所以类可以灵活更改实例化过程。</p><p><strong>【缺点】</strong></p><p>一、开销</p><p>虽然数量很少，但如果每次对象请求引用时都要检查是否存在类的实例，将仍然需要一些开销。可以通过使用静态初始化解决此问题。</p><p>二、可能的开发混淆</p><p>使用单例对象（尤其在类库中定义的对象）时，开发人员必须记住自己不能使用new关键字实例化对 象。因为可能无法访问库源代码，因此应用程序开发人员可能会意外发现自己无法直接实例化此类。</p><p>三、对象生存期</p><p>不能解决删除单个对象的问题。在提供内存管理的语言中（<a href="http://xn--6kqwxn6r1rb.NET">例如基于.NET</a> Framework的语言），只有 单例类能够导致实例被取消分配，因为它包含对该实例的私有引用。在某些语言中（如 C++），其他类 可以删除对象实例，但这样会导致单例类中出现悬浮引用</p><h2 id="item-系列"><code>__item__</code>系列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):<br><span class="hljs-built_in">print</span>(self.__dict__[item])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__setitem__</span>(<span class="hljs-params">self, key, value</span>):<br>self.__dict__[key] = value<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>赋值<span class="hljs-subst">&#123;value&#125;</span>成功&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__delitem__</span>(<span class="hljs-params">self, key</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;del obj[key]时,我执行&#x27;</span>)<br>self.__dict__.pop(key)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__delattr__</span>(<span class="hljs-params">self, item</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;del obj.key时,我执行&#x27;</span>)<br>self.__dict__.pop(item)<br>    <span class="hljs-comment"># def __setattr__(self, key, value):</span><br><span class="hljs-comment"># print(f&#x27;当设置&#123;key&#125;=&#123;value&#125;对象的时候执行&#x27;)</span><br><span class="hljs-comment"># def __getattr__(self, item):</span><br><span class="hljs-comment"># print(&quot;当获取变量的时候执行我&quot;)</span><br>f1 = Foo(<span class="hljs-string">&#x27;sb&#x27;</span>)<br>f1.age=<span class="hljs-number">19</span><br>f1[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">18</span><br>f1[<span class="hljs-string">&#x27;age1&#x27;</span>] = <span class="hljs-number">19</span><br><span class="hljs-keyword">del</span> f1.age1<br><span class="hljs-keyword">del</span> f1[<span class="hljs-string">&#x27;age&#x27;</span>]<br>f1[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;mingzi&#x27;</span><br><span class="hljs-built_in">print</span>(f1.__dict__)<br></code></pre></td></tr></table></figure><h2 id="上下文管理器相关">上下文管理器相关</h2><p><code>__enter__</code> <code>__exit__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, text</span>):<br>self.text = text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 开启上下文管理器对象时触发此方法</span><br>self.text = self.text + <span class="hljs-string">&#x27;您来啦&#x27;</span><br><span class="hljs-keyword">return</span> self <span class="hljs-comment"># 将实例化的对象返回f1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>): <span class="hljs-comment"># 执行完上下文管理器对象f1时触发此方法</span><br>self.text = self.text + <span class="hljs-string">&#x27;这就走啦&#x27;</span><br><br><span class="hljs-keyword">with</span> A(<span class="hljs-string">&#x27;大爷&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br><span class="hljs-built_in">print</span>(f1.text)<br><span class="hljs-built_in">print</span>(f1.text)<br></code></pre></td></tr></table></figure><p>自定义文件管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Diycontextor</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, mode</span>):<br>        self.name = name<br>        self.mode = mode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi enter here!!&quot;</span>)<br>        self.filehander = <span class="hljs-built_in">open</span>(self.name, self.mode)<br>        <span class="hljs-keyword">return</span> self.filehander<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self,*args</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi exit here&quot;</span>)<br>        self.filehander.close()<br><br><span class="hljs-keyword">with</span> Diycontextor(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br><span class="hljs-built_in">print</span>(i.strip())<br></code></pre></td></tr></table></figure><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StarkConfig</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>self.num = num<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>self()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br><span class="hljs-built_in">print</span>(self.num)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleConfig</span>(<span class="hljs-title class_ inherited__">StarkConfig</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-number">345</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):<br><span class="hljs-keyword">return</span> self.num[item]<br><br>v1 = RoleConfig(<span class="hljs-string">&#x27;abcedf&#x27;</span>)<br>v2 = StarkConfig(<span class="hljs-string">&#x27;2333&#x27;</span>)<br><span class="hljs-built_in">print</span>(v1[<span class="hljs-number">3</span>])<br><span class="hljs-comment"># print(v2[2])</span><br>v1.run()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StarkConfig</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>self.num = num<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">changelist</span>(<span class="hljs-params">self, request</span>):<br><span class="hljs-built_in">print</span>(self.num, request)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>self.changelist(<span class="hljs-number">999</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleConfig</span>(<span class="hljs-title class_ inherited__">StarkConfig</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">changelist</span>(<span class="hljs-params">self, request</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-number">666</span>, self.num)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminSite</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self._registry = &#123;&#125;<br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">self, k, v</span>):<br>self._registry[k] = v<br>        <br>site = AdminSite()<br>site.register(UserInfo, StarkConfig)<br><span class="hljs-comment"># 1</span><br>obj = site._registry[UserInfo]()<br><br><span class="hljs-comment"># 2</span><br><span class="hljs-comment"># obj = site._registry[UserInfo](100)</span><br>obj.run()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>:<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>:<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StarkConfig</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>self.num = num<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">changelist</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-built_in">print</span>(self.num,request)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>self.changelist(<span class="hljs-number">999</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleConfig</span>(<span class="hljs-title class_ inherited__">StarkConfig</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">changelist</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-number">666</span>,self.num)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminSite</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self._registry = &#123;&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">self,k,v</span>):<br>self._registry[k] = v(k)<br><br>site = AdminSite()<br>site.register(UserInfo,StarkConfig)<br>site.register(Department,RoleConfig)<br><br><span class="hljs-keyword">for</span> k,row <span class="hljs-keyword">in</span> site._registry.items():<br>row.run()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>list_display = []<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">self</span>):<br>self.list_display.insert(<span class="hljs-number">0</span>, <span class="hljs-number">33</span>)<br><span class="hljs-keyword">return</span> self.list_display<br><br>s1 = A()<br><span class="hljs-built_in">print</span>(s1.get_list())<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>list_display = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self.list_display = []<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">self</span>):<br>        self.list_display.insert(<span class="hljs-number">0</span>, <span class="hljs-number">33</span>)<br>        <span class="hljs-keyword">return</span> self.list_display<br>        <br>s1 = A()<br><span class="hljs-built_in">print</span>(s1.get_list())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>list_display = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">self</span>):<br>self.list_display.insert(<span class="hljs-number">0</span>,<span class="hljs-number">33</span>)<br><span class="hljs-keyword">return</span> self.list_display<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>list_display = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>]<br><br>s1 = A()<br>s2 = B()<br><span class="hljs-built_in">print</span>(s1.get_list())<br><span class="hljs-built_in">print</span>(s2.get_list())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中类的成员</title>
    <link href="/20221001/Python%E4%B8%AD%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98/"/>
    <url>/20221001/Python%E4%B8%AD%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98/</url>
    
    <content type="html"><![CDATA[<h1>细分类的组成成员</h1><p>之前咱们讲过类大致分两块区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>name = <span class="hljs-string">&#x27;KD&#x27;</span><br><br><span class="hljs-comment"># 第一部分:静态字段(静态变量)部分(这一部分调用了类自己本身，表示了类自己的自身属性)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 第二部分:方法部分（这一部分表示了类可以实施的方法，可以 自己或其他进行操作）</span><br></code></pre></td></tr></table></figure><p>每个区域详细划分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-comment">#在方法名前面带__的属于私有 </span><br><br>    company_name = <span class="hljs-string">&#x27;KD&#x27;</span> <span class="hljs-comment"># 静态变量(静态字段)</span><br>    __iphone = <span class="hljs-string">&#x27;132333xxxx&#x27;</span> <span class="hljs-comment"># 私有静态变量(私有静态字段)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>): <span class="hljs-comment">#特殊方法（在类的定有里，有部分的固定的字段方法）</span><br>        self.name = name <span class="hljs-comment">#对象属性(普通字段)</span><br>        self.__age = age <span class="hljs-comment"># 私有对象属性(私有普通字段)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 普通方法</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__func</span>(<span class="hljs-params">self</span>): <span class="hljs-comment">#私有方法</span><br>        <br>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">666</span>)<br><br><span class="hljs-meta">    @classmethod </span><span class="hljs-comment"># 类方法</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">class_func</span>(<span class="hljs-params">cls</span>):<br>            <span class="hljs-string">&quot;&quot;&quot; 定义类方法，至少有一个cls参数 &quot;&quot;&quot;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;类方法&#x27;</span>)<br><br><span class="hljs-meta">@staticmethod </span><span class="hljs-comment">#静态方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">static_func</span>():<br><span class="hljs-string">&quot;&quot;&quot; 定义静态方法 ，无默认参数&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;静态方法&#x27;</span>)<br><span class="hljs-meta">    @property </span><span class="hljs-comment"># 属性</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">prop</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>类的私有成员</p><p>对于每一个类的成员而言都有两种形式：</p><ul class="lvl-0"><li class="lvl-2"><p>公有成员，在任何地方都能访问</p></li><li class="lvl-2"><p>私有成员，只有在类的内部才能方法</p></li></ul><p><strong>私有成员和公有成员的访问限制不同</strong>：</p><p>静态字段(静态属性</p><ul class="lvl-0"><li class="lvl-2"><p>公有静态字段：类可以访问；类内部可以访问；派生类中可以访问</p></li><li class="lvl-2"><p>私有静态字段：仅类内部可以访问；</p></li></ul><p>公有静态字段访问范围示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br><br>name = <span class="hljs-string">&quot;公有静态字段&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span> (C.name)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span> (C.name)<br><br><span class="hljs-built_in">print</span>(C.name) <span class="hljs-comment"># 类访问</span><br><br>obj = C()<br>obj.func() <span class="hljs-comment"># 类内部可以访问</span><br><br>obj_son = D()<br>obj_son.show() <span class="hljs-comment"># 派生类中可以访问</span><br></code></pre></td></tr></table></figure><p>私有静态字段访问示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br>__name = <span class="hljs-string">&quot;私有静态字段&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span> (C.__name)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span> (C.__name)<br><br><span class="hljs-built_in">print</span>(C.__name) <span class="hljs-comment"># 不可在外部访问</span><br><br>obj = C()<br><span class="hljs-built_in">print</span>(C.__name) <span class="hljs-comment"># 不可在外部访问</span><br>obj.func() <span class="hljs-comment"># 类内部可以访问</span><br><br>obj_son = D()<br>obj_son.show() <span class="hljs-comment">#不可在派生类中可以访问</span><br></code></pre></td></tr></table></figure><p>普通字段(对象属性)</p><p>公有普通字段：对象可以访问；类内部可以访问；派生类中可以访问</p><p>私有普通字段：仅类内部可以访问；</p><p>公有普通字段示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self.foo = <span class="hljs-string">&quot;公有字段&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.foo) <span class="hljs-comment"># 类内部访问</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.foo) <span class="hljs-comment"># 派生类中访问</span><br><br>obj = C()<br><br>obj.foo <span class="hljs-comment"># 通过对象访问</span><br>obj.func() <span class="hljs-comment"># 类内部访问</span><br><br>obj_son = D();<br>obj_son.show() <span class="hljs-comment"># 派生类中访问</span><br></code></pre></td></tr></table></figure><p>私有普通字段示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self.__foo = <span class="hljs-string">&quot;私有字段&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span> self.foo <span class="hljs-comment"># 类内部访问</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span> self.foo ＃ 派生类中访问<br><br>obj = C()<br><br>obj.__foo <span class="hljs-comment"># 通过对象访问 ==&gt; 错误</span><br>obj.func() <span class="hljs-comment"># 类内部访问 ==&gt; 正确</span><br><br>obj_son = D();<br>obj_son.show() <span class="hljs-comment"># 派生类中访问 ==&gt; 错误</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>self.__foo = <span class="hljs-string">&quot;私有字段&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.__foo) <span class="hljs-comment"># 类内部访问</span><br>       <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.__foo) <span class="hljs-comment"># 派生类中访问</span><br><br>obj = C()<br><br><span class="hljs-built_in">print</span>(obj.__foo) <span class="hljs-comment"># 通过对象访问 ==&gt; 错误</span><br>obj.func() <span class="hljs-comment"># 类内部访问 ==&gt; 正确</span><br><br>obj_son = D()<br>obj_son.show() <span class="hljs-comment"># 派生类中访问 ==&gt; 错误    </span><br></code></pre></td></tr></table></figure><p>方法:</p><ul class="lvl-0"><li class="lvl-2"><p>公有方法:对象可以访问；类内部可以访问；派生类中可以访问</p></li><li class="lvl-2"><p>私有方法:仅类内部可以访问；</p></li></ul><p>共有方法示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in C&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in D&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>self.show()<br><br>obj = D()<br>obj.show() <span class="hljs-comment"># 通过对象访问</span><br>obj.func() <span class="hljs-comment"># 类内部访问</span><br>obj.add() <span class="hljs-comment"># 派生类中访问</span><br></code></pre></td></tr></table></figure><p>私有方法示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__add</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in C&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">C</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__show</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in D&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>self.__show()<br><br>obj = D()<br>obj.__show() <span class="hljs-comment"># 通过不能对象访问</span><br>obj.func() <span class="hljs-comment"># 类内部可以访问</span><br>obj.__add() <span class="hljs-comment"># 派生类中不能访问</span><br></code></pre></td></tr></table></figure><p>总结</p><p>对于这些私有成员来说,他们只能在类的内部使用,不能再类的外部以及派生类中使用.</p><p><strong>ps：非要访问私有成员的话，可以通过 对象._类__属性名,但是绝对不允许!!!</strong></p><p>为什么可以通过.类__私有成员名访问呢?因为类在创建时,如果遇到了私有成员(包括私有静态字段,私有普 通字段,私有方法)它会将其保存在内存时自动在前面加上类名.</p><h1>类的其他成员</h1><p>这里的其他成员主要就是类方法：</p><p>方法包括：普通方法、静态方法和类方法，三种方法在<strong>内存中都归属于类</strong>，区别在于调用方式不同。</p><p><strong>实例方法</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">定义：第一个参数必须是实例对象，该参数名一般约定为“<span class="hljs-keyword">self</span>”，通过它来传递实例的属性和方法（也可以传类的属性和方法）；<br><br>调用：只能由实例对象调用。<br></code></pre></td></tr></table></figure><p>类方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">定义：使用装饰器<span class="hljs-meta">@classmethod</span>。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）；<br><br>调用：实例对象和类对象都可以调用。<br></code></pre></td></tr></table></figure><p>静态方法</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">定义：使用装饰器<span class="hljs-variable">@staticmethod</span>。参数随意，没有“<span class="hljs-keyword">self</span>”和“cls”参数，但是方法体中不能使用类或<br>实例的任何属性和方法；<br><br>调用：实例对象和类对象都可以调用。<br></code></pre></td></tr></table></figure><p>双下方法（后面会讲到）</p><p>定义：双下方法是特殊方法，他是解释器提供的 由双下划线加方法名加双下划线 方法名的具有特殊意 义的方法,双下方法主要是python源码程序员使用的，我们在开发中尽量不要使用双下方法，但是深入研究双下方法，更有益于我们阅读源码。 调用：不同的双下方法有不同的触发方式，就好比盗墓时触发的机关一样，不知不觉就触发了双下方 法，例如：<code>init</code></p><h2 id="类方法">类方法</h2><p>使用装饰器@<code>classmethod</code>。</p><p>原则上，类方法是将类本身作为对象进行操作的方法。假设有个方法，且这个方法在逻辑上采用类本身 作为对象来调用更合理，那么这个方法就可以定义为类方法。另外，如果需要继承，也可以定义为类方 法。</p><p>如下场景：</p><p>假设我有一个学生类和一个班级类，想要实现的功能为：</p><p>执行班级人数增加的操作、获得班级的总人数；</p><p>学生类继承自班级类，每实例化一个学生，班级人数都能增加；</p><p>最后，我想定义一些学生，获得班级中的总人数。</p><p>**思考：**这个问题用类方法做比较合适，为什么？因为我实例化的是学生，但是如果我从学生这一个实例 中获得班级总人数，在逻辑上显然是不合理的。同时，如果想要获得班级总人数，如果生成一个班级的 实例也是没有必要的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>__num = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>self.name = name<br>self.age = age<br>Student.addNum() <span class="hljs-comment"># 写在__new__方法中比较合适，但是现在还没有学，暂且放到这里</span><br><br><span class="hljs-meta">@classmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addNum</span>(<span class="hljs-params">cls</span>):<br>cls.__num += <span class="hljs-number">1</span><br><br><span class="hljs-meta">@classmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getNum</span>(<span class="hljs-params">cls</span>):<br><span class="hljs-keyword">return</span> cls.__num<br><br>Student(<span class="hljs-string">&#x27;KD&#x27;</span>, <span class="hljs-number">18</span>)<br>Student(<span class="hljs-string">&#x27;KK&#x27;</span>, <span class="hljs-number">36</span>)<br>Student(<span class="hljs-string">&#x27;DD&#x27;</span>, <span class="hljs-number">73</span>)<br><span class="hljs-built_in">print</span>(Student.getNum())<br></code></pre></td></tr></table></figure><h2 id="静态方法">静态方法</h2><p>使用装饰器<code>@staticmethod</code>。</p><p>静态方法是类中的函数，不需要实例。静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和 类本身没有关系，也就是说在静态方法中，不会涉及到类中的属性和方法的操作。可以理解为，静态方 法是个独立的、单纯的函数，它仅仅托管于某个类的名称空间中，便于使用和维护。</p><p>譬如，我想定义一个关于时间操作的类，其中有一个获取当前时间的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeTest</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, hour, minute, second</span>):<br>self.hour = hour<br>self.minute = minute<br>self.second = second<br><br><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">showTime</span>():<br><span class="hljs-keyword">return</span> time.strftime(<span class="hljs-string">&quot;%H:%M:%S&quot;</span>, time.localtime())<br><br><span class="hljs-built_in">print</span>(TimeTest.showTime())<br>t = TimeTest(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>nowTime = t.showTime()<br><span class="hljs-built_in">print</span>(nowTime)<br></code></pre></td></tr></table></figure><h2 id="方法综合案例">方法综合案例</h2><p>需求</p><ol><li class="lvl-3"><p>设计一个 Game 类</p></li><li class="lvl-3"><p>属性：</p><p>定义一个 <strong>类属性</strong> top_score 记录游戏的 历史最高分</p><p>定义一个 <strong>实例属性</strong> player_name 记录 当前游戏的玩家姓名</p></li><li class="lvl-3"><p>方法：</p><p>静态方法 show_help 显示游戏帮助信息</p><p>类方法 show_top_score 显示历史最高分</p><p>实例方法 start_game 开始当前玩家的游戏</p></li><li class="lvl-3"><p>主程序步骤</p><p>1.查看帮助信息</p><p>2.查看历史最高分</p><p>3.创建游戏对象，开始游戏</p></li></ol><p><img src="image-20220711121734992.png" alt="示意图"></p><h3 id="案例小结">案例小结</h3><ol><li class="lvl-3"><p>实例方法—— 方法内部需要访问实例属性</p><pre><code class="hljs"> 实例方法 内部可以使用 类名. 访问类属性</code></pre></li><li class="lvl-3"><p>类方法 —— 方法内部 只 需要访问 类属性</p></li><li class="lvl-3"><p>静态方法 —— 方法内部，不需要访问 实例属性 和 类属性</p></li></ol><p><strong>提问</strong></p><p>应该定义 <strong>实例方法</strong></p><p>因为，<strong>类只有一个</strong>，在 <strong>实例方法</strong> 内部可以使用 <strong>类名</strong>. 访问类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br><span class="hljs-comment"># 游戏最高分，类属性</span><br>top_score = <span class="hljs-number">0</span><br><br><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_help</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;帮助信息：让僵尸走进房间&quot;</span>)<br><br><span class="hljs-meta">@classmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_top_score</span>(<span class="hljs-params">cls</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游戏最高分是 %d&quot;</span> % cls.top_score)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, player_name</span>):<br>self.player_name = player_name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_game</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[%s] 开始游戏...&quot;</span> % self.player_name)<br><br>    <span class="hljs-comment"># 使用类名.修改历史最高分</span><br>    Game.top_score = <span class="hljs-number">999</span><br><br><span class="hljs-comment"># 1. 查看游戏帮助</span><br>Game.show_help()<br><br><span class="hljs-comment"># 2. 查看游戏最高分</span><br>Game.show_top_score()<br><br><span class="hljs-comment"># 3. 创建游戏对象，开始游戏</span><br>game = Game(<span class="hljs-string">&quot;小明&quot;</span>)<br><br>game.start_game()<br><br><span class="hljs-comment"># 4. 游戏结束，查看游戏最高分</span><br>Game.show_top_score()<br></code></pre></td></tr></table></figure><h2 id="属性">属性</h2><p>property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">例一：<span class="hljs-keyword">BMI指数（bmi是计算而来的，但很明显它听起来像是一个属性而非方法，如果我们将其做成一个</span><br><span class="hljs-keyword"></span>属性，更便于理解）<br><br>成人的<span class="hljs-keyword">BMI数值：</span><br><span class="hljs-keyword"></span>过轻：低于<span class="hljs-number">18</span>.<span class="hljs-number">5</span><br>正常：<span class="hljs-number">18</span>.<span class="hljs-number">5</span><span class="hljs-number">-23</span>.<span class="hljs-number">9</span><br>过重：<span class="hljs-number">24</span><span class="hljs-number">-27</span><br>肥胖：<span class="hljs-number">28</span><span class="hljs-number">-32</span><br>非常肥胖, 高于<span class="hljs-number">32</span><br>    体质指数（<span class="hljs-keyword">BMI）=体重（kg）÷身高^2（m）</span><br><span class="hljs-keyword"></span>    EX：<span class="hljs-number">70</span>kg÷（<span class="hljs-number">1</span>.<span class="hljs-number">75</span>×<span class="hljs-number">1</span>.<span class="hljs-number">75</span>）=<span class="hljs-number">22</span>.<span class="hljs-number">86</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,weight,height</span>):<br>        self.name=name<br>        self.weight=weight<br>        self.height=height<br><span class="hljs-meta">@property</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bmi</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> self.weight / (self.height**<span class="hljs-number">2</span>)<br><br>p1=People(<span class="hljs-string">&#x27;陈松&#x27;</span>,<span class="hljs-number">75</span>,<span class="hljs-number">1.85</span>)<br><span class="hljs-built_in">print</span>(p1.bmi)<br></code></pre></td></tr></table></figure><p>将一个类的函数定义成特性以后，<a href="http://xn--obj-hb0eo1az7dv0fiuvvgvox8aned324g.name">对象再去使用的时候obj.name</a>,根本无法察觉自己的name是执行了一 个函数然后计算出来的，这种特性的使用方式遵循了<strong>统一访问的原则</strong></p><p>由于新式类中具有三种访问方式，我们可以根据他们几个属性的访问特点，分别将三个方法定义为对同 一个属性：获取、修改、删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>:<br><span class="hljs-meta">@property</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">AAA</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get的时候运行我啊&#x27;</span>)<br><br><span class="hljs-meta">    @AAA.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">AAA</span>(<span class="hljs-params">self,value</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;set的时候运行我啊&#x27;</span>)<br><br><span class="hljs-meta">    @AAA.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">AAA</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;delete的时候运行我啊&#x27;</span>)<br>    <br><span class="hljs-comment">#只有在属性AAA定义property后才能定义AAA.setter,AAA.deleter</span><br>f1=Foo()<br>f1.AAA<br>f1.AAA=<span class="hljs-string">&#x27;aaa&#x27;</span><br><span class="hljs-keyword">del</span> f1.AAA<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_AAA</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get的时候运行我啊&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_AAA</span>(<span class="hljs-params">self,value</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;set的时候运行我啊&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_AAA</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;delete的时候运行我啊&#x27;</span>)<br>AAA=<span class="hljs-built_in">property</span>(get_AAA,set_AAA,delete_AAA) <span class="hljs-comment">#内置property三个参数与</span><br>get,<span class="hljs-built_in">set</span>,delete一一对应<br><br>f1=Foo()<br>f1.AAA<br>f1.AAA=<span class="hljs-string">&#x27;aaa&#x27;</span><br><span class="hljs-keyword">del</span> f1.AAA<br></code></pre></td></tr></table></figure><p>商品的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-comment"># 原价</span><br>        self.original_price = <span class="hljs-number">100</span><br>        <span class="hljs-comment"># 折扣</span><br>        self.discount = <span class="hljs-number">0.8</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">price</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 实际价格 = 原价 * 折扣</span><br>        new_price = self.original_price * self.discount<br>        <span class="hljs-keyword">return</span> new_price<br><br><span class="hljs-meta">    @price.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">price</span>(<span class="hljs-params">self, value</span>):<br>    self.original_price = value<br><br><span class="hljs-meta">    @price.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">price</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">del</span> self.original_price<br><br>obj = Goods()<br><span class="hljs-built_in">print</span>(obj.price) <span class="hljs-comment"># 获取商品价格</span><br>obj.price = <span class="hljs-number">200</span> <span class="hljs-comment"># 修改商品原价</span><br><span class="hljs-built_in">print</span>(obj.price)<br><span class="hljs-keyword">del</span> obj.price <span class="hljs-comment"># 删除商品原价</span><br></code></pre></td></tr></table></figure><h1>isinstace 与 issubclass</h1><p>isinstance(a,b)：判断a是否是b类（或者b类的派生类）实例化的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-keyword">pass</span><br><br>obj = B()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(obj,B))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(obj,A))<br></code></pre></td></tr></table></figure><p><strong>issubclass(a,b)：</strong> 判断a类是否是b类（或者b的派生类）的派生类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">B</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">issubclass</span>(B,A))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">issubclass</span>(C,A))<br></code></pre></td></tr></table></figure><p>思考：那么 list str tuple dict等这些类与 Iterable类 的关系是什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterable<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-built_in">list</span>)) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], Iterable)) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">issubclass</span>(<span class="hljs-built_in">list</span>,Iterable)) <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 由上面的例子可得，这些可迭代的数据类型，list str tuple dict等 都是 Iterable的子类。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的封装与多态</title>
    <link href="/20221001/Python%E4%B8%AD%E7%9A%84%E5%B0%81%E8%A3%85%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <url>/20221001/Python%E4%B8%AD%E7%9A%84%E5%B0%81%E8%A3%85%E4%B8%8E%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1>封装</h1><ol><li class="lvl-3"><strong>封装</strong> 是面向对象编程的一大特点</li><li class="lvl-3">面向对象编程的 <strong>第一步</strong> —— 将 <strong>属性</strong> 和 <strong>方法 封装</strong> 到一个抽象的 <strong>类</strong> 中</li><li class="lvl-3"><strong>外界</strong> 使用 <strong>类</strong> 创建 <strong>对象</strong>，然后 <strong>让对象调用方法</strong></li><li class="lvl-3"><strong>对象方法的细节</strong> 都被 <strong>封装</strong> 在 <strong>类的内部</strong></li></ol><p>第一步：将内容封装到某处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self.name = name<br>        self.age = age<br>        <br>obj1 = Foo(<span class="hljs-string">&#x27;chensong&#x27;</span>,<span class="hljs-number">18</span>)<br>obj2 = Foo(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>第二步：从某处调用被封装的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>self.name = name<br>self.age = age<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">detail</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.name)<br><span class="hljs-built_in">print</span>(self.age)<br><br>obj1 = Foo(<span class="hljs-string">&#x27;chensong&#x27;</span>,<span class="hljs-number">18</span>)<br>obj2 = Foo(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-number">16</span>)<br><br><span class="hljs-built_in">print</span>(obj1.name)<br><span class="hljs-built_in">print</span>(obj2.age)<br><span class="hljs-comment"># 通过对象直接调用被封装的内容</span><br><br>obj1.detail()<br>obj2.detail()<br><span class="hljs-comment"># 通过self间接调用被封装的内容</span><br></code></pre></td></tr></table></figure><h2 id="案例一，-摆放家具">案例一， 摆放家具</h2><p><strong>需求</strong></p><ol><li class="lvl-3"><p>房子(House)有户型、总面积和家具名称列表</p><p>​</p><ul class="lvl-2"><li class="lvl-5"><p>新房子没有任何的家具</p></li></ul></li><li class="lvl-3"><p>家具(HouseItem)有名字和占地面积，其中</p><pre><code class="hljs">  席梦思(bed) 占地 4 平米  衣柜(chest) 占地 2 平米  餐桌(table) 占地 1.5 平米</code></pre></li><li class="lvl-3"><p>将以上三件 家具 添加 到 房子 中</p></li><li class="lvl-3"><p>打印房子时，要求输出：<strong>户型、总面积、剩余面积、家具名称列表</strong></p></li></ol><p><img src="image-20220710130733553-1685188728096-19.png" alt="实例图"></p><p><strong>剩余面积</strong></p><ol><li class="lvl-3"><p>在创建房子对象时，定义一个 剩余面积的属性，初始值和总面积相等</p></li><li class="lvl-3"><p>当调用 add_item 方法，向房间 添加家具 时，让 剩余面积 -= 家具面积</p></li></ol><p>**思考：**应该先开发哪一个类？</p><p><strong>答案 —— 家具类</strong></p><ol><li class="lvl-3"><p>家具简单</p></li><li class="lvl-3"><p>房子要使用到家具，被使用的类，通常应该先开发</p></li></ol><p>创建家具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseItem</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, area</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :param name: 家具名称</span><br><span class="hljs-string">        :param area: 占地面积</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.name = name<br>        self.area = area<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[%s] 占地面积 %.2f&quot;</span> % (self.name, self.area)<br><br><span class="hljs-comment"># 1. 创建家具</span><br>bed = HouseItem(<span class="hljs-string">&quot;席梦思&quot;</span>, <span class="hljs-number">4</span>)<br>chest = HouseItem(<span class="hljs-string">&quot;衣柜&quot;</span>, <span class="hljs-number">2</span>)<br>table = HouseItem(<span class="hljs-string">&quot;餐桌&quot;</span>, <span class="hljs-number">1.5</span>)<br><br><span class="hljs-built_in">print</span>(bed)<br><span class="hljs-built_in">print</span>(chest)<br><span class="hljs-built_in">print</span>(table<br></code></pre></td></tr></table></figure><p>创建房间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">House</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, house_type, area</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        :param house_type: 户型</span><br><span class="hljs-string">        :param area: 总面积</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.house_type = house_type<br>        self.area = area<br>        <span class="hljs-comment"># 剩余面积默认和总面积一致</span><br>        self.free_area = area<br>        <span class="hljs-comment"># 默认没有任何的家具</span><br>        self.item_list = []<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-comment"># Python 能够自动的将一对括号内部的代码连接在一起</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;户型：%s\n总面积：%.2f[剩余：%.2f]\n家具：%s&quot;</span>% (self.house_type, self.area,self.free_area, self.item_list))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_item</span>(<span class="hljs-params">self, item</span>):<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;要添加 %s&quot;</span> % item)<br><br>...<br><br><span class="hljs-comment"># 2. 创建房子对象</span><br>my_home = House(<span class="hljs-string">&quot;两室一厅&quot;</span>, <span class="hljs-number">60</span>)<br><br>my_home.add_item(bed)<br>my_home.add_item(chest)<br>my_home.add_item(table)<br><br><span class="hljs-built_in">print</span>(my_home)<br></code></pre></td></tr></table></figure><p>添加家具</p><ul class="lvl-0"><li class="lvl-2"><p>主程序只负责创建 房子 对象和 家具 对象</p></li><li class="lvl-2"><p>让房子 对象调用 add_item 方法 将家具添加到房子中</p></li><li class="lvl-2"><p>面积计算、剩余面积、家具列表等处理都被封装到房子类的内部</p></li></ul><h2 id="案例二、士兵突击">案例二、士兵突击</h2><p><strong>需求</strong></p><ol><li class="lvl-3"><p><strong>士兵</strong> <strong>许三多</strong> 有一把 <strong>AK47</strong></p></li><li class="lvl-3"><p><strong>士兵</strong> 可以 <strong>开火</strong></p></li><li class="lvl-3"><p><strong>枪</strong> 能够 <strong>发射</strong> 子弹</p></li><li class="lvl-3"><p><strong>枪</strong> 装填 <strong>装填子弹</strong> —— <strong>增加子弹数量</strong></p></li></ol><p><img src="image-20220711092746156-1685188728097-21.png" alt="示例图"></p><p><strong>开发枪类</strong></p><ul class="lvl-0"><li class="lvl-2"><p>shoot 方法需求</p><ol><li class="lvl-5"><p>判断是否有子弹，没有子弹无法射击</p></li><li class="lvl-5"><p>使用 print 提示射击，并且输出子弹数量</p></li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gun</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, model</span>):<br><br><span class="hljs-comment"># 枪的型号</span><br>self.model = model<br><span class="hljs-comment"># 子弹数量</span><br>self.bullet_count = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_bullet</span>(<span class="hljs-params">self, count</span>):<br><br>self.bullet_count += count<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shoot</span>(<span class="hljs-params">self</span>):<br><br><span class="hljs-comment"># 判断是否还有子弹</span><br><span class="hljs-keyword">if</span> self.bullet_count &lt;= <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有子弹了...&quot;</span>)<br><span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># 发射一颗子弹</span><br>        self.bullet_count -= <span class="hljs-number">1</span><br>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s 发射子弹[%d]...突突突&quot;</span> % (self.model, self.bullet_count))<br><br><span class="hljs-comment"># 创建枪对象</span><br>ak47 = Gun(<span class="hljs-string">&quot;ak47&quot;</span>)<br>ak47.add_bullet(<span class="hljs-number">50</span>)<br>ak47.shoot()<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>开发士兵类</p></li></ul><blockquote><p>假设：每一个新兵 都 <strong>没有枪</strong></p></blockquote><p><strong>定义没有初始值的属性</strong></p><p>在定义属性时，如果 <strong>不知道设置什么初始值</strong>，可以设置为 None</p><ul class="lvl-0"><li class="lvl-2"><p>None 关键字 表示 什么都没有</p></li><li class="lvl-2"><p>表示一个 空对象，没有方法和属性，是一个特殊的常量</p></li><li class="lvl-2"><p>可以将 None 赋值给任何一个变量</p></li></ul><p>fire 方法需求</p><ul class="lvl-0"><li class="lvl-2"><p>判断是否有枪，没有枪没法冲锋</p></li><li class="lvl-2"><p>喊一声口号</p></li><li class="lvl-2"><p>装填子弹</p></li><li class="lvl-2"><p>射击</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Soldier</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name，gun</span>):<br><br>        <span class="hljs-comment"># 姓名</span><br>        self.name = name<br>        <span class="hljs-comment"># 枪，士兵初始没有枪 None 关键字表示什么都没有</span><br>        self.gun = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fire</span>(<span class="hljs-params">self</span>):<br>        <br>        <span class="hljs-comment"># 1. 判断士兵是否有枪</span><br>        <span class="hljs-keyword">if</span> self.gun <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[%s] 还没有枪...&quot;</span> % self.name)<br><br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># 2. 高喊口号</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;冲啊...[%s]&quot;</span> % self.name)<br><br>        <span class="hljs-comment"># 3. 让枪装填子弹</span><br>        self.gun.add_bullet(<span class="hljs-number">50</span>)<br><br>        <span class="hljs-comment"># 4. 让枪发射子弹</span><br>        self.gun.shoot()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">xusanduo=Soldier(<span class="hljs-string">&#x27;许三多&#x27;</span>)<br>xusanduo.fire()<br>ak47=Gun(<span class="hljs-string">&#x27;ak47&#x27;</span>)<br>xusanduo.gun=ak47<br>xusanduo.fire()<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br>xusanduo.gun.add_bullet(<span class="hljs-number">50</span>)<br>xusanduo.gun.shoot()<br>xusanduo.gun.shoot()<br></code></pre></td></tr></table></figure><h1>多态</h1><p>（多态的含义其实就是子类去继承大部分的功能，但是对于继承过来的功能可以进行改写，来达到相对于父类更加多的功能）</p><p><strong>多态</strong> 不同的 <strong>子类对象</strong> 调用相同的 <strong>父类方法</strong>，产生不同的执行结果</p><ul class="lvl-0"><li class="lvl-2"><p><strong>多态</strong> 可以 <strong>增加代码的灵活度</strong></p></li><li class="lvl-2"><p>以 <strong>继承</strong> 和 <strong>重写父类方法</strong> 为前提</p></li><li class="lvl-2"><p>是调用方法的技巧，<strong>不会影响到类的内部设计</strong></p></li></ul><p><img src="image-20220711093856993-1685188728097-23.png" alt="关系表示图"></p><h2 id="案例，哮天犬">案例，哮天犬</h2><p><strong>需求</strong></p><ol><li class="lvl-3"><p>在 Dog 类中封装方法 game</p><p>普通狗只是简单的玩耍</p></li><li class="lvl-3"><p>定义 XiaoTianDog 继承自 Dog ，并且重写 game 方法</p><p>哮天犬需要在天上玩耍</p></li><li class="lvl-3"><p>定义 Person 类，并且封装一个和狗玩 的方法</p><p>在方法内部，直接让 <strong>狗对象</strong> 调用 game 方法</p></li></ol><p><img src="image-20220711094103117-1685188728097-25.png" alt="示意图"></p><p><strong>案例小结</strong></p><ul class="lvl-0"><li class="lvl-2"><p>Person 类中只需要让狗对象调用 game 方法，而不关心具体是什么狗</p></li><li class="lvl-2"><p>game 方法是在 Dog 父类中定义的</p></li><li class="lvl-2"><p>在程序执行时，传入不同的 狗对象 实参，就会产生不同的执行效果</p></li></ul><blockquote><p>多态 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s 蹦蹦跳跳的玩耍...&quot;</span> % self.name)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoTianDog</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s 飞到天上去玩耍...&quot;</span> % self.name)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">game_with_dog</span>(<span class="hljs-params">self, dog</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s 和 %s 快乐的玩耍...&quot;</span> % (self.name, dog.name))<br><br><span class="hljs-comment"># 让狗玩耍</span><br>dog.game()<br><br><span class="hljs-comment"># 1. 创建一个狗对象</span><br>wangcai = Dog(<span class="hljs-string">&quot;旺财&quot;</span>)<br>xiaotianquan = XiaoTianDog(<span class="hljs-string">&quot;飞天旺财&quot;</span>)<br><br><span class="hljs-comment"># 2. 创建一个小明对象</span><br>xiaoming = Person(<span class="hljs-string">&quot;小明&quot;</span>)<br><br><span class="hljs-comment"># 3. 让小明调用和狗玩的方法</span><br>xiaoming.game_with_dog(wangcai)<br>xiaoming.game_with_dog(xiaotianquan)<br></code></pre></td></tr></table></figure><p>python中有一句谚语说的好，你看起来像鸭子，那么你就是鸭子。</p><p>对于代码上的解释其实很简答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in A f1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in A f2&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in B f1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in B f2&#x27;</span>)<br><br>obj = A()<br>obj.f1()<br>obj.f2()<br><br>obj2 = B()<br>obj2.f1()<br>obj2.f2()<br><span class="hljs-comment"># A 和 B两个类完全没有耦合性，但是在某种意义上他们却统一了一个标准。</span><br><span class="hljs-comment"># 对相同的功能设定了相同的名字，这样方便开发，这两个方法就可以互成为鸭子类型。</span><br><br><span class="hljs-comment"># 这样的例子比比皆是：str tuple list 都有 index方法，这就是统一了规范。</span><br><span class="hljs-comment"># str bytes 等等 这就是互称为鸭子类型。</span><br></code></pre></td></tr></table></figure><h1>类的约束</h1><p>（将具有相同的用途的类，可以在定义某个功能的时候在不同的类中将一样的功能进行相同命名，这样在外部进行调用的时候，可以直接使用相同的函数进行一次性调用，这样将选择权交给用户，更为的灵活，详见下面的支付案例）</p><p>写一个支付功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QQpay</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用qq支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用阿里支付%s元&#x27;</span> % money)<br><br>a = Alipay()<br>a.pay(<span class="hljs-number">100</span>)<br><br>b = QQpay()<br>b.pay(<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>统一一下付款方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QQpay</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用qq支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用阿里支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">obj,money</span>):<br>obj.pay(money)<br><br>a = Alipay()<br>b = QQpay()<br><br>pay(a,<span class="hljs-number">100</span>)<br>pay(b,<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p>如果后期添加微信支付，但是没有统一标准，换个程序员就可能写成这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">QQpay</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用qq支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用阿里支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wechatpay</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuqian</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用微信支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">obj,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===============&quot;</span>)<br>obj.pay(money)<br><br>a = Alipay()<br>b = QQpay()<br><br>pay(a,<span class="hljs-number">100</span>)<br>pay(b,<span class="hljs-number">200</span>)<br><br>c = Wechatpay()<br>c.fuqian(<span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure><p>解释：由于WeChat使用的内部付款方式不是与其他两种相同的pay模式，所以无法在外部一次性进行选择，会减少代码的可读性，没有灵活性</p><p><strong>所以此时我们要用到对类的约束，对类的约束有两种：</strong></p><ol><li class="lvl-3"><p>提取⽗类. 然后在⽗类中定义好⽅法. 在这个⽅法中什么都不⽤⼲. 就抛⼀个异常就可以了. 这样所有 的⼦类都必须重写这个⽅法. 否则. 访问的时候就会报错.</p></li><li class="lvl-3"><p>使⽤元类来描述⽗类. 在元类中给出⼀个抽象⽅法. 这样⼦类就不得不给出抽象⽅法的具体实现. 也 可以起到约束的效果.</p></li></ol><p>先用第一种方法解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#此处通过，首先在所有的函数的父类内部定义一个pay方法，要求子类必须对这个父类方法进行修改，否则就会进行当初程序员自己定义的一个报错，同时开始提示，如：打印“你没有去定义pay方法”</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Payment</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    此类什么都不做，就是制定一个标准，谁继承我，必须定义我里面的方法。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;你没有实现pay方法&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QQpay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用qq支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用阿里支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wechatpay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuqian</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用微信支付%s元&#x27;</span> % money)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">obj,money</span>):<br>obj.pay(money)<br>a = Alipay()<br>b = QQpay()<br>c = Wechatpay()<br>pay(a,<span class="hljs-number">100</span>)<br>pay(b,<span class="hljs-number">200</span>)<br>pay(c,<span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure><p>引入抽象类的概念处理（不建议）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta,abstractmethod<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Payment</span>(metaclass=ABCMeta): <span class="hljs-comment"># 抽象类 接口类 规范和约束 metaclass指定的是一个元类</span><br><span class="hljs-meta">    @abstractmethod</span><span class="hljs-comment">#在这里加入一个修饰，在这个修饰下面放入需要的函数，这样可以实现与上面一样要求必须定义的功能，如果不进行定义，回引起IndentationError的报错，但是不会像上一方法那样直接进行打印父方法中的东西</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<span class="hljs-keyword">pass</span> <span class="hljs-comment"># 抽象方法</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用支付宝支付了%s元&#x27;</span>%money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QQpay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self,money</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用qq支付了%s元&#x27;</span>%money)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wechatpay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br><span class="hljs-comment"># def pay(self,money):</span><br><span class="hljs-comment"># print(&#x27;使用微信支付了%s元&#x27;%money)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">a,money</span>):<br>a.pay(money)<br><br>a = Alipay()<br>a.pay(<span class="hljs-number">100</span>)<br>pay(a,<span class="hljs-number">100</span>) <span class="hljs-comment"># 归一化设计：不管是哪一个类的对象，都调用同一个函数去完成相似的功能</span><br>q = QQpay()<br>q.pay(<span class="hljs-number">100</span>)<br>pay(q,<span class="hljs-number">100</span>)<br>w = Wechatpay() <span class="hljs-comment"># 到实例化对象的时候就会报错</span><br>pay(w,<span class="hljs-number">100</span>)<br><br><span class="hljs-comment"># 抽象类和接口类做的事情 ：建立规范</span><br><span class="hljs-comment"># 制定一个类的metaclass是ABCMeta，</span><br><span class="hljs-comment"># 那么这个类就变成了一个抽象类(接口类)</span><br><span class="hljs-comment"># 这个类的主要功能就是建立一个规范</span><br></code></pre></td></tr></table></figure><p>总结: 约束. 其实就是⽗类对⼦类进⾏约束. ⼦类必须要写xxx⽅法. 在python中约束的⽅式和⽅法有两种:</p><ol><li class="lvl-3"><p>使⽤抽象类和抽象⽅法, 由于该⽅案来源是java和c#. 所以使⽤频率还是很少的</p></li><li class="lvl-3"><p>使⽤⼈为抛出异常的⽅案. 并且尽量抛出的是NotImplementError. 这样比较专业, ⽽且错误比较明 确.(推荐</p></li></ol><h1>super()深入了解</h1><p>super是严格按照类的继承顺序**（mro）**执行！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in A f1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in A f2&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">super</span>().f2()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in A Foo&#x27;</span>)<br><br>obj = Foo()<br>obj.f1()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in A&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">super</span>().f1()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in Foo&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in Bar&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span>(Foo,Bar):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">super</span>().f1()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in Info f1&#x27;</span>)<br><br>obj = Info()<br>obj.f1()<br><br><span class="hljs-built_in">print</span>(Info.mro())<br></code></pre></td></tr></table></figure><p>super方法可以在继承后，儿子可以去调用父亲的方法使用super方法即可</p><p>这个就是super方法的好处，可以让继承后的直接调用继承的内部方法</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的继承</title>
    <link href="/20221001/Python%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <url>/20221001/Python%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h1>面向对象的继承</h1><p><strong>面向对象三大特性</strong></p><p><strong>封装</strong> 根据 <strong>职责</strong> 将 <strong>属性</strong> 和 <strong>方法 封装</strong> 到一个抽象的 <strong>类</strong> 中</p><p><strong>继承 实现代码的重用</strong>，相同的代码不需要重复的编写</p><p><strong>多态</strong> 不同的对象调用相同的方法，产生不同的执行结果，<strong>增加代码的灵活度</strong></p><p>不用继承创建对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br></code></pre></td></tr></table></figure><p>使用继承的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Aniaml</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>**继承的概念：**<strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法 和 属性</strong></p><p><img src="image-20220709204526823.png" alt="是否使用继承进行对比"></p><p>继承的优点也是显而易见的：</p><ol><li class="lvl-3"><p>增加了类的耦合性（耦合性不宜多，宜精）。</p></li><li class="lvl-3"><p>减少了重复代码。</p></li><li class="lvl-3"><p>使得代码更加规范化，合理化。</p></li></ol><h1>继承的分类</h1><p>上面的那个例子，涉及到的专业术语：</p><ul class="lvl-0"><li class="lvl-2"><p>Dog 类是 Animal 类的子类， Animal 类是 Dog 类的父类， Dog 类从 Animal 类继承</p></li><li class="lvl-2"><p>Dog 类是 Animal 类的派生类， Animal 类是 Dog 类的基类， Dog 类从 Animal 类派生</p></li></ul><p>继承：可以分<strong>单继承</strong>，<strong>多继承</strong>。</p><p>python3x版本中只有一种类：</p><p>python3中使⽤的都是新式类. 如果基类谁都不继承. 那这个类会默认继承 object</p><h2 id="单继承">单继承</h2><h3 id="类名，对象执行父类方法">类名，对象执行父类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Aniaml</span>(<span class="hljs-title class_ inherited__">object</span>):<br>type_name = <span class="hljs-string">&#x27;动物类&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;吃&#x27;</span>,self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(Person.type_name)<br>Person.eat(<span class="hljs-string">&#x27;东西&#x27;</span>)<br>p1 = Person(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(p1.__dict__)<br><span class="hljs-built_in">print</span>(p1.type_name)<br>p1.type_name = <span class="hljs-string">&#x27;666&#x27;</span><br><span class="hljs-built_in">print</span>(p1)<br>p1.eat()<br></code></pre></td></tr></table></figure><h3 id="执行顺序">执行顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Aniaml</span>(<span class="hljs-title class_ inherited__">object</span>):<br>type_name = <span class="hljs-string">&#x27;动物类&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;吃&#x27;</span>,self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 用筷子吃饭&#x27;</span>%self.name)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br>p1 = Person(<span class="hljs-string">&#x27;eagle&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>)<br>p1.eat()<br></code></pre></td></tr></table></figure><h2 id="同时执行类以及父类方法">同时执行类以及父类方法</h2><p>方法一：如果想执行父类的func方法，这个方法并且子类中引用，那么就在子类的方法中写上：父 类.func(对象,其他参数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Aniaml</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    type_name = <span class="hljs-string">&#x27;动物类&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;吃东西&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age,mind</span>):<br>Aniaml.__init__(self,name,sex,age)<br>self.mind = mind<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>Aniaml.eat(<span class="hljs-number">111</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃饭&#x27;</span>%self.name)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br>p1 = Person(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;想吃东西&#x27;</span>)<br>p1.eat()<br><br></code></pre></td></tr></table></figure><p>方法二：利用super，super().func(参数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Aniaml</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    type_name = <span class="hljs-string">&#x27;动物类&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age</span>):<br>        self.name = name<br>        self.age = age<br>        self.sex = sex<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;吃东西&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age,mind</span>):<br><span class="hljs-comment"># super(Person,self).__init__(name,sex,age)</span><br><span class="hljs-built_in">super</span>().__init__(name,sex,age)<br>self.mind = mind<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">super</span>().eat()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 吃饭&#x27;</span>%self.name)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Aniaml</span>):<br><span class="hljs-keyword">pass</span><br><br>p1 = Person(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;想吃东西&#x27;</span>)<br>p1.eat()<br></code></pre></td></tr></table></figure><p>单继承练习题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>self.num = num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.num)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">Base</span>):<br><span class="hljs-keyword">pass</span><br><br>obj = Foo(<span class="hljs-number">123</span>)<br>obj.func1()<br><span class="hljs-comment"># 运⾏的是Base中的func1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num</span>):<br>self.num = num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.num)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">Base</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Foo.func1&quot;</span>,self.num)<br><br>obj = Foo(<span class="hljs-number">123</span>)<br>obj.func1()<br><span class="hljs-comment"># 运⾏的是Foo中的func1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>self.num = num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.num)<br>self.func2()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Base.func2&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">Base</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Foo.func2&quot;</span>)<br><br>obj = Foo(<span class="hljs-number">123</span>)<br>obj.func1()<br><span class="hljs-comment"># func1是Base中的 func2是⼦类中的</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>self.num = num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.num)<br>self.func2()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-number">111</span>, self.num)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">Base</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-number">222</span>, self.num)<br><br>lst = [Base(<span class="hljs-number">1</span>), Base(<span class="hljs-number">2</span>), Foo(<span class="hljs-number">3</span>)]<br><span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> lst:<br>obj.func2()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>self.num = num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self.num)<br>self.func2()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-number">111</span>, self.num)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-title class_ inherited__">Base</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-number">222</span>, self.num)<br><br>lst = [Base(<span class="hljs-number">1</span>), Base(<span class="hljs-number">2</span>), Foo(<span class="hljs-number">3</span>)]<br><span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> lst:<br>obj.func1()<br></code></pre></td></tr></table></figure><h2 id="方法的重写">方法的重写</h2><ul class="lvl-0"><li class="lvl-2"><p>如果在开发中，<strong>父类的方法实现</strong> 和 <strong>子类的方法实现</strong>，<strong>完全不同</strong></p></li><li class="lvl-2"><p>就可以使用 <strong>覆盖</strong> 的方式，<strong>在子类中 重新编写</strong> 父类的方法实现</p></li></ul><blockquote><p>具体的实现方式，就相当于在 <strong>子类中</strong> 定义了一个 <strong>和父类同名的方法并且实现</strong></p></blockquote><p>重写之后，在运行时，<strong>只会调用</strong> 子类中重写的方法，而不再会调用 <strong>父类封装的方法</strong></p><h2 id="对父类方法进行-扩展">对父类方法进行 扩展</h2><ul class="lvl-0"><li class="lvl-2"><p>如果在开发中，子类的方法实现中包含父类的方法实现</p><ul class="lvl-2"><li class="lvl-4">父类原本封装的方法实现 是 子类方法的一部分</li></ul></li><li class="lvl-2"><p>就可以使用扩展的方式</p></li></ul><ol><li class="lvl-3"><p><strong>在子类中 重写</strong> 父类的方法</p></li><li class="lvl-3"><p>在需要的位置使用 <code>super().父类方法</code> 来调用父类方法的执行</p></li><li class="lvl-3"><p>代码其他的位置针对子类的需求，编写 <strong>子类特有的代码实现</strong></p></li></ol><p>关于 super</p><ol><li class="lvl-3"><p>在 Python 中 super 是一个 特殊的类</p></li><li class="lvl-3"><p>super() 就是使用 super 类创建出来的对象</p></li><li class="lvl-3"><p>最常 使用的场景就是在 重写父类方法时，调用 在父类中封装的方法实现</p></li></ol><p>调用父类方法的另外一种方式（知道）</p><blockquote><p>在 Python 2.x 时，如果需要调用父类的方法，还可以使用以下方式：</p></blockquote><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">父类名.方法(<span class="hljs-keyword">self</span>)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>这种方式，目前在 Python 3.x 还支持这种方式</p></li><li class="lvl-2"><p>这种方法 不推荐使用，因为一旦 父类发生变化，方法调用位置的 类名 同样需要修改</p></li></ul><p>提示</p><ul class="lvl-0"><li class="lvl-2"><p>在开发时， 父类名 和 super() 两种方式不要混用</p></li><li class="lvl-2"><p>如果使用当前子类名调用方法，会形成递归调用，出现死循环</p></li></ul><h2 id="父类的-私有属性-和-私有方法">父类的 私有属性 和 私有方法</h2><ul class="lvl-0"><li class="lvl-2"><p>子类对象 不能 在自己的方法内部，直接 访问 父类的 私有属性 或 私有方法</p></li><li class="lvl-2"><p>子类对象 可以通过 父类 的 公有方法 间接 访问到 私有属性 或 私有方法</p></li></ul><ol><li class="lvl-3"><p>子类对象 不能 在自己的方法内部，直接 访问 父类的 私有属性 或 私有方法</p></li><li class="lvl-3"><p>子类对象 可以通过 父类 的 公有方法 间接 访问到 私有属性 或 私有方法</p></li></ol><blockquote><p>私有属性、方法 是对象的隐私，不对外公开，外界 以及 子类 都不能直接访问</p><p>私有属性、方法 通常用于做一些内部的事情</p></blockquote><p><img src="image-20220709211548852.png" alt="示意图"></p><ul class="lvl-0"><li class="lvl-2"><p>B 的对象不能直接访问 __num2 属性</p></li><li class="lvl-2"><p>B 的对象不能在 demo 方法内访问 __num2 属性</p></li><li class="lvl-2"><p>B 的对象可以在 demo 方法内，调用父类的 test 方法</p></li><li class="lvl-2"><p>父类的 test 方法内部，能够访问 __num2 属性和 __test 方法</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num1,num2</span>):<br>        self.num1=num1<br>        self.__num2=num2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        self.__test()<br>        <span class="hljs-built_in">print</span>(self.__num2)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父类公有方法&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父类私有方法&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子类&quot;</span>)<br>b1 =B(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(b1.num1)<br><span class="hljs-comment"># print(b1.__num2)</span><br>b1.test()<br><span class="hljs-comment"># b1.__test()</span><br><span class="hljs-built_in">print</span>(b1.__dict__)<br><span class="hljs-built_in">print</span>(b1._A__num2) <span class="hljs-comment"># 不推荐使用</span><br>b1._A__test() <span class="hljs-comment">#不推荐使用</span><br><br></code></pre></td></tr></table></figure><h1>多继承</h1><p><strong>概念</strong></p><p><strong>子类</strong> 可以拥有 <strong>多个父类</strong>，并且具有 <strong>所有父类</strong> 的 <strong>属性</strong> 和 <strong>方法</strong></p><p>例如：<strong>孩子</strong> 会继承自己 <strong>父亲</strong> 和 <strong>母亲</strong> 的 <strong>特性</strong></p><p><img src="/image-20220710085319316.png" alt="image-20220710085319316"></p><p><strong>语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">子类名</span>(父类名<span class="hljs-number">1</span>, 父类名<span class="hljs-number">2.</span>..)<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><strong>问题的提出</strong></p><p>如果 <strong>不同的父类</strong> 中存在 <strong>同名的方法</strong>，<strong>子类对象</strong> 在调用方法时，会调用 <strong>哪一个父类中</strong>的方法呢？</p><p>提示：<strong>开发时，应该尽量避免这种容易产生混淆的情况！</strong> —— 如果 <strong>父类之间</strong> 存在 <strong>同名的属性或者方法</strong>，应该 <strong>尽量避免</strong>使用多继承</p><p><img src="image-20220710085552103.png" alt="关系图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShenXian</span>: <span class="hljs-comment"># 神仙</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fei</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;神仙都会⻜&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chitao</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;吃蟠桃&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monkey</span>: <span class="hljs-comment"># 猴</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chitao</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猴⼦喜欢吃桃⼦&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SunWukong</span>(ShenXian, Monkey): <span class="hljs-comment"># 孙悟空是神仙, 同时也是⼀只猴 先继承哪个就先执行哪个类的同名方法</span><br><span class="hljs-keyword">pass</span><br><br>sxz = SunWukong() <span class="hljs-comment"># 孙悟空</span><br>sxz.chitao() <span class="hljs-comment"># 会吃桃⼦</span><br>sxz.fei() <span class="hljs-comment"># 会⻜</span><br><br><span class="hljs-built_in">print</span>(SunWukong.__mro__)<br></code></pre></td></tr></table></figure><h2 id="经典类的多继承">经典类的多继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(B, C):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>(D, E):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">G</span>(F, D):<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">H</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(H, G):<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>画图</p><p><img src="image-20220710085843154.png" alt="关系图"></p><p>在经典类中采⽤的是深度优先，遍历⽅案. 什么是深度优先. 就是⼀条路走到头. 然后再回来. 继续找下⼀ 个.</p><p>类的MRO(method resolution order): Foo-&gt; H -&gt; G -&gt; F -&gt; E -&gt; D -&gt; B -&gt; A -&gt; C.</p><h2 id="新式类的多继承">新式类的多继承</h2><h3 id="mro序列">mro序列</h3><p>MRO是一个有序列表L，在类被创建时就计算出来。</p><p>通用计算公式为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mro</span><span class="hljs-params">(Child(Base1，Base2)</span></span>) = <span class="hljs-selector-attr">[ Child ]</span> + <span class="hljs-built_in">merge</span>( <span class="hljs-built_in">mro</span>(Base1), <span class="hljs-built_in">mro</span>(Base2), <span class="hljs-selector-attr">[Base1, Base2]</span> )（其中Child继承自Base1, Base2）<br></code></pre></td></tr></table></figure><p>如果继承至一个基类：class B(A)</p><p>这时B的mro序列为</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mro( B ) = mro( B(A) )<br><span class="hljs-section">= [B] + merge( mro(A) + [A] )</span><br><span class="hljs-section">= [B] + merge( [A] + [A] )</span><br><span class="hljs-section">= [B,A]</span><br></code></pre></td></tr></table></figure><p>如果继承至多个基类：class B(A1, A2, A3 …)</p><p>这时B的mro序列</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mro(B) = mro( B(A1, A2, A3 …) )<br><span class="hljs-section">= [B] + merge( mro(A1), mro(A2), mro(A3) ..., [A1, A2, A3] )</span><br><span class="hljs-section">= ...</span><br></code></pre></td></tr></table></figure><p>计算结果为列表，列表中至少有一个元素即类自己，如上述示例[A1,A2,A3]。merge操作是C3算法的核心。</p><h3 id="表头和表尾">表头和表尾</h3><p>表头：列表的第一个元素</p><p>表尾：列表中表头以外的元素集合（可以为空）</p><p>示例：列表：[A, B, C] 表头是A，表尾是B和C</p><h3 id="列表之间的-操作">列表之间的+操作</h3><p>[A] + [B] = [A, B]</p><p>merge操作示例：</p><p>如计算merge( [E,O], [C,E,F,O], [C] )</p><p>有三个列表 ： ① ② ③</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1</span> <span class="hljs-variable">merge</span>不为空，取出第一个列表列表①的表头<span class="hljs-built_in">E</span>，进行判断<br>各个列表的表尾分别是<span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span>，<span class="hljs-built_in">E</span>在这些表尾的集合中，因而跳过当前当前列表<br><span class="hljs-number">2</span> 取出列表②的表头<span class="hljs-built_in">C</span>，进行判断<br><span class="hljs-built_in">C</span>不在各个列表的集合中，因而将<span class="hljs-built_in">C</span>拿出到<span class="hljs-variable">merge</span>外，并从所有表头删除<br><span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span><br><span class="hljs-number">3</span> 进行下一次新的<span class="hljs-variable">merge</span>操作 <span class="hljs-operator">......</span><br><span class="hljs-operator">---------------------</span><br></code></pre></td></tr></table></figure><p><img src="image-20220710090525745.png" alt="关系图"></p><p>计算mro(A)方式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-variable">A</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span> <span class="hljs-variable">A</span><span class="hljs-punctuation">(</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">)</span><br><br>原式<span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-variable">B</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span><span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span><span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-variable">B</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span> <span class="hljs-variable">B</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">)</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span> <span class="hljs-type">#</span> 多继承<br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span> <span class="hljs-type">#</span> 单继承<span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span> <span class="hljs-type">#</span> 拿出并删除<span class="hljs-built_in">D</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><br>        <br><span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span> <span class="hljs-built_in">C</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">)</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-variable">mro</span><span class="hljs-punctuation">(</span><span class="hljs-variable">F</span><span class="hljs-punctuation">)</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">)</span> <span class="hljs-type">#</span> 跳过<span class="hljs-built_in">O</span>，拿出并删除<br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>        <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><br>        <br>原式<span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span> <span class="hljs-type">#</span> 跳过<span class="hljs-built_in">E</span><br>    <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span> <span class="hljs-type">#</span> 跳过<span class="hljs-built_in">O</span><br>    <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">+</span> <span class="hljs-variable">merge</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>    <span class="hljs-operator">=</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">O</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p><strong>python面向对象的三大特性：继承，封装，多态</strong></p><ol><li class="lvl-3"><p><strong>封装:</strong> 把很多数据封装到⼀个对象中. 把固定功能的代码封装到⼀个代码块, 函数, 对象, 打包成模块. 这都属于封装的思想. 具体的情况具体分析. 比如. 你写了⼀个很⽜B的函数. 那这个也可以被称为封 装. 在⾯向对象思想中. 是把⼀些看似⽆关紧要的内容组合到⼀起统⼀进⾏存储和使⽤. 这就是封装.</p></li><li class="lvl-3"><p><strong>继承:</strong> ⼦类可以⾃动拥有⽗类中除了私有属性外的其他所有内容. 说⽩了, ⼉⼦可以随便⽤爹的东⻄. 但是朋友们, ⼀定要认清楚⼀个事情. 必须先有爹, 后有⼉⼦. 顺序不能乱, 在python中实现继承非常 简单. 在声明类的时候, 在类名后⾯添加⼀个⼩括号,就可以完成继承关系. 那么什么情况可以使⽤继 承呢? 单纯的从代码层⾯上来看. 两个类具有相同的功能或者特征的时候. 可以采⽤继承的形式. 提取 ⼀个⽗类, 这个⽗类中编写着两个类相同的部分. 然后两个类分别取继承这个类就可以了. 这样写的 好处是我们可以避免写很多重复的功能和代码. 如果从语义中去分析的话. 会简单很多. 如果语境中 出现了x是⼀种y. 这时, y是⼀种泛化的概念. x比y更加具体. 那这时x就是y的⼦类. 比如. 猫是⼀种动 物. 猫继承动物. 动物能动. 猫也能动. 这时猫在创建的时候就有了动物的&quot;动&quot;这个属性. 再比如, ⽩骨 精是⼀个妖怪. 妖怪天⽣就有⼀个比较不好的功能叫&quot;吃⼈&quot;, ⽩骨精⼀出⽣就知道如何&quot;吃⼈&quot;. 此时 ⽩骨精继承妖怪.</p></li><li class="lvl-3"><p><strong>多态:</strong> 同⼀个对象, 多种形态. 这个在python中其实是很不容易说明⽩的. 因为我们⼀直在⽤. 只是没 有具体的说. 比如. 我们创建⼀个变量a = 10 , 我们知道此时a是整数类型. 但是我们可以通过程序让a = “hello”, 这时, a⼜变成了字符串类型. 这是我们都知道的. 但是, 我要告诉你的是. 这个就是多态性. 同⼀个变量a可以是多种形态。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python类的空间问题以及类之间的关系</title>
    <link href="/20221001/Python%E7%B1%BB%E7%9A%84%E7%A9%BA%E9%97%B4%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/20221001/Python%E7%B1%BB%E7%9A%84%E7%A9%BA%E9%97%B4%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1>类的空间问题</h1><h2 id="添加对象属性">添加对象属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self,sex</span>):<br>self.sex = sex<br></code></pre></td></tr></table></figure><p>在类外部添加（在类的外部通过万能的点进行类的属性的添加）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self,sex</span>):<br>self.sex = sexa<br><br>obj = A(<span class="hljs-string">&#x27;chensong&#x27;</span>)<br>obj.age = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(obj.__dict__)<br></code></pre></td></tr></table></figure><p>类的内部添加（引用内部的方法，在类的内部添加属性）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self,sex</span>):<br>self.sex = sex<br><br>obj = A(<span class="hljs-string">&#x27;chensong&#x27;</span>)<br>obj.func(<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-built_in">print</span>(obj.__dict__)<br></code></pre></td></tr></table></figure><p>总结：对象的属性不仅可以在init里面添加，还可以在类的其他方法或者类的外面添加。</p><h2 id="添加类的属性">添加类的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self,sex</span>):<br>self.sex = sex<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>A.bbb = self<br>        <br>A.aaa = <span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-comment"># 类的外部添加（使用点进行添加）</span><br><span class="hljs-built_in">print</span>(A.__dict__)<br><br>A.func1(<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-comment"># 类的内部添加（使用类内部的方法进行在内部进行添加）</span><br><span class="hljs-built_in">print</span>(A.__dict__)<br></code></pre></td></tr></table></figure><p>总结：类的属性不仅可以在类内部添加，还可以在类的外部添加</p><h2 id="对象如何找到类的属性">对象如何找到类的属性</h2><p>对象空间</p><ol><li class="lvl-3"><p>产生这个对象空间，并有一个类对象指针</p></li><li class="lvl-3"><p>执行 <strong>init</strong> 方法，给对象封装属性</p></li></ol><p>**对象查找属性的顺序：**先从对象空间找 ------&gt; 类空间找 ------&gt; 父类空间找 -------&gt;…</p><p>**类名查找属性的顺序：**先从本类空间找 -------&gt; 父类空间找--------&gt; …</p><p>上面的顺序都是单向不可逆，类名不可能找到对象的属性。</p><h1>类与类之间的关系</h1><p>类与类中存在以下关系:</p><ol><li class="lvl-3"><p>依赖关系</p></li><li class="lvl-3"><p>关联关系</p></li><li class="lvl-3"><p>组合关系</p></li><li class="lvl-3"><p>聚合关系</p></li><li class="lvl-3"><p>实现关系</p></li><li class="lvl-3"><p>继承关系(类的三大特性之一：继承。)</p></li></ol><h2 id="依赖关系">依赖关系</h2><p>例：将大象装进冰箱，需要两个类, ⼀个是⼤象类, ⼀个是冰箱类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Elphant</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        开门</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">pass</span><br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        关门</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">pass</span><br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Refrigerator</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_door</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;冰箱门打开了&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close_door</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;冰箱门关上了&#x27;</span>)<br></code></pre></td></tr></table></figure><p>将大象类和冰箱类进行依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Elphant</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>self.name = name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>(<span class="hljs-params">self,obj1</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        开门</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(self.name,<span class="hljs-string">&#x27;要开门了&#x27;</span>)<br>        obj1.open_door()<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        关门</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">pass</span><br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Refrigerator</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_door</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>冰箱门打开了&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close_door</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.name&#125;</span>冰箱门关上了&#x27;</span>)<br><br>elphant1 = Elphant(<span class="hljs-string">&#x27;大象&#x27;</span>)<br>haier = Refrigerator(<span class="hljs-string">&#x27;海尔&#x27;</span>)<br>elphant1.<span class="hljs-built_in">open</span>(haier)<br></code></pre></td></tr></table></figure><h2 id="关联-聚合-组合关系">关联,聚合,组合关系</h2><p>其实这三个在代码上写法是⼀样的. 但是, 从含义上是不⼀样的</p><ol><li class="lvl-3"><p>关联关系. 两种事物必须是互相关联的. 但是在某些特殊情况下是可以更改和更换的</p></li><li class="lvl-3"><p>聚合关系. 属于关联关系中的⼀种特例. 侧重点是xxx和xxx聚合成xxx. 各⾃有各⾃的声明周期. 比如电脑. 电脑⾥有CPU, 硬盘, 内存等等. 电脑挂了. CPU还是好的. 还是完整的个体</p></li><li class="lvl-3"><p>组合关系. 属于关联关系中的⼀种特例. 写法上差不多. 组合关系比聚合还要紧密. 比如⼈的⼤脑, ⼼脏, 各个器官. 这些器官组合成⼀个⼈. 这时. ⼈如果挂了. 其他的东⻄也跟着挂了</p></li></ol><p>关联关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boy</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,girlFirend=<span class="hljs-literal">None</span></span>):<br>self.name = name<br>self.girlFriend = girlFirend<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">have_a_dinner</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-keyword">if</span> self.girlFriend:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 和 %s 一起晚饭&#x27;</span>%(self.name,self.girlFriend.name))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;单身狗，吃什么饭&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Girl</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>self.name = name<br>        <br>b = Boy(<span class="hljs-string">&#x27;日天&#x27;</span>)<br>b.have_a_dinner()<br><br>b.girlFriend = Girl(<span class="hljs-string">&#x27;如花&#x27;</span>)<br>b.have_a_dinner()<br><br>gg = Girl(<span class="hljs-string">&#x27;花花&#x27;</span>)<br>bb = Boy(<span class="hljs-string">&#x27;songsong&#x27;</span>,gg)<br>bb.have_a_dinner()<br></code></pre></td></tr></table></figure><p>注意. 此时Boy和Girl两个类之间就是关联关系. 两个类的对象紧密联系着. 其中⼀个没有了. 另⼀个就孤单 的不得了. 关联关系, 其实就是 我需要你. 你也属于我</p><p>学校和老师之间的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,address</span>):<br>self.name = name<br>self.address = address<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,school</span>):<br>        self.name = name<br>        self.school = school<br>        <br>s1 = School(<span class="hljs-string">&#x27;北京校区&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>)<br>s2 = School(<span class="hljs-string">&#x27;上海校区&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>)<br>s3 = School(<span class="hljs-string">&#x27;深圳校区&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>)<br><br>t1 = Teacher(<span class="hljs-string">&#x27;T1&#x27;</span>,s1)<br>t2 = Teacher(<span class="hljs-string">&#x27;T2&#x27;</span>,s2)<br>t3 = Teacher(<span class="hljs-string">&#x27;T3&#x27;</span>,s3)<br><br><span class="hljs-built_in">print</span>(t1.school.name)<br><span class="hljs-built_in">print</span>(t2.school.name)<br><span class="hljs-built_in">print</span>(t3.school.name)<br></code></pre></td></tr></table></figure><p>但是学校也是依赖于老师的，所以老师学校应该互相依赖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,address</span>):<br>        self.name = name<br>        self.address = address<br>        self.teacher_list = []<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">append_teacher</span>(<span class="hljs-params">self,teacher</span>):<br>self.teacher_list.append(teacher)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,school</span>):<br>        self.name = name<br>        self.school = school<br>        <br>s1 = School(<span class="hljs-string">&#x27;北京校区&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>)<br>s2 = School(<span class="hljs-string">&#x27;上海校区&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>)<br>s3 = School(<span class="hljs-string">&#x27;深圳校区&#x27;</span>,<span class="hljs-string">&#x27;深圳&#x27;</span>)<br><br>t1 = Teacher(<span class="hljs-string">&#x27;T1&#x27;</span>,s1)<br>t2 = Teacher(<span class="hljs-string">&#x27;T2&#x27;</span>,s2)<br>t3 = Teacher(<span class="hljs-string">&#x27;T3&#x27;</span>,s3)<br><br>s1.append_teacher(t1.name)<br>s1.append_teacher(t2.name)<br>s1.append_teacher(t3.name)<br><br><span class="hljs-built_in">print</span>(s1.teacher_list)<br></code></pre></td></tr></table></figure><p><strong>组合：将一个类的对象封装到另一个类的对象的属性中，就叫组合</strong></p><p>例：设计一个游戏，让游戏里面的人物互殴</p><p>加上一个武器类，让人使用武器攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gamerole</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,ad,hp,wea=<span class="hljs-literal">None</span></span>):<br>        self.name = name<br>        self.ad = ad<br>        self.hp = hp<br>        self.wea = wea<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self,p1</span>):<br>p1.hp -= self.ad<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s攻击%s,%s掉了%s血,还剩%s&#x27;</span>%(self.name,p1.name,p1.name,self.ad,p1.hp))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">equip_weapon</span>(<span class="hljs-params">self,wea</span>):<br>            self.wea = wea<br>            wea.ad += self.ad<br>            wea.owner_name = self.name<br>            <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,ad,owner_name = <span class="hljs-literal">None</span></span>):<br>        self.name = name<br>        self.owner_name = owner_name<br>        self.ad = ad<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">weapon_attack</span>(<span class="hljs-params">self,p2</span>):<br>        p2.hp = p2.hp - self.ad<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s利用%s攻击了%s，%s还剩%s血(self.owner_name,self.name,p2.name,p2.name,p2.hp))</span><br><span class="hljs-string">        </span><br><span class="hljs-string">man = Gamerole(&#x27;</span>人<span class="hljs-string">&#x27;,10,100)</span><br><span class="hljs-string">dog = Gamerole(&#x27;</span>狗<span class="hljs-string">&#x27;,50,100)</span><br><span class="hljs-string">stick = Weapon(&#x27;</span>木棍<span class="hljs-string">&#x27;,40)</span><br><span class="hljs-string">              </span><br><span class="hljs-string">man.equip_weapon(stick)</span><br><span class="hljs-string">stick.weapon_attack(dog)</span><br><span class="hljs-string"># 人利用木棍攻击了狗，狗还剩50血</span><br></code></pre></td></tr></table></figure><h2 id="案例，循环回合制游戏">案例，循环回合制游戏</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gamerole</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, ad, hp, wea=<span class="hljs-literal">None</span></span>):<br>        self.name = name<br>        self.ad = ad<br>        self.hp = hp<br>        self.wea = wea<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self, p1</span>):<br>        p1.hp -= self.ad<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s攻击%s,%s掉了%s血,还剩%s&#x27;</span> % (self.name, p1.name, p1.name,self.ad, p1.hp))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">equip_weapon</span>(<span class="hljs-params">self, wea</span>):<br>        self.wea = wea<br>        wea.ad += self.ad<br>        wea.owner_name = self.name<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,ad,owner_name = <span class="hljs-literal">None</span></span>):<br>            self.name = name<br>            self.owner_name = owner_name<br>            self.ad = ad<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">weapon_attack</span>(<span class="hljs-params">self,p2</span>):<br>            p2.hp = p2.hp - self.ad<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s利用%s攻击了%s，%s还剩%s血&#x27;</span>%(self.owner_name,self.name,p2.name,p2.name,p2.hp))<br>sunwukong = Gamerole(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-number">500</span>)<br>caocao = Gamerole(<span class="hljs-string">&quot;曹操&quot;</span>, <span class="hljs-number">60</span>, <span class="hljs-number">100</span>)<br>anqila = Gamerole(<span class="hljs-string">&quot;安琪拉&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-number">80</span>)<br><br>baigujing = Gamerole(<span class="hljs-string">&quot;白骨精&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-number">450</span>)<br>guanyu = Gamerole(<span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-number">40</span>, <span class="hljs-number">200</span>)<br>diaochan = Gamerole(<span class="hljs-string">&quot;貂蝉&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">150</span>)<br><br>dongxie_list = [sunwukong, caocao, anqila]xidu_list = [baigujing, guanyu, diaochan]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游戏开始加载&quot;</span>)<br>    <span class="hljs-comment"># 打印一个菜单</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>):<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        char_num = i // <span class="hljs-number">2</span><br>        per_str = <span class="hljs-string">&#x27;\r%s%% : %s&#x27;</span> % (i, <span class="hljs-string">&#x27;*&#x27;</span> * char_num)<br>        <span class="hljs-built_in">print</span>(per_str, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    info = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;游戏加载完毕，输入任意字符开始！&quot;</span>)<br>    <span class="hljs-comment"># 输出东邪吸毒阵营里的任务角色</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;东邪阵营&quot;</span>.center(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;*&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dongxie_list:<br><span class="hljs-built_in">print</span>(i.name.center(<span class="hljs-number">20</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;西毒阵营&quot;</span>.center(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;*&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xidu_list:<br><span class="hljs-built_in">print</span>(i.name.center(<span class="hljs-number">20</span>))<br>        <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 判断游戏结束的条件是某一方全部阵亡</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dongxie_list) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;西毒阵营胜利！！！&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(xidu_list) == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;东邪阵营胜利！&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br>         <span class="hljs-comment"># 游戏逻辑，每次随机选择一名角色出击</span><br>         index1 = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(dongxie_list) - <span class="hljs-number">1</span>)<br>         index2 = random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(xidu_list) - <span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment"># 开始攻击</span><br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        role1 = dongxie_list[index1]<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        role2 = xidu_list[index2]<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        role1.attack(role2)<br>        role2.attack(role1)<br><br>        <span class="hljs-comment"># 判断是否有英雄阵亡</span><br>        <span class="hljs-keyword">if</span> role1.hp &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s阵亡！&quot;</span> % role1.name)<br>            dongxie_list.remove(role1)<br>        <span class="hljs-keyword">if</span> role2.hp &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s阵亡！&quot;</span> % role2.name)<br>            xidu_list.remove(role2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Python面向对象</title>
    <link href="/20221001/%E5%88%9D%E8%AF%86Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/20221001/%E5%88%9D%E8%AF%86Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1>面向对象的基本概念</h1><p>我们之前学习的编程方式就是<strong>面向过程</strong>的</p><p><strong>面向过程</strong>和<strong>面向对象</strong>，是<strong>两种不同的编程方式</strong></p><p>对比<strong>面向过程</strong>的特点，可以更好地了解什么是<strong>面向对象</strong></p><h2 id="过程和函数（科普）">过程和函数（科普）</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>过程</strong> 是早期的一个编程概念</p></li><li class="lvl-2"><p><strong>过程</strong> 类似于函数，只能执行，但是没有返回值</p></li><li class="lvl-2"><p><strong>函数</strong> 不仅能执行，还可以返回结果</p></li></ul><h2 id="面向过程和面向对象-基本概念">面向过程和面向对象 基本概念</h2><h3 id="1-面相过程-——-怎么做？">1) 面相过程 —— 怎么做？</h3><ol><li class="lvl-3"><p>把完成某一个需求的 <strong>所有步骤 从头到尾</strong> 逐步实现</p></li><li class="lvl-3"><p>根据开发需求，将某些 <strong>功能独立</strong> 的代码 <strong>封装</strong> 成一个又一个 <strong>函数</strong></p></li><li class="lvl-3"><p>最后完成的代码，就是顺序地调用 <strong>不同的函数</strong></p></li></ol><p><strong>特点</strong></p><ol><li class="lvl-3"><p>注重 <strong>步骤与过程</strong>，不注重职责分工</p></li><li class="lvl-3"><p>如果需求复杂，代码会变得很复杂</p></li><li class="lvl-3"><p><strong>开发复杂项目，没有固定的套路，开发难度很大！</strong></p></li></ol><p><img src="image-20220709183416415.png" alt="结构图"></p><h3 id="2-面向对象-——-谁来做？">2) 面向对象 —— 谁来做？</h3><blockquote><p>相比较函数，<strong>面向对象</strong> 是 <strong>更大</strong> 的 <strong>封装</strong>，根据 <strong>职责</strong> 在 <strong>一个对象中</strong> <strong>封装 多个方法</strong></p></blockquote><p>在完成某一个需求前，首先确定 <strong>职责 —— 要做的事情（方法）</strong></p><p>根据 <strong>职责</strong> 确定不同的 <strong>对象</strong>，在 <strong>对象</strong> 内部封装不同的 <strong>方法</strong>（多个）</p><p>最后完成的代码，就是顺序地让 <strong>不同的对象</strong> 调用 <strong>不同的方法</strong></p><p>特点</p><ol><li class="lvl-3"><p>注重 <strong>对象和职责</strong>，不同的对象承担不同的职责</p></li><li class="lvl-4"><p>更加适合应对复杂的需求变化，<strong>是专门应对复杂项目开发，提供的固定套路</strong></p></li><li class="lvl-3"><p><strong>需要在面向过程基础上，再学习一些面向对象的语法</strong></p></li></ol><p><img src="image-20220709183733366.png" alt="植物大战僵尸"></p><p><strong>类</strong> 和 <strong>对象</strong> 是 <strong>面向对象编程的 两个 核心概念</strong></p><h2 id="类的概念">类的概念</h2><ul class="lvl-0"><li class="lvl-2"><p>类是对一群具有相同特征或者行为的事物的一个统称，是抽象的，不能直接使用</p><ul class="lvl-2"><li class="lvl-4"><strong>特征</strong> 被称为 <strong>属性</strong></li><li class="lvl-4"><strong>行为</strong> 被称为 <strong>方法</strong></li></ul></li><li class="lvl-2"><p><strong>类</strong> 就相当于制造飞机时的<strong>图纸</strong>，是一个 <strong>模板</strong>，是 <strong>负责创建对象的</strong></p></li></ul><p><img src="image-20220709184001466.png" alt="制造图纸"></p><h2 id="对象的概念">对象的概念</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>对象</strong> 是 <strong>由类创建出来的一个具体存在</strong>，可以直接使用</p></li><li class="lvl-2"><p>由哪一个类创建出来的对象，就拥有在哪一个类中定义的：</p><ul class="lvl-2"><li class="lvl-4">属性</li><li class="lvl-4">方法</li></ul></li><li class="lvl-2"><p><strong>对象</strong> 就相当于用 <strong>图纸 制造</strong> 的飞机</p></li></ul><blockquote><p>在程序开发中，应该 <strong>先有类，再有对象</strong></p></blockquote><p>对象是类具体化的结果</p><h2 id="类和对象的关系">类和对象的关系</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>类是模板，对象</strong> 是根据 <strong>类</strong> 这个模板创建出来的，应该 <strong>先有类，再有对象</strong></p></li><li class="lvl-2"><p>类只有一个，而对象可以有很多个</p><ul class="lvl-2"><li class="lvl-4"><strong>不同的对象</strong> 之间 <strong>属性</strong> 可能会各不相同</li></ul></li><li class="lvl-2"><p><strong>类</strong> 中定义了什么 <strong>属性和方法</strong>，<strong>对象</strong> 中就有什么属性和方法，<strong>不可能多，也不可能少</strong></p></li></ul><h2 id="类的设计">类的设计</h2><p>在使用面相对象开发前，应该首先分析需求，确定一下，程序中需要包含哪些类！</p><p><img src="image-20220709184443770.png" alt="类及其内部"></p><p>在程序开发中，要设计一个类，通常需要满足一下<strong>三个要素：</strong></p><ol><li class="lvl-3"><p><strong>类名</strong> 这类事物的名字，<strong>满足大驼峰命名法</strong></p></li><li class="lvl-3"><p><strong>属性</strong> 这类事物具有什么样的特征</p></li><li class="lvl-3"><p><strong>方法</strong> 这类事物具有什么样的行为</p></li></ol><h3 id="大驼峰命名法">大驼峰命名法</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">CapWords</span><br></code></pre></td></tr></table></figure><ol><li class="lvl-3"><p>每一个单词的首字母大写</p></li><li class="lvl-3"><p>单词与单词之间没有下划线</p></li></ol><h3 id="类名的确定">类名的确定</h3><p><strong>名词提炼法</strong> 分析 <strong>整个业务流程</strong>，出现的 <strong>名词</strong>，通常就是找到的类</p><h3 id="属性和方法的确定">属性和方法的确定</h3><p>对 <strong>对象的特征描述</strong>，通常可以定义成 <strong>属性</strong>（类的本身所具有的特性，叫做属性）</p><p><strong>对象具有的行为</strong>（动词），通常可以定义成 <strong>方法</strong>（用类去定义的的对象所具备的可操作的能力叫做方法）</p><blockquote><p>提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑</p></blockquote><h3 id="练习-1">练习 1</h3><p>需求</p><p><strong>小明</strong> 今年 <strong>18 岁</strong>，身高 <strong>1.75</strong>，每天早上 <strong>跑</strong> 完步，会去 <strong>吃</strong> 东西</p><p>小美 今年 <strong>17 岁</strong>，身高 <strong>1.65</strong>，小美不跑步，小美喜欢 <strong>吃</strong> 东西</p><p><img src="image-20220709185435034.png" alt="示意图"></p><h2 id="类的结构">类的结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    此类主要是构建人类</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span> <span class="hljs-comment"># 第一部分：静态属性 属性 静态变量 静态字段</span><br>    dic = &#123;&#125;<br>    l1 = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 第二部分：方法 函数 动态属性</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;人类会工作&#x27;</span>)<br></code></pre></td></tr></table></figure><p>class 是关键字与def用法相同，定义一个类。</p><p>Human是此类的类名，类名使用驼峰(CamelCase)命名风格，首字母大写，私有类可用一个下划线开头。</p><p>类的结构从大方向来说就分为两部分：</p><ul class="lvl-0"><li class="lvl-2"><p>静态变量</p></li><li class="lvl-2"><p>动态方法</p></li></ul><h1>从类名的角度研究类</h1><h2 id="类名操作静态属性">类名操作静态属性</h2><p><strong>查看类中的所有内容：类名.dict方式。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    dic = &#123;&#125;<br>    l1 = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;会工作&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(Human.__dict__)<br><span class="hljs-built_in">print</span>(Human.__dict__[<span class="hljs-string">&#x27;mind&#x27;</span>])<br>Human.__dict__[<span class="hljs-string">&#x27;mind&#x27;</span>] = <span class="hljs-string">&#x27;高智慧&#x27;</span><br><span class="hljs-built_in">print</span>(Human.__dict__)<br><span class="hljs-comment"># 通过这种方式只能查询，不能增删改</span><br></code></pre></td></tr></table></figure><p><strong>万能的点.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    dic = &#123;&#125;<br>    l1 = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;会工作&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(Human.mind)<br>Human.mind = <span class="hljs-string">&#x27;高智慧&#x27;</span><br><span class="hljs-built_in">print</span>(Human.mind)<br><br><span class="hljs-keyword">del</span> Human.mind<br><span class="hljs-built_in">print</span>(Human.mind)<br>Human.walk = <span class="hljs-string">&#x27;用脚走&#x27;</span><br><span class="hljs-built_in">print</span>(Human.walk)<br><span class="hljs-comment"># 通过万能的点 可以增删改查类中的单个属性</span><br></code></pre></td></tr></table></figure><p><strong>对以上两种做一个总结：如果想查询类中的所有内容，通过 第一种dict方法，如果只是操作单个属性则 用万能的点的方式。</strong></p><h2 id="类名操作动态方法">类名操作动态方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    dic = &#123;&#125;<br>    l1 = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self,<span class="hljs-string">&#x27;会工作&#x27;</span>)<br><br>Human.work(<span class="hljs-string">&#x27;chensong&#x27;</span>)<br>Human.__dict__[<span class="hljs-string">&#x27;work&#x27;</span>](<span class="hljs-string">&#x27;chensong&#x27;</span>)<br></code></pre></td></tr></table></figure><h1>从对象的角度研究类</h1><h2 id="对象">对象</h2><p>对象是从类中出来的，只要是<strong>类名加上()</strong>，这就是一个实例化过程，这个就会实例化一个对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    dic = &#123;&#125;<br>    l1 = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br><span class="hljs-built_in">print</span>(self,<span class="hljs-string">&#x27;会工作&#x27;</span>)<br><br>human1 = Human()<br><span class="hljs-comment"># 只要实例化对象，它会自动执行__init__方法</span><br><span class="hljs-built_in">print</span>(human1)<br></code></pre></td></tr></table></figure><p>其实实例化一个对象总共发生了三件事：</p><ol><li class="lvl-3"><p>在内存中开辟了一个对象空间。</p></li><li class="lvl-3"><p>自动执行类中的init方法，并将这个对象空间（内存地址）传给了init方法的第一个位置参数self。</p></li><li class="lvl-3"><p>在init 方法中通过self给对象空间添加属性。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    walk = <span class="hljs-string">&#x27;用两只腿走&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age,hobby</span>):<br>        self.n = name<br>        self.s = sex<br>        self.a = age<br>        self.h = hobby<br>        <br>obj = Human(<span class="hljs-string">&#x27;chensong&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>，<span class="hljs-string">&#x27;18&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="对象操作对象空间属性">对象操作对象空间属性</h2><p><strong>对象查询对象中所有属性。 对象.<code>__dict__</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    language = <span class="hljs-string">&#x27;实用语言&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age,hobby</span>):<br>    <span class="hljs-comment"># self 和 obj 指向的是同一个内存地址同一个空间，下面就是通过self给这个对象空间封装四个属性。</span><br>        self.n = name<br>        self.s = sex<br>        self.a = age<br>        self.h = hobby<br>        <br>obj = Human(<span class="hljs-string">&#x27;chensong&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-built_in">print</span>(obj.__dict__)<br></code></pre></td></tr></table></figure><p><strong>对象操作对象中的单个属性。 万能的点.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br><br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    language = <span class="hljs-string">&#x27;实用语言&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age,hobby</span>):<br><span class="hljs-comment"># self 和 obj 指向的是同一个内存地址同一个空间，下面就是通过self给这个对象空间封装四个属性。</span><br>    self.n = name<br>    self.s = sex<br>    self.a = age<br>    self.h = hobby<br>    <br>obj = Human(<span class="hljs-string">&#x27;chensong&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-comment"># 添加属性</span><br>obj.job = <span class="hljs-string">&#x27;IT&#x27;</span><br><span class="hljs-comment"># 删除属性</span><br><span class="hljs-keyword">del</span> obj.n<br><span class="hljs-comment"># 修改属性</span><br>obj.s = <span class="hljs-string">&#x27;女&#x27;</span><br><span class="hljs-built_in">print</span>(obj.s)<br><span class="hljs-comment"># 查看属性</span><br><span class="hljs-built_in">print</span>(obj.__dict__)<br></code></pre></td></tr></table></figure><h2 id="对象查看类中的属性">对象查看类中的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Human</span>:<br><br>    mind = <span class="hljs-string">&#x27;有思想&#x27;</span><br>    language = <span class="hljs-string">&#x27;实用语言&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,sex,age,hobby</span>):<br><span class="hljs-comment"># self 和 obj 指向的是同一个内存地址同一个空间，下面就是通过self给这个对象空间封装四个属性。</span><br>    self.n = name<br>    self.s = sex<br>    self.a = age<br>    self.h = hobby<br>    <br>obj = Human(<span class="hljs-string">&#x27;chensong&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-built_in">print</span>(obj.mind)<br><span class="hljs-built_in">print</span>(obj.language)<br>obj.a = <span class="hljs-number">666</span><br><span class="hljs-built_in">print</span>(obj.a)<br></code></pre></td></tr></table></figure><p><strong>类中的方法一般都是通过对象执行的（出去类方法，静态方法外），并且对象执行这些方法都会自动将 对象空间传给方法中的第一个参数self.</strong></p><p>self其实就是类中方法（函数）的第一个位置参数，只不过解释器会自动将调用这个函数的对象传给 self。所以咱们把类中的方法的第一个参数约定俗成设置成self, 代表这个就是对象。</p><p><strong>一个类可以实例化多个对象</strong></p><h1>类的内置函数</h1><table><thead><tr><th>序号</th><th>方法名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td><code>__new__</code></td><td>方法</td><td><strong>创建对象</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td>02</td><td><code>__init__</code></td><td>方法</td><td><strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td>03</td><td><code>__del__</code></td><td>方法</td><td><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td></tr><tr><td>04</td><td><code>__str__</code></td><td>方法</td><td>返回<strong>对象的描述信息</strong>， print 函数输出使用</td></tr><tr><td>05</td><td><code>__dir__</code></td><td>方法</td><td>查看对象内的<strong>所有属性以及方法</strong></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python垃圾回收机制</title>
    <link href="/20221001/Python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/20221001/Python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1>总概括</h1><p>如果将应用程序比作人的身体：所有你所写的那些优雅的代码，业务逻辑，算法，应该就是大脑。垃圾 回收就是应用程序就是相当于人体的腰子，过滤血液中的杂质垃圾，没有腰子，人就会得尿毒症，垃圾 回收器为你的应该程序提供内存和对象。如果垃圾回收器停止工作或运行迟缓,像尿毒症,你的应用程序效 率也会下降，直至最终崩溃坏死。</p><p>在C/C++中采用<strong>用户自己管理维护内存的方式</strong>。自己管理内存极其自由，可以任意申请内存，但也为大 量内存泄露、悬空指针等bug埋下隐患。</p><p>因此在现在的高级语言（java、C#等）都采用了垃圾收集机制。python也采用了垃圾收集机制。</p><p>Python的垃圾回收机制到底是什么回事？从网上找到一大堆的文档，看的也是一知半解，最终就学会了 一句话</p><p><strong>引用计数器为主、分代回收和标记清除为辅</strong></p><p>但是实际上其内部原理还是有很多复杂地方的。</p><p>引用计数器为主</p><p>标记清除和分代回收为辅+缓存机制</p><h1>一、引用计数器</h1><h2 id="1-1环状的双向链表-Refchain">1.1环状的双向链表(Refchain)</h2><p><img src="image-20220708210741968.png" alt="Refchain"></p><p>在python程序中，创建的任何对象都会放在refchain的双向链表中</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;小猪佩奇&quot;</span> <span class="hljs-comment"># 字符串对象</span><br>age = <span class="hljs-number">18</span> <span class="hljs-comment"># 整型对象</span><br>hobby = [<span class="hljs-string">&quot;吸烟&quot;</span>,<span class="hljs-string">&quot;喝酒&quot;</span>,<span class="hljs-string">&quot;烫头&quot;</span>] <span class="hljs-comment"># 列表对象</span><br></code></pre></td></tr></table></figure><p>这些对象都会放到这些双向链表当中，也就是帮忙维护了python中所有的对象。 也就是说如果你得到了refchain,也就得到了python程序中的所有对象。</p><h2 id="1-2不同类型对象的存放形式">1.2不同类型对象的存放形式</h2><p>刚刚提到了<strong>所有的对象都存放在环状的双向链表</strong>中，而不同类型的对象存放在双向链表中既有一些<strong>共性特征</strong>也有一些<strong>不同特征</strong>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># name = &quot;小猪佩奇&quot;</span><br><span class="hljs-comment"># 创建这个对象时，内部会创建一些数据，并且打包在一起</span><br><span class="hljs-comment"># 哪些数据：【指向上一个对象的指针、指向下一个对象的指针、类型(这里为字符串)、引用的个数】</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">引用的个数:</span><br><span class="hljs-string"></span><br><span class="hljs-string">比如 name = &#x27;小猪佩奇&#x27; ,会给“小猪佩奇”开辟一个内存空间用来存放到双向链表中。</span><br><span class="hljs-string">这时候如果有 new = name，不会创建两个“小猪佩奇”，而是将new指向之前的那个小猪佩奇，</span><br><span class="hljs-string">而引用的个数变为2，也就是&quot;小猪佩奇&quot;这个对象被引用了两次。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>相同点</strong>：刚刚讲到的四个种数据每个对象都包含有。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 内部会创建一些数据，【指向上一个对象的指针、指向下一个对象的指针、类型、引用的个数】</span><br>age = <span class="hljs-number">18</span> <span class="hljs-comment"># 整型对象</span><br><span class="hljs-comment"># 内部会创建一些数据，【指向上一个对象的指针、指向下一个对象的指针、类型、引用的个数】</span><br>hobby = [<span class="hljs-string">&quot;吸烟&quot;</span>,<span class="hljs-string">&quot;喝酒&quot;</span>,<span class="hljs-string">&quot;烫头&quot;</span>] <span class="hljs-comment"># 列表对象</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>不同点：不同的数据类型还会创建不同的值：</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 内部会创建一些数据，【指向上一个对象的指针、指向下一个对象的指针、类型、引用的个数、</span><br><span class="hljs-attr">val</span>=<span class="hljs-number">18</span><br><span class="hljs-attr">age</span> = <span class="hljs-number">18</span> <span class="hljs-comment"># 整型对象</span><br><br><span class="hljs-comment"># 内部会创建一些数据，【指向上一个对象的指针、指向下一个对象的指针、类型、引用的个数、</span><br><span class="hljs-attr">items</span>=元素、元素的个数】<br><span class="hljs-attr">hobby</span> = [<span class="hljs-string">&quot;抽烟&quot;</span>,<span class="hljs-string">&quot;喝酒&quot;</span>,<span class="hljs-string">&quot;烫头&quot;</span>] <span class="hljs-comment"># 列表对象</span><br></code></pre></td></tr></table></figure><p>所以在python中创建的对象会加到环形双向链表中，但是每一种类型的数据对象在存到链表中时，所存 放的数据个数可能是不同的（有相同点有不同点）。</p><h3 id="两个重要的结构体">两个重要的结构体</h3><p>Python解释器由c语言开发完成，py中所有的操作最终都由底层的c语言来实现并完成，所以想要了解底 层内存管理需要结合python源码来进行解释。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PyObject_HEAD PyObject ob_base ;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PyObject_VAR_HEAD PyVarObject ob_base;</span><br><span class="hljs-comment">//宏定义，包含上一个、下一个，用于构造双向链表用。(放到refchain链表中时，要用到)</span><br><br>#define_PyObject_HEAD_EXTRA \<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> *_<span class="hljs-title">ob_next</span>;</span> \<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> *_<span class="hljs-title">ob_prev</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> &#123;</span><br>_PyObject_HEAD_EXTRA <span class="hljs-comment">//用于构造双向链表</span><br>Py_ssize_t ob_refcnt; <span class="hljs-comment">//引用计数器</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">typeobject</span> *<span class="hljs-title">ob_type</span>;</span> <span class="hljs-comment">//数据类型</span><br>&#125; PyObject;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>PyObject ob_base; <span class="hljs-comment">// PyObject对象</span><br>Py_ssize_t ob_size; <span class="hljs-comment">/* Number of items in variable part, 即:元素个数*/</span><br>&#125; PyVarObject;<br></code></pre></td></tr></table></figure><p>在C源码中如何体现每个对象中都有的相同的值：PyObject结构体（4个值：ob_next、ob_prev、 ob_refcnt、*ob_type）</p><p>9-13行 定义了一个结构体，第10行实际上就是6，7两行，用来存放前一个对象，和后一个对象的位置。</p><p>这个结构体可以存贮四个值（这四个值是对象都具有的）。</p><p>在C源码中如何体现由多个元素组成的对象：PyObject + ob_size(元素个数)</p><p>15-18行又定义了一个结构体，第16行相当于代指了9-13行中的四个数据。</p><p>而17行又多了一个数据字段，叫做元素个数，这个结构体。</p><p>以上源码是Python内存管理中的基石，其中包含了：</p><ul class="lvl-0"><li class="lvl-2"><p>2个结构体</p></li><li class="lvl-2"><p>PyObject，此结构体中包含3个元素。</p><ul class="lvl-2"><li class="lvl-4">PyObject_HEAD_EXTRA，用于构造双向链表。</li><li class="lvl-4">ob_refcnt，引用计数器。</li><li class="lvl-4">*ob_type，数据类型。</li></ul></li><li class="lvl-2"><p>PyVarObject，次结构体中包含4个元素（ob_base中包含3个元素）</p><ul class="lvl-2"><li class="lvl-4">ob_base，PyObject结构体对象，即：包含PyObject结构体中的三个元素。</li><li class="lvl-4">ob_size，内部元素个数。</li></ul></li></ul><h3 id="类型封装的结构体">类型封装的结构体</h3><p>在我们了解了这两个结构体，现在我们来看看每一个数据类型都封装了哪些值：</p><ul class="lvl-0"><li class="lvl-2"><p>flaot类型</p></li><li class="lvl-2"><p>float结构体：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>PyObject_HEAD # 这里相当于代表基础的<span class="hljs-number">4</span>个值<br><span class="hljs-type">double</span> ob_fval;<br>&#125; PyFloatObject;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">data = <span class="hljs-number">3.14</span><br><br>内部会创建：<br>    _ob_next = refchain中的上一个对象<br>    _ob_prev = refchain中的后一个对象<br>    ob_refcnt = <span class="hljs-number">1</span> 引用个数<br>    ob_type= <span class="hljs-type">float</span> 数据类型<br>    ob_fval = <span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>int类型</p></li><li class="lvl-2"><p>int结构体：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">longobject</span> &#123;</span><br>PyObject_VAR_HEAD<br>digit ob_digit[<span class="hljs-number">1</span>];<br>&#125;;<br><br><span class="hljs-comment">// longobject.h</span><br><br><span class="hljs-comment">/* Long (arbitrary precision) integer object interface */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">longobject</span> <span class="hljs-title">PyLongObject</span>;</span> <span class="hljs-comment">/* Revealed in longintrepr.h */</span><br></code></pre></td></tr></table></figure><p>道理都是相同的，第2行代指第二个重要的结构体，第三行是int形特有的值，总结下来就是这个结构体 中有几个值，那么创建这个类型对象的时候内部就会创建几个值。</p><ul class="lvl-0"><li class="lvl-2"><p>list类型</p></li><li class="lvl-2"><p>list结构体：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>PyObject_VAR_HEAD<br><br>    <span class="hljs-comment">/* Vector of pointers to list elements. list[0] is ob_item[0], etc. */</span><br>    PyObject **ob_item;<br><br>    <span class="hljs-comment">/* ob_item contains space for &#x27;allocated&#x27; elements. The number</span><br><span class="hljs-comment">    * currently in use is ob_size.</span><br><span class="hljs-comment">    * Invariants:</span><br><span class="hljs-comment">    * 0 &lt;= ob_size &lt;= allocated</span><br><span class="hljs-comment">    * len(list) == ob_size</span><br><span class="hljs-comment">    * ob_item == NULL implies ob_size == allocated == 0</span><br><span class="hljs-comment">    * list.sort() temporarily sets allocated to -1 to detect mutations.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * Items must normally not be NULL, except during construction when</span><br><span class="hljs-comment">    * the list is not yet visible outside the function that builds it.</span><br><span class="hljs-comment">    */</span><br>    Py_ssize_t allocated;<br>    &#125; PyListObject;<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>tuple类型</p></li><li class="lvl-2"><p>tuple结构体:</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    PyObject_VAR_HEAD<br>    PyObject *ob_item[<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">/* ob_item contains space for &#x27;ob_size&#x27; elements.</span><br><span class="hljs-comment">    * Items must normally not be NULL, except during construction when</span><br><span class="hljs-comment">    * the tuple is not yet visible outside the function that builds it.</span><br><span class="hljs-comment">    */</span><br>&#125; PyTupleObject;<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>dict类型</p></li><li class="lvl-2"><p>dict结构体:</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    PyObject_HEAD<br>    Py_ssize_t ma_used;<br>    PyDictKeysObject *ma_keys;<br>    PyObject **ma_values;<br>&#125; PyDictObject;<br></code></pre></td></tr></table></figure><p>到这里我们就学到了什么是环状双向链表，以及双向链表中存放的每一种数据类型的对象都是怎样的。</p><h2 id="1-3引用计数器">1.3引用计数器</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v1</span> = <span class="hljs-number">3</span>.<span class="hljs-number">14</span><br><span class="hljs-attribute">v2</span> = <span class="hljs-number">999</span><br><span class="hljs-attribute">v3</span> = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>计数器指的就是一个变量，在相同的命名空间内使用的次数，原本调用一次，计数器为1，再次被调用则计数器加1</p><h3 id="计数器减小">计数器减小</h3><p>当发生以下四种情况的时候，该对象的引用计数器+1：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">a=14 <span class="hljs-comment"># 对象被创建</span><br>b=a <span class="hljs-comment"># 对象被引用</span><br>func(a) <span class="hljs-comment"># 对象被作为参数,传到函数中</span><br>List=[a,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,2] <span class="hljs-comment"># 对象作为一个元素，存储在容器中</span><br>b = 9999 <span class="hljs-comment"># 引用计数器的值为1</span><br>c = b <span class="hljs-comment"># 引用计数器的值为2</span><br></code></pre></td></tr></table></figure><h3 id="计数器减小-2">计数器减小</h3><p>当发生以下四种情况时，该对象的引用计数器-1</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">当该对象的别名被显式销毁时 del <span class="hljs-keyword">a</span><br>当该对象的引别名被赋予新的对象， <span class="hljs-keyword">a</span>=<span class="hljs-number">26</span><br>一个对象离开它的作用域，例如 func函数执行完毕时，函数里面的局部变量的引用计数器就会减一（但<br>是全局变量不会）<br>将该元素从容器中删除时，或者容器被销毁时。<br><span class="hljs-keyword">a</span> = <span class="hljs-number">999</span><br>b = <span class="hljs-keyword">a</span> <span class="hljs-comment"># 当前计数器为2</span><br>del b <span class="hljs-comment"># 删除变量b：b对应的对象的引用计数器-1 （此时计数器为1）</span><br>del <span class="hljs-keyword">a</span> <span class="hljs-comment"># 删除变量a：a对应的对象的引用计数器-1 (此时引用计数器为0)</span><br><br>当引用计数器为<span class="hljs-number">0</span> 时，意味着没有人再使用这个对象，这个对象就变成垃圾，垃圾回收。<br>回收：<span class="hljs-number">1.</span>对象从refchain的链表移除。<br><span class="hljs-number">2.</span>将对象进行销毁，内存归还给操作系统，可用内存就增加。<br></code></pre></td></tr></table></figure><p>当引用计数器为0 时，意味着没有人再使用这个对象，这个对象就变成垃圾，垃圾回收。</p><p>回收：</p><ol><li class="lvl-3"><p>对象从refchain的链表移除。</p></li><li class="lvl-3"><p>将对象进行销毁，内存归还给操作系统，可用内存就增加。</p></li></ol><p>以上就是引用计数器大体上的机制，但是后面的缓存机制学习完之后我们才会进一步理解，这里不是简 单的说计数器等于0就销毁，内部还有一定的缓冲，目前就简单理解成计数器为0，我们就进行垃圾回收。</p><p>例子</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-string">&quot;雷霆嘎巴&quot;</span> <span class="hljs-comment"># 创建对象并初始话引用计数器为1</span><br><span class="hljs-attr">b</span> = a <span class="hljs-comment"># 计数器发生变化</span><br><span class="hljs-attr">c</span> = a<br><span class="hljs-attr">d</span> = a<br><span class="hljs-attr">e</span> = a<br><br><span class="hljs-attr">f</span> = <span class="hljs-string">&quot;小猪佩奇&quot;</span> <span class="hljs-comment"># 创建对象并初始话引用计数器为1</span><br></code></pre></td></tr></table></figure><p><img src="image-20220708213627115.png" alt="例程的示意图"></p><p>当我们将&quot;雷霆嘎巴&quot;的对象的引用计数器减小至0时，就将其移除，并且相邻两边直接连接。</p><h2 id="1-4循环引用问题">1.4循环引用问题</h2><p>一种编程语言利用引用计数器实现垃圾管理和回收，已经是比较完美的了，只要计数器为0就回收，不为 0就不回收，即简单明了，又能实现垃圾管理。</p><p>一种编程语言利用引用计数器实现垃圾管理和回收，已经是比较完美的了，只要计数器为0就回收，不为 0就不回收，即简单明了，又能实现垃圾管理。</p><p>例子：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">v1</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] # refchain中创建一个列表对象，由于<span class="hljs-built_in">v1</span>=对象，所以列表引对象引用计数<br>器为<span class="hljs-number">1</span>.<br><span class="hljs-symbol">v2</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>] # refchain中再创建一个列表对象，因<span class="hljs-built_in">v2</span>=对象，所以列表对象引用计数器<br>为<span class="hljs-number">1</span>.<br><span class="hljs-symbol">v1.append</span>(<span class="hljs-built_in">v2</span>) # 把<span class="hljs-built_in">v2</span>追加到<span class="hljs-built_in">v1</span>中，则<span class="hljs-built_in">v2</span>对应的[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]对象的引用计数器加<span class="hljs-number">1</span>，最终为<span class="hljs-number">2</span>.<br><span class="hljs-symbol">v2.append</span>(<span class="hljs-built_in">v1</span>) # 把<span class="hljs-built_in">v1</span>追加到<span class="hljs-built_in">v1</span>中，则<span class="hljs-built_in">v1</span>对应的[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]对象的引用计数器加<span class="hljs-number">1</span>，最终为<span class="hljs-number">2</span>.<br><br><span class="hljs-symbol">del</span> <span class="hljs-built_in">v1</span> # 引用计数器-<span class="hljs-number">1</span><br><span class="hljs-symbol">del</span> <span class="hljs-built_in">v2</span> # 引用计数器-<span class="hljs-number">1</span><br><br>最终<span class="hljs-built_in">v1</span>,<span class="hljs-built_in">v2</span>引用计数器都是<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>其实就是因为两个容器相互引用，无中生有，两个空的，引用后本来也应该是空的，但是计数器不存在空的情况，所以导致出现bug</p><p>两个引用计数器现在都是1，那么它们都不是垃圾所以都不会被回收，但如果是这样的话，我们的代码就 会出现问题。</p><p>我们删除了v1和v2，那么就没有任何变量指向这两个列表，那么这两个列表之后程序运行的时候都无法 再使用，但是这两个列表的引用计数器都不为0，所以不会被当成垃圾进行回收，所以这两个列表就会一 直存在在我们的内存中，永远不会销毁，当这种代码越来越多时，我们的程序一直运行，内存就会一点 一点被消耗，然后内存变满，满了之后就爆栈了。这时候如果重新启动程序或者电脑，这时候程序又会 正常运行，其实这就是因为循环引用导致数据没有被及时的销毁导致了内存泄漏。</p><h2 id="1-5总结">1.5总结</h2><h3 id="优点">优点</h3><ul class="lvl-0"><li class="lvl-2"><p>简单</p></li><li class="lvl-2"><p>实时性：一旦没有引用，内存就直接释放了。 不用像其他机制等到特定时机。实时性还带来一个好处：处理回收内存的时间分摊到了平时</p></li></ul><h3 id="缺点">缺点</h3><ul class="lvl-0"><li class="lvl-2"><p>维护引用计数消耗资源</p></li><li class="lvl-2"><p>循环引用：对于如今的强大硬件，缺点1尚可接受，但是循环引用导致内存泄露，注定python还将引入新的回收机制（标记清除和分代收集）。</p></li></ul><h1>二、标记清除</h1><h2 id="2-1引入目的">2.1引入目的</h2><p>为了解决循环引用的不足，python的底层不会单单只用引用计数器，引入了一个机制叫做标记清除</p><h2 id="2-2实现原理">2.2实现原理</h2><p>在python的底层中，再去维护一个链表，这个链表中专门放那些可能存在循环引用的对象。</p><p>就是那些元素里面可以存放其他元素的元素。（list/dict/tuple/set，甚至class）</p><p>例如：</p><p><img src="image-20220708214702886.png" alt="例程"></p><p>第二个链表 <strong>只存储可能是循环引用的对象</strong>。</p><p>维护两个链表的作用是，在python内部某种情况下，会去扫描 可能存在循环引用的链表 中的每个元素， 在循环一个列表的元素时，由于内部还有子元素 ，如果存在循环引用(v1 = [1,2,3,v2]和v2 = [4,5,6,v1])， 比如从v1的子元素中找到了v2，又从v2的子元素中找到了v1，那么就检查到循环引用，如果有循环引 用，就让双方的引用计数器各自-1，如果是0则垃圾回收。</p><h2 id="2-3标记清除算法">2.3标记清除算法</h2><p>【标记清除（Mark—Sweep）】算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它 分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标 记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p><p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成 这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标 记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p><p><img src="image-20220708214808049.png" alt="标记清除法示意图"></p><p>在上图中，我们把小黑点视为全局变量，也就是把它作为root object，从小黑点出发，对象1可直达， 那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5 是非活动对象会被GC回收。</p><ol><li class="lvl-3"><p>寻找跟对象（root object）的集合作为垃圾检测动作的起点，跟对象也就是一些全局引用和函数栈 中的引用，这些引用所指向的对象是不可被删除的。</p></li><li class="lvl-3"><p>从root object集合出发，沿着root object集合中的每一个引用，如果能够到达某个对象，则说明这 个对象是可达的，那么就不会被删除，这个过程就是垃圾检测阶段。</p></li><li class="lvl-3"><p>当检测阶段结束以后，所有的对象就分成可达和不可达两部分，所有的可达对象都进行保留，其它 的不可达对象所占用的内存将会被回收，这就是垃圾回收阶段。（底层采用的是链表将这些集合的 对象连接在一起）。</p></li></ol><h1>三、分代回收</h1><h2 id="3-1引入目的">3.1引入目的</h2><ul class="lvl-0"><li class="lvl-2"><p>什么时候扫描去检测循环引用？</p></li><li class="lvl-2"><p>标记和清除的过程效率不高。清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分 活动对象也要扫描所有对象。</p></li></ul><p>为了解决这些问题，python引入了分代回收</p><h2 id="3-2原理">3.2原理</h2><p>将第二个链表（可能存在循环引用的链表），维护成3个环状双向的链表：</p><ul class="lvl-0"><li class="lvl-2"><p>0代： 0代中对象个数达到700个，扫描一次。</p></li><li class="lvl-2"><p>1代： 0代扫描10次，则1代扫描1次</p></li><li class="lvl-2"><p>2代： 1代扫描10次，则2代扫描1次。</p></li></ul><p><img src="image-20220708215118291.png" alt="示意图"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 分代的C源码</span><br><span class="language-xml">#define NUM_GENERATIONS 3</span><br><span class="language-xml">struct gc_generation generations[NUM_GENERATIONS] = &#123;</span><br><span class="language-xml">/* PyGC_Head, threshold, count */</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">0</span>), (<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">0</span>)&#125;, <span class="hljs-number">700</span>, <span class="hljs-number">0</span>&#125;, //</span><br><span class="hljs-template-variable"><span class="hljs-number">0</span>代</span><br><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">1</span>), (<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">1</span>)&#125;, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>&#125;, //</span><br><span class="hljs-template-variable"><span class="hljs-number">1</span>代</span><br><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">2</span>), (<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">2</span>)&#125;, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>&#125;, //</span><br><span class="hljs-template-variable"><span class="hljs-number">2</span>代</span><br><span class="hljs-template-variable">&#125;;</span><br></code></pre></td></tr></table></figure><p>例：</p><p><img src="image-20220708215208695.png" alt="环形双向链表"></p><ul class="lvl-0"><li class="lvl-2"><p>当我们创建一个对象val = 19,那么它只会加到refchain链表中。</p></li><li class="lvl-2"><p>当我们创建一个对象v1 = [11,22],除了加到refchain，那么它会加到0代链表中去。</p></li><li class="lvl-2"><p>如果再创建一个对象v2 = [33,44],那么它还是往0代添加。</p></li></ul><p>直到0代中的个数达到700之后，就会对0代中的所有元素进行一次扫描，扫描时如果检测出是循环引用 那么引用计数器就自动-1，然后判断引用计数器是否为0，如果为0，则为垃圾就进行回收。不是垃圾的 话，就对该数据进行升级，从0代升级到1代，这个时候0代就是空，1代就会记录一下0代已经扫描1次， 然后再往0代中添加对象直到700再进行一次扫描，不停反复，直到0代扫描了10次，才会对1代进行1次扫描。</p><p>分代回收解决了标记清楚时什么时候扫描的问题，并且将扫描的对象分成了3级，以及降低扫描的工作 量，提高效率</p><h2 id="3-3弱代假说">3.3弱代假说</h2><p>为什么要按一定要求进行分代扫描？</p><p>这种算法的根源来自于弱代假说(weak generational hypothesis)。</p><p>这个假说由两个观点构成：<strong>首先是年轻的对象通常死得也快，而老对象则很有可能存活更长的时间</strong></p><p>假定现在我用Python创建一个新对象 n1=“ABC”</p><p>根据假说，我的代码很可能仅仅会使用ABC很短的时间。这个对象也许仅仅只是一个方法中的中间结 果，并且随着方法的返回这个对象就将变成垃圾了。大部分的新对象都是如此般地很快变成垃圾。然而，偶尔程序会创建一些很重要的，存活时间比较长的对象，例如web应用中的session变量或是配置项。</p><p>频繁的处理零代链表中的新对象，可以将让Python的垃圾收集器把时间花在更有意义的地方：它处理那些很快就可能变成垃圾的新对象。同时只在很少的时候，当满足一定的条件，收集器才回去处理那些老变量</p><h1>四、总结</h1><p>在python中维护了refchain的双向环状链表，这个链表中存储创建的所有对象，而每种类型的对象中， 都有一个ob_refcnt引用计数器的值，它维护者引用的个数+1,-1,最后当引用计数器变为0时，则进行垃圾回收（对象销毁、refchain中移除）。</p><p>但是，在python中对于那些可以有多个元素组成的对象，可能会存在循环引用的问题，并且为了解决这 个问题，python又引入了标记清除和分代回收，在其内部维护了4个链表，分别是：</p><ul class="lvl-0"><li class="lvl-2"><p>refchain</p></li><li class="lvl-2"><p>2代，10次</p></li><li class="lvl-2"><p>1代，10次</p></li><li class="lvl-2"><p>0代，700个</p></li></ul><p>在源码内部，当达到各自的条件阈值时，就会触发扫描链表进行标记清除的动作（如果有循环引 用，引用计数器就各自-1）。</p><p>但是，源码内部在上述的流程中提出了优化机制，就是缓存机制。</p><h1>五、缓存机制</h1><p>缓存在python中分为两大类</p><h2 id="5-1池">5.1池</h2><p>在python中为了避免重复创建和销毁一些常见对象，维护池。</p><p>例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">v1</span> = <span class="hljs-number">7</span><br><span class="hljs-attr">v2</span> = <span class="hljs-number">9</span><br><span class="hljs-attr">v3</span> = <span class="hljs-number">9</span><br><br><span class="hljs-comment"># 按理说在python中会创建3个对象，都加入refchain中。</span><br></code></pre></td></tr></table></figure><p>然而python在启动解释器时，python认为-5、-4、…… 、256，bool、一定规则的字符串，这些值都是 常用的值，所以就会在内存中帮你先把这些值先创建好，接下来进行验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动解释器时，python内部帮我们创建-5、-4、...255、256的整数和一定规则的字符串</span><br>v1 = 9 <span class="hljs-comment"># 内部不会开辟内存，直接去池中获取</span><br>v2 = 9 <span class="hljs-comment"># 同上，都是去数据池里直接拿9，所以v1和v2指向的内存地址是一样的</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(v1),<span class="hljs-built_in">id</span>(v2))<br><br>v3 = 256 <span class="hljs-comment"># 内部不会开辟内存，直接去池中获取</span><br>v4 = 256 <span class="hljs-comment"># 同上，都是去数据池里直接拿256，所以v3和v4指向的内存地址是一样的</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(v3),<span class="hljs-built_in">id</span>(4))<br><br>v5 = 257<br>v6 = 257<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(v5),<span class="hljs-built_in">id</span>(v6))<br></code></pre></td></tr></table></figure><p>排查原因：版本不同，小数据池扩大。</p><p>在交互模式下返回得结果符合预期，文件模式的情况下</p><p>问题：为什么交互模式和命令模式结果有区别？</p><p>答：因为代码块的缓存机制。</p><ul class="lvl-0"><li class="lvl-2"><p>什么是代码块？</p></li></ul><p>一个模块、一个函数、一个类、一个文件等都是一个代码块；交互式命令下，一行就是一个代码块。</p><ul class="lvl-0"><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">同一个代码块内的缓存机制（字符串驻留机制）</li><li class="lvl-4">机制内容：Python在执行同一个代码块的初始化对象的命令时，会检查是否其值是否已经存 在，如果存在，会将其重用，即将两个变量指向同一个对象。换句话说：执行同一个代码块 时，遇到初始化对象的命令时，他会将初始化的这个变量与值存储在一个字典中，在遇到新的 变量时，会先在字典中查询记录，如果有同样的记录那么它会重复使用这个字典中的之前的这 个值。所以在用命令模式执行时（同一个代码块）会把i1、i2两个变量指向同一个对象，满足 缓存机制则他们在内存中只存在一个，即：id相同。</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">适用对象： int（float），str，bool。</li><li class="lvl-4">对象的具体细则：（了解）</li><li class="lvl-4">int(float)：任何数字在同一代码块下都会复用。</li><li class="lvl-4">bool：True和False在字典中会以1，0方式存在，并且复用。</li><li class="lvl-4">str：几乎所有的字符串都会符合字符串驻留机制</li></ul></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 同一个代码块内的缓存机制————任何数字在同一代码块下都会复用</span><br>i1 = 1000<br>i2 = 1000<br><span class="hljs-built_in">print</span>(id(i1))<br><span class="hljs-built_in">print</span>(id(i2))<br>输出结果：<br><br><br><br><span class="hljs-comment"># 同一个代码块内的缓存机制————几乎所有的字符串都会符合缓存机制</span><br>s1 = <span class="hljs-string">&#x27;hfdjka6757fdslslgaj@!#fkdjlsafjdskl;fjds中国&#x27;</span><br>s2 = <span class="hljs-string">&#x27;hfdjka6757fdslslgaj@!#fkdjlsafjdskl;fjds中国&#x27;</span><br><span class="hljs-built_in">print</span>(id(s1))<br><span class="hljs-built_in">print</span>(id(s2))<br>输出结果：<br><br><br><br><span class="hljs-comment"># 同一个代码块内的缓存机制————非数字、str、bool类型数据，指向的内存地址一定不同</span><br>t1 = (1,2,3)<br>t2 = (1,2,3)<br>l1 = [1,2,3]<br>l2 = [1,2,3]<br><span class="hljs-built_in">print</span>(id(t1))<br><span class="hljs-built_in">print</span>(id(t2))<br><span class="hljs-built_in">print</span>(id(l1))<br><span class="hljs-built_in">print</span>(id(l2))<br>输出结果：<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>不同代码块间的缓存机制（小数据池、小整数缓存机制、小整数驻留机制）</p></li><li class="lvl-2"><p>适用对象： int（float），str，bool</p></li><li class="lvl-2"><p>具体细则：-5~256数字，bool，满足一定规则的字符串。</p><ul class="lvl-2"><li class="lvl-4"><p>优点：提升性能，节省内存。</p></li><li class="lvl-4"><p>Python自动将-5~256的整数进行了缓存，当你将这些整数赋值给变量时，并不会重新创建对象，而是使用已经创建好的缓存对象。</p></li><li class="lvl-4"><p>python会将一定规则的字符串在字符串驻留池中，创建一份，当你将这些字符串赋值给变量 时，并不会重新创建对象， 而是使用在字符串驻留池中创建好的对象。</p></li><li class="lvl-4"><p>其实，无论是缓存还是字符串驻留池，都是python做的一个优化，就是将~5-256的整数，和一定规则的字符串，放在一个‘池’（容器，或者字典）中，无论程序中那些变量指向这些范围内的整数或者字符串，那么他直接在这个‘池’中引用，言外之意，就是内存中之创建一个。</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建文件1: file1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">A</span>():<br>b = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b))<br><span class="hljs-comment"># 创建文件2: file2</span><br><span class="hljs-keyword">from</span> file1 <span class="hljs-keyword">import</span> A<br>a = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br>A()<br></code></pre></td></tr></table></figure><p>总结一下就是，**同一个代码块中(交互模式中的)**因为字符串驻留机制，int（float），str，bool这些数据类型，只要对象相同，那么内存地址共享。</p><p>而不同代码块中只有引用对象为**-5~256整数，bool，满足一定规则的字符串**，才会有内存共享，即id相同。</p><p>并且这些python编辑器初始化的数据，他们的引用计数器永远不会为0,在初始化的时候就会将引用计数器默认设置为1。</p><h2 id="5-2-free-list">5.2 free_list</h2><p>当一个对象的引用计数器为0的时候，按理说应该回收，但是在python内部为了优化，不会去回收，而是将对象添加到free_list链表中当作缓存。以后再去创建对象时就不再重新开辟内存，而是直接使用 free_list。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v1</span> = <span class="hljs-number">3</span>.<span class="hljs-number">14</span> # 创建float型对象，加入refchain，并且引用计数器的值为<span class="hljs-number">1</span><br><span class="hljs-attribute">del</span> v1 #refchain中移除，按理说应该销毁，但是python会将对象添加到free_list中。<br><br><span class="hljs-attribute">v2</span> = <span class="hljs-number">9</span>.<span class="hljs-number">999</span> # 就不会重新开辟内存，去free_list中获取对象，对象内部数据初始化，再放到<br><span class="hljs-attribute">refchain</span>中。<br></code></pre></td></tr></table></figure><p>但是free_list也是有容量的，不是无限收纳, 假设默认数量为80，只有当free_list满的时候，才会直接去销毁。</p><p>代表性的有float/list/tuple/dict，这些数据类型都是以free_list方式来进行回收的。</p><p>缓存列表对象的创建源码：</p><p>总结一下，就是引用计数器为0的时候，有的是直接销毁，而有些需要先加入缓存当中的。</p><p>每个数据类型的缓存链表源码详见：</p><p>[<a href="https://pythonav.com/wiki/detail/6/88/#2.4%20int%E7%B1%BB%E5%9E%8B">https://pythonav.com/wiki/detail/6/88/#2.4 int类型</a>]</p><p><a href="https://pythonav.com/wiki/detail/6/88/#2.4">https://pythonav.com/wiki/detail/6/88/#2.4</a></p><h1>C源码分析</h1><p>arena 是 CPython 的内存管理结构之一。代码在 Python/pyarena.c 中其中包含了 C 的内存分配和解 除分配的方法。</p><p><a href="https://github.com/python/cpython/blob/master/Python/pyarena.c">https://github.com/python/cpython/blob/master/Python/pyarena.c</a></p><p>Modules/gcmodule.c ，该文件包含垃圾收集器算法的实现。</p><p><a href="https://github.com/python/cpython/blob/master/Modules/gcmodule.c">https://github.com/python/cpython/blob/master/Modules/gcmodule.c</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python异常处理</title>
    <link href="/20221001/Python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/20221001/Python%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1>异常和错误</h1><h2 id="程序错误">程序错误</h2><ol><li class="lvl-3"><p>语法错误（这种错误，根本过不了python解释器的语法检测，必须在程序执行前就改正）</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#语法错误示范一</span><br><span class="hljs-keyword">if</span><br><br><span class="hljs-comment">#语法错误示范二</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>:<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment">#语法错误示范三</span><br><span class="hljs-built_in">print</span>(haha<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>逻辑错误</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用户输入不完整(比如输入为空)或者输入非法(输入不是数字)</span><br>num=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;: &quot;</span>)<br>res1 = <span class="hljs-built_in">int</span>(num)<br><br><span class="hljs-comment">#无法完成计算</span><br>res1=<span class="hljs-number">1</span>/<span class="hljs-number">0</span><br>res2=<span class="hljs-number">1</span>+<span class="hljs-string">&#x27;str&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="异常">异常</h2><p>异常就是程序运行时发生错误的信号</p><p>异常之后的代码就不执行</p><p><img src="image-20220708203928952.png" alt="报错截图"></p><h2 id="异常种类">异常种类</h2><p>在python中不同的异常可以用不同的类型（python中统一了类与类型，类型即类）去标识，不同的类对 象标识不同的异常，一个异常标识一种错误</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 触发IndexError</span><br>l=[<span class="hljs-string">&#x27;eagle&#x27;</span>,<span class="hljs-string">&#x27;aa&#x27;</span>]<br>l[<span class="hljs-number">3</span>]<br><span class="hljs-meta"># 触发KeyError</span><br>dic=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;eagle&#x27;</span>&#125;<br>dic[<span class="hljs-string">&#x27;age&#x27;</span>]<br><br><span class="hljs-meta">#触发ValueError</span><br>s=<span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">int</span>(s)<br></code></pre></td></tr></table></figure><p>常见异常</p><table><thead><tr><th>AttributeError</th><th>试图访问一个对象没有的属性，比如foo.x，但是foo没有属性x</th></tr></thead><tbody><tr><td>IOError</td><td>输入/输出异常；基本上是无法打开文件</td></tr><tr><td>ImportError</td><td>无法引入模块或包；基本上是路径问题或名称错误</td></tr><tr><td>IndentationError</td><td>语法错误（的子类） ；代码没有正确对齐</td></tr><tr><td>IndexError</td><td>下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]</td></tr><tr><td>KeyError</td><td>试图访问字典里不存在的键</td></tr><tr><td>KeyboardInterrupt</td><td>Ctrl+C被按下</td></tr><tr><td>NameError</td><td>使用一个还未被赋予对象的变量</td></tr><tr><td>SyntaxError</td><td>Python代码非法，代码不能编译(个人认为这是语法错误，写错了）</td></tr><tr><td>TypeError</td><td>传入对象类型与要求的不符合</td></tr><tr><td>UnboundLocalError</td><td>试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局 变量，导致你以为正在访问它</td></tr><tr><td>ValueError</td><td>传入一个调用者不期望的值，即使值的类型是正确的</td></tr></tbody></table><p>其他错误</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs julia">ArithmeticError<br><span class="hljs-built_in">AssertionError</span><br>AttributeError<br>BaseException<br>BufferError<br>BytesWarning<br>DeprecationWarning<br>EnvironmentError<br><span class="hljs-built_in">EOFError</span><br><span class="hljs-built_in">Exception</span><br>FloatingPointError<br>FutureWarning<br>GeneratorExit<br>ImportError<br>ImportWarning<br>IndentationError<br>IndexError<br>IOError<br>KeyboardInterrupt<br><span class="hljs-built_in">KeyError</span><br>LookupError<br>MemoryError<br>NameError<br>NotImplementedError<br>OSError<br><span class="hljs-built_in">OverflowError</span><br>PendingDeprecationWarning<br>ReferenceError<br>RuntimeError<br>RuntimeWarning<br>StandardError<br>StopIteration<br>SyntaxError<br>SyntaxWarning<br><span class="hljs-built_in">SystemError</span><br>SystemExit<br>TabError<br><span class="hljs-built_in">TypeError</span><br>UnboundLocalError<br>UnicodeDecodeError<br>UnicodeEncodeError<br>UnicodeError<br>UnicodeTranslateError<br>UnicodeWarning<br>UserWarning<br>ValueError<br>Warning<br>ZeroDivisionError<br></code></pre></td></tr></table></figure><h1>异常处理</h1><ul class="lvl-0"><li class="lvl-2"><p>python解释器检测到错误，触发异常（也允许程序员自己触发异常）</p></li><li class="lvl-2"><p>程序员编写特定的代码，专门用来捕捉这个异常（这段代码与程序逻辑无关，与异常处理有关）</p></li><li class="lvl-2"><p>如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，这就是异常处理</p></li></ul><p>首先须知，异常是由程序的错误引起的，语法上的错误跟异常处理无关，必须在程序运行前就修正</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">num1=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>) <span class="hljs-comment">#输入一个字符串试试</span><br><span class="hljs-keyword">if</span> num1.isdigit():<br><span class="hljs-built_in">int</span>(num1) <span class="hljs-comment">#我们的正统程序放到了这里,其余的都属于异常处理范畴</span><br><span class="hljs-keyword">elif</span> num1.isspace():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入的是空格,就执行我这里的逻辑&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(num1) == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入的是空,就执行我这里的逻辑&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;其他情情况,执行我这里的逻辑&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">问题一：</span><br><span class="hljs-string">使用if的方式我们只为第一段代码加上了异常处理，但这些if，跟你的代码逻辑并无关系，这样你的代</span><br><span class="hljs-string">码会因为可读性差而不容易被看懂</span><br><span class="hljs-string"></span><br><span class="hljs-string">问题二：</span><br><span class="hljs-string">这只是我们代码中的一个小逻辑，如果类似的逻辑多，那么每一次都需要判断这些内容，就会倒置我们的</span><br><span class="hljs-string">代码特别冗长。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>总结：</p><ol><li class="lvl-3"><p>if判断式的异常处理只能针对某一段代码，对于不同的代码段的相同类型的错误你需要写重复的if来 进行处理。</p></li><li class="lvl-3"><p>在你的程序中频繁的写与程序本身无关，与异常处理有关的if，会使得你的代码可读性极其的差</p></li><li class="lvl-3"><p>if是可以解决异常的，只是存在1,2的问题，所以，千万不要妄下定论if不能用来异常处理</p></li></ol><p><strong>python：为每一种异常定制了一个类型，然后提供了一种特定的语法结构用来进行异常处理</strong></p><h2 id="基本语法">基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>被检测的代码块<br><span class="hljs-keyword">except</span> 异常类型：<br><span class="hljs-keyword">try</span>中一旦检测到异常，就执行这个位置的逻辑<br></code></pre></td></tr></table></figure><p>将文件的每一行变成一个迭代器，然后读出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>)<br><br>g = (line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> g:<br><span class="hljs-built_in">print</span>(line)<br>f.close()<br></code></pre></td></tr></table></figure><p>但是如果超出了迭代器的范围就会出现 StopIteration 错误</p><p>使用异常处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>)<br><br>    g = (line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><span class="hljs-keyword">except</span> StopIteration:<br>    f.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取出错&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="异常类只能用来处理指定的异常情况">异常类只能用来处理指定的异常情况</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-built_in">int</span>(s1)<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span> e<br></code></pre></td></tr></table></figure><h2 id="多分支">多分支</h2><p>主要是用来针对不同的错误情况进行错误处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-built_in">int</span>(s1)<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> KeyError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h2 id="万能异常-Exception">万能异常:Exception</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-built_in">int</span>(s1)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h2 id="多分支加万能异常">多分支加万能异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-built_in">int</span>(s1)<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> KeyError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h2 id="其他异常情况">其他异常情况</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;10&#x27;</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-built_in">int</span>(s1)<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> KeyError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;try内代码块没有异常则执行我&#x27;</span>)<br><span class="hljs-keyword">finally</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无论异常与否,都会执行该模块,通常是进行清理工作&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="主动触发异常">主动触发异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;类型错误&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h2 id="自定义异常">自定义异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvaException</span>(<span class="hljs-title class_ inherited__">BaseException</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,msg</span>):<br>self.msg=msg<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> self.msg<br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">raise</span> EvaException(<span class="hljs-string">&#x27;类型错误&#x27;</span>)<br><span class="hljs-keyword">except</span> EvaException <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h2 id="断言">断言</h2><p>表达式位True时，程序继续运行，表达式为False时程序终止运行，并报AssertionError错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="try…except的方式比较if的方式的好处">try…except的方式比较if的方式的好处</h2><ol><li class="lvl-3"><p>把错误处理和真正的工作分开来</p></li><li class="lvl-3"><p>代码更易组织，更清晰，复杂的工作任务更容易实现</p></li><li class="lvl-3"><p>毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用模块</title>
    <link href="/20221001/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <url>/20221001/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1>序列化模块</h1><p>将原本的字典、列表等内容转换成一个字符串的过程就叫做序列化</p><p><strong>序列化的目的</strong></p><ul class="lvl-0"><li class="lvl-3"><p>以某种存储形式使自定义对象持久化；</p></li><li class="lvl-2"><p>将对象从一个地方传递到另一个地方。</p></li><li class="lvl-2"><p>使程序更具维护性</p></li></ul><p><img src="image-20220707204234435.png" alt="相互关系"></p><p>python可序列化的数据类型，序列化出来之后的结果如下</p><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list,tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int,float</td><td>number</td></tr><tr><td>True</td><td>true</td></tr><tr><td>False</td><td>false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><h2 id="json模块-很重要的">json模块(很重要的)</h2><p>Json模块提供了四个功能：dumps、dump、loads、load</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>dic = &#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-string">&#x27;v1&#x27;</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-string">&#x27;v2&#x27;</span>,<span class="hljs-string">&#x27;k3&#x27;</span>:<span class="hljs-string">&#x27;v3&#x27;</span>&#125;<br>str_dic = json.dumps(dic)<span class="hljs-comment">#将Python中的类型转换为字符串</span><br><span class="hljs-comment"># 序列化：将一个字典转换成一个字符串</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(str_dic),str_dic)<br>dic2 = json.loads(str_dic)<span class="hljs-comment">#字符串转回原本的类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(dic2),dic2)<br><span class="hljs-comment"># 反序列化：将一个字符串格式的字典转换成一个字典</span><br><br>list_dic = [<span class="hljs-number">1</span>,[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>],<span class="hljs-number">3</span>,&#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-string">&#x27;v1&#x27;</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-string">&#x27;v2&#x27;</span>&#125;]<br>str_dic = json.dumps(list_dic)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(str_dic),str_dic)<br>list_dic2 = json.loads(str_dic)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(list_dic2),list_dic2)<br></code></pre></td></tr></table></figure><p>json.dumps的参数：</p><table><thead><tr><th>Skipkeys</th><th>1,默认值是False，如果dict的keys内的数据不是python的基本类型,2,设置为 False时，就会报TypeError的错误。此时设置成True，则会跳过这类key，3,当 它为True的时候，所有非ASCII码字符显示为\uXXXX序列，只需在dump时将 ensure_ascii设置为False即可，此时存入json的中文即可正常显示。</th></tr></thead><tbody><tr><td>indent</td><td>是一个非负的整型，如果是0就是顶格分行显示，如果为空就是一行最紧凑显示， 否则会换行且按照indent的数值显示前面的空白分行显示，这样打印出来的json 数据也叫pretty-printed json</td></tr><tr><td>ensure_ascii</td><td>当它为True的时候，所有非ASCII码字符显示为\uXXXX序列，只需在dump时将 ensure_ascii设置为False即可，此时存入json的中文即可正常显示。</td></tr><tr><td>separators</td><td>分隔符，实际上是(item_separator, dict_separator)的一个元组，默认的就是 (‘,’,’:’)；这表示dictionary内keys之间用“,”隔开，而KEY和value之间用“：”隔开。</td></tr><tr><td>sort_keys</td><td>将数据根据keys的值进行排序</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>data = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;马牛逼&#x27;</span>,<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;female&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">88</span>&#125;<br>json_dic2 = json.dumps(data,sort_keys=<span class="hljs-literal">True</span>,indent=<span class="hljs-number">2</span>,separators=<br>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;:&#x27;</span>),ensure_ascii=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(json_dic2)<br></code></pre></td></tr></table></figure><p>json.dump和json.load不常用，主要是针对文件操作进行序列化和反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">序列化：<br><span class="hljs-keyword">import</span> json<br>v = &#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-string">&#x27;yh&#x27;</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-string">&#x27;小马过河&#x27;</span>&#125;<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;xiaoma.txt&#x27;</span>,mode=<span class="hljs-string">&#x27;w+&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-comment">#文件不存在就会生成</span><br>val = json.dump(v,f,ensure_ascii=<span class="hljs-literal">False</span>)<br>data=f.read()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))<br><span class="hljs-built_in">print</span>(val)<br>f.close()<br>----------------结果：<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-literal">None</span><br><span class="hljs-comment">#dump将内容序列化，并写入打开的文件中。</span><br><br>反序列化：<br><span class="hljs-keyword">import</span> json<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;xiaoma.txt&#x27;</span>,mode=<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>data = json.load(f)<br>f.close()<br><span class="hljs-built_in">print</span>(data,<span class="hljs-built_in">type</span>(data))<br>---------------结果:<br>&#123;<span class="hljs-string">&#x27;k1&#x27;</span>: <span class="hljs-string">&#x27;yh&#x27;</span>, <span class="hljs-string">&#x27;k2&#x27;</span>: <span class="hljs-string">&#x27;小马过河&#x27;</span>&#125; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="pickle模块">pickle模块</h2><table><thead><tr><th>json</th><th>用于字符串 和 python数据类型间进行转换</th></tr></thead><tbody><tr><td>pickle</td><td>用于python特有的类型 和 python的数据类型间进行转换</td></tr></tbody></table><p>pickle模块提供了四个功能：dumps、dump(序列化，存）、loads（反序列化，读）、load</p><p>不仅可以序列化字典，列表…可以把python中任意的数据类型序列化</p><p>json模块和picle模块都有 dumps、dump、loads、load四种方法，而且用法一样。</p><p>不同的是json模块序列化出来的是通用格式，其它编程语言都认识，就是普通的字符串，</p><p>而picle模块序列化出来的只有python可以认识，其他编程语言不认识的，表现为乱码</p><p>不过picle可以序列化函数，但是其他文件想用该函数，在该文件中需要有该文件的定义（定义和参数必 须相同，内容可以不同）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br>dic = &#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-string">&#x27;v1&#x27;</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-string">&#x27;v2&#x27;</span>,<span class="hljs-string">&#x27;k3&#x27;</span>:<span class="hljs-string">&#x27;v3&#x27;</span>&#125;<br>str_dic = pickle.dumps(dic)<br><span class="hljs-built_in">print</span>(str_dic)<br><br>dic2 = pickle.loads(str_dic)<br><span class="hljs-built_in">print</span>(dic2)<br><br><span class="hljs-keyword">import</span> time<br>struct_time = time.localtime(<span class="hljs-number">1000000000</span>)<br><span class="hljs-built_in">print</span>(struct_time)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pickle_file&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>pickle.dump(struct_time,f)<br>f.close()<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pickle_file&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>struct_time2 = pickle.load(f)<br><span class="hljs-built_in">print</span>(struct_time2.tm_year)<br></code></pre></td></tr></table></figure><h2 id="shelve模块">shelve模块</h2><p>shelve也是python提供给我们的序列化工具，比pickle用起来更简单一些。</p><p>shelve只提供给我们一个open方法，是用key来访问的，使用起来和字典类似。</p><p>参考博客</p><p><a href="https://www.cnblogs.com/sui776265233/p/9225164.html">https://www.cnblogs.com/sui776265233/p/9225164.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shelve<br>f = shelve.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;shelve_file&#x27;</span>)<br>f[<span class="hljs-string">&#x27;key&#x27;</span>] = &#123;<span class="hljs-string">&#x27;int&#x27;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;str&#x27;</span>:<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;float&#x27;</span>:<span class="hljs-number">0.123</span>&#125;<br>f.close()<br><br>f1 = shelve.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;shelve_file&#x27;</span>)<br>ret = f1[<span class="hljs-string">&#x27;key&#x27;</span>]<br>f1.close()<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><p>这个模块有个限制，它不支持多个应用同一时间往同一个DB进行写操作。所以当我们知道我们的应用如 果只进行读操作，我们可以让shelve通过只读方式打开DB</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shelve<br>f1 = shelve.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;shelve_file&#x27;</span>,flag=<span class="hljs-string">&#x27;r&#x27;</span>)<br>ret = f1[<span class="hljs-string">&#x27;key&#x27;</span>]<br>f1.close()<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><p>由于shelve在默认情况下是不会记录待持久化对象的任何修改的，所以我们在shelve.open()时候需要修 改默认参数，否则对象的修改不会保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shelve<br>f1 = shelve.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;shelve_file&#x27;</span>)<br><span class="hljs-built_in">print</span>(f1[<span class="hljs-string">&#x27;key&#x27;</span>])<br>f1[<span class="hljs-string">&#x27;key&#x27;</span>][<span class="hljs-string">&#x27;k1&#x27;</span>] = <span class="hljs-string">&#x27;v1&#x27;</span><br><span class="hljs-built_in">print</span>(f1[<span class="hljs-string">&#x27;key&#x27;</span>])<br>f1.close()<br><br>f2 = shelve.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;shelve_file&#x27;</span>,writeback=<span class="hljs-literal">True</span>) <span class="hljs-comment">#开启后才能写生效</span><br><br>f2[<span class="hljs-string">&#x27;key&#x27;</span>][<span class="hljs-string">&#x27;k1&#x27;</span>] = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(f2[<span class="hljs-string">&#x27;key&#x27;</span>])<br>f2.close()<br></code></pre></td></tr></table></figure><p>使用shelve模块实现简单的数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 简单的数据库</span><br><br><span class="hljs-keyword">import</span> sys,shelve<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_help</span>():<br><span class="hljs-string">&#x27;存储（增加）、查找、更新（修改）、循环打印、删除、退出、帮助&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The available commons are: &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;store : Stores information about a person&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;lookup : Looks up a person from ID numbers&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;update : Update a person&#x27;s information from ID number&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;print_all: Print all informations&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;delete : Delete a person&#x27;s information from ID number&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;quit : Save changes and exit&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;? : Print this message&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">store_people</span>(<span class="hljs-params">db</span>):<br>pid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter a unique ID number: &#x27;</span>)<br>person = &#123;&#125;<br>person[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter the name: &#x27;</span>)<br>person[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter the age: &#x27;</span>)<br>person[<span class="hljs-string">&#x27;phone&#x27;</span>] = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter the phone: &#x27;</span>)<br>db[pid] = person<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Store information: pid is %s, information is %s&quot;</span> % (pid, person))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lookup_people</span>(<span class="hljs-params">db</span>):<br>pid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter the number: &#x27;</span>)<br>field = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;What would you like to know? (name, age, phone) &#x27;</span>)<br><span class="hljs-keyword">if</span> pid <span class="hljs-keyword">in</span> db.keys():<br>value = db[pid][field]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pid %s&#x27;s %s is %s&quot;</span> % (pid, field, value))<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Not found this number&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_people</span>(<span class="hljs-params">db</span>):<br>pid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter the number: &#x27;</span>)<br>field = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;What would you like to update? (name, age, phone) &#x27;</span>)<br>newvalue = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter the new information: &#x27;</span>)<br><span class="hljs-keyword">if</span> pid <span class="hljs-keyword">in</span> db.keys():<br>value = db[pid]<br>value[field] = newvalue<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pid %s&#x27;s %s update information is %s&quot;</span> % (pid, field,newvalue))<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not found this number, can&#x27;t update&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_people</span>(<span class="hljs-params">db</span>):<br>pid = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter the number: &#x27;</span>)<br><span class="hljs-keyword">if</span> pid <span class="hljs-keyword">in</span> db.keys():<br><span class="hljs-keyword">del</span> db[pid]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pid %s&#x27;s information delete done&quot;</span> % pid)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;Not found this number, can&#x27;t delete&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_all_people</span>(<span class="hljs-params">db</span>):<br><span class="hljs-built_in">print</span>( <span class="hljs-string">&#x27;All information are: &#x27;</span>)<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> db.items():<br><span class="hljs-built_in">print</span>(key, value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enter_cmd</span>():<br>cmd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please enter the cmd(? for help): &#x27;</span>)<br>cmd = cmd.strip().lower()<br><span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>database = shelve.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;database201803.dat&#x27;</span>, writeback=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>cmd = enter_cmd()<br><span class="hljs-keyword">if</span> cmd == <span class="hljs-string">&#x27;store&#x27;</span>:<br>store_people(database)<br><span class="hljs-keyword">elif</span> cmd == <span class="hljs-string">&#x27;lookup&#x27;</span>:<br>lookup_people(database)<br><span class="hljs-keyword">elif</span> cmd == <span class="hljs-string">&#x27;update&#x27;</span>:<br>update_people(database)<br><span class="hljs-keyword">elif</span> cmd == <span class="hljs-string">&#x27;print_all&#x27;</span>:<br>print_all_people(database)<br><span class="hljs-keyword">elif</span> cmd == <span class="hljs-string">&#x27;delete&#x27;</span>:<br>delete_people(database)<br><span class="hljs-keyword">elif</span> cmd == <span class="hljs-string">&#x27;?&#x27;</span>:<br>print_help()<br><span class="hljs-keyword">elif</span> cmd == <span class="hljs-string">&#x27;quit&#x27;</span>:<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">finally</span>:<br>database.close()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><h2 id="hashlib模块（用于加密提供了大量的加密算法）">hashlib模块（用于加密提供了大量的加密算法）</h2><p>Python的<code>hashlib</code>提供了常见的摘要算法，如MD5，SHA1等等。</p><p>什么是摘要算法呢？摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一 个长度固定的数据串（通常用16进制的字符串表示）。</p><p>摘要算法就是通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest，目的是为了发现原 始数据是否被人篡改过。</p><p>摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个单向函数，计算f(data)很容易，但 通过digest反推data却非常困难。而且，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>md5 = hashlib.md5()<br>md5.update(<span class="hljs-string">&#x27;how to use md5 in python hashlib?&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(md5.hexdigest())<br></code></pre></td></tr></table></figure><p>MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符 串表示。另一种常见的摘要算法是SHA1，调用SHA1和调用MD5完全类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>sha1 = hashlib.sha1()<br>sha1.update(<span class="hljs-string">&#x27;how to use md5 &#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>sha1.update(<span class="hljs-string">&#x27;in python hashlib?&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(sha1.hexdigest())<br></code></pre></td></tr></table></figure><p>利用<code>hashlib</code>将我们的注册登录模块保存的密码进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#注册部分修改</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;db.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> write_file:<br>md5=hashlib.md5()<br>md5.update(user_name.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>md5.update(user_password.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>user_password_md5=md5.hexdigest()<br>user_info = user_name + <span class="hljs-string">&quot;:&quot;</span> + user_password_md5 + <span class="hljs-string">&quot;\n</span><br><span class="hljs-string">write_file.write(user_info)</span><br><span class="hljs-string">print(&quot;</span>注册成功<span class="hljs-string">&quot;)</span><br><span class="hljs-string">        </span><br><span class="hljs-string">#登录部分修改</span><br><span class="hljs-string">while True:</span><br><span class="hljs-string"># 确保用户密码正确</span><br><span class="hljs-string">user_password = input(&quot;</span>请输入登录密码；\n<span class="hljs-string">&quot;)</span><br><span class="hljs-string">flag2 = False</span><br><span class="hljs-string">for dict4 in list1:</span><br><span class="hljs-string">md5 =hashlib.md5()</span><br><span class="hljs-string">md5.update(user_name.encode(&#x27;utf-8&#x27;))</span><br><span class="hljs-string">md5.update(user_password.encode(&#x27;utf-8&#x27;))</span><br><span class="hljs-string">user_password_md5=md5.hexdigest()</span><br><span class="hljs-string">if dict4[&quot;</span>username<span class="hljs-string">&quot;] == user_name and dict4[&quot;</span>password<span class="hljs-string">&quot;] ==user_password_md5:</span><br><span class="hljs-string">flag2 = True</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="摘要算法应用">摘要算法应用</h2><p>任何允许用户登录的网站都会存储用户登录的用户名和口令。如何存储用户名和口令呢？方法是存到数据库表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name    | password<br>--------+----------<br>michael | <span class="hljs-number">123456</span><br>bob     | abc999<br>alice   | alice2008<br></code></pre></td></tr></table></figure><p>如果使用md5来将保护密码那么就是这样</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">username | password</span><br><span class="hljs-section">---------+---------------------------------</span><br>michael  | e10adc3949ba59abbe56e057f20f883e<br>bob      | 878ef96e86145580c38c87f0410ad153<br>alice    | 99b1c2188db85afee403b1536010c2c9<br></code></pre></td></tr></table></figure><p>有很多md5撞库工具，可以轻松的将简单密码给碰撞出来</p><p>所以，要确保存储的用户口令不是那些已经被计算出来的常用口令的MD5，这一方法通过对原始口令加 一个复杂字符串来实现，俗称“加盐</p><p>经过Salt处理的MD5口令，只要Salt不被黑客知道，即使用户输入简单口令，也很难通过MD5反推明文口令</p><p>但是如果有两个用户都使用了相同的简单口令比如123456，在数据库中，将存储两条相同的MD5值， 这说明这两个用户的口令是一样的。</p><p>如果假定用户无法修改登录名，就可以通过把登录名作为Salt的一部分来计算MD5，从而实现相同口令 的用户也存储不同的MD5。</p><h1>configparser模块（专门对配置文件的修改）</h1><p>该模块适用于配置文件的格式与windows ini文件类似，可以包含一个或多个节（section），每个节可 以有多个参数（键=值）。</p><p>常见的文档格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">[default]<br>ServerAliveInterval = <span class="hljs-number">45</span><br>Compression = yes<br>CompressionLevel = <span class="hljs-number">9</span><br>ForwardX11 = yes<br><br>[bitbucket.org]<br>User = hg<br><br>[topsecret.server.com]<br>Port = <span class="hljs-number">50022</span><br>ForwardX11 = no<br></code></pre></td></tr></table></figure><p>使用python生成一个这样的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br><br>conf[<span class="hljs-string">&#x27;default&#x27;</span>] = &#123;<span class="hljs-string">&#x27;ServerAliveInterval&#x27;</span>:<span class="hljs-string">&#x27;45&#x27;</span>,<br> <span class="hljs-string">&#x27;Compression&#x27;</span>:<span class="hljs-string">&#x27;yes&#x27;</span>,<br> <span class="hljs-string">&#x27;CompressionLevel&#x27;</span>:<span class="hljs-string">&#x27;9&#x27;</span>,<br> <span class="hljs-string">&#x27;ForwardX11&#x27;</span>:<span class="hljs-string">&#x27;yes&#x27;</span><br> &#125;<br>conf[<span class="hljs-string">&#x27;bitbucket.org&#x27;</span>] = &#123;<span class="hljs-string">&#x27;User&#x27;</span>:<span class="hljs-string">&#x27;hg&#x27;</span>&#125;<br>conf[<span class="hljs-string">&#x27;topsecret.server.com&#x27;</span>] = &#123;<span class="hljs-string">&#x27;Port&#x27;</span>:<span class="hljs-string">&#x27;50022&#x27;</span>,<br> <span class="hljs-string">&#x27;ForwardX11&#x27;</span>:<span class="hljs-string">&#x27;no&#x27;</span><br>                               &#125;<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> config:<br>conf.write(config)<br></code></pre></td></tr></table></figure><p>查找配置文件中的所有section和option</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">&#x27;config&#x27;</span>)<br><br>secs = conf.sections()<br><span class="hljs-built_in">print</span>(secs)<br><span class="hljs-keyword">for</span> sec <span class="hljs-keyword">in</span> secs:<br><span class="hljs-built_in">print</span>(sec,conf.options(sec))<br></code></pre></td></tr></table></figure><p>查找配置文件中option的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">&#x27;config&#x27;</span>)<br><br>secs = conf.sections()<br><span class="hljs-built_in">print</span>(secs)<br><span class="hljs-keyword">for</span> sec <span class="hljs-keyword">in</span> secs:<br><span class="hljs-built_in">print</span>(sec,conf.options(sec))<br><br>serveraliveinterval=conf.get(<span class="hljs-string">&#x27;default&#x27;</span>,<span class="hljs-string">&#x27;serveraliveinterval&#x27;</span>)<br><span class="hljs-built_in">print</span>(serveraliveinterval)<br>user=conf.get(<span class="hljs-string">&#x27;bitbucket.org&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-built_in">print</span>(user)<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">&#x27;config&#x27;</span>)<br><br><span class="hljs-comment"># 使用has_section来判断是否有这个section配置项，option可以使用has_option方法来判断是否存在</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> conf.has_section(<span class="hljs-string">&#x27;ABC&#x27;</span>):<br><span class="hljs-comment"># 如果没有则添加这个section</span><br>conf.add_section(<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-comment"># 并在该section下添加一个名叫abc的option项</span><br>conf.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;ABC&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>)<br>conf.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;topsecret.server.com&#x27;</span>,<span class="hljs-string">&#x27;ip&#x27;</span>,<span class="hljs-string">&#x27;192.168.1.1&#x27;</span>)<br><span class="hljs-comment"># 将这些修改写入到配置文件中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>conf.write(f)<br></code></pre></td></tr></table></figure><p>删除某些section和option</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">&#x27;config&#x27;</span>)<br><span class="hljs-comment"># 删除ABC section，包含下面所有的option都会一并删除</span><br>conf.remove_section(<span class="hljs-string">&#x27;ABC&#x27;</span>)<br><span class="hljs-comment"># 删除topsecret.server.com下的ip ，其他option不会受影响</span><br>conf.remove_option(<span class="hljs-string">&#x27;topsecret.server.com&#x27;</span>, <span class="hljs-string">&#x27;ip&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>conf.write(f)<br></code></pre></td></tr></table></figure><p>查找配置文件中option的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">&#x27;config&#x27;</span>)<br><br>secs = conf.sections()<br><span class="hljs-built_in">print</span>(secs)<br><span class="hljs-keyword">for</span> sec <span class="hljs-keyword">in</span> secs:<br><span class="hljs-built_in">print</span>(sec,conf.options(sec))<br><br>serveraliveinterval=conf.get(<span class="hljs-string">&#x27;default&#x27;</span>,<span class="hljs-string">&#x27;serveraliveinterval&#x27;</span>)<br><span class="hljs-built_in">print</span>(serveraliveinterval)<br>user=conf.get(<span class="hljs-string">&#x27;bitbucket.org&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-built_in">print</span>(user)<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">&#x27;config&#x27;</span>)<br><br><span class="hljs-comment"># 使用has_section来判断是否有这个section配置项，option可以使用has_option方法来判断是否存在</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> conf.has_section(<span class="hljs-string">&#x27;ABC&#x27;</span>):<br><span class="hljs-comment"># 如果没有则添加这个section</span><br>conf.add_section(<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-comment"># 并在该section下添加一个名叫abc的option项</span><br>conf.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;ABC&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>)<br>conf.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;topsecret.server.com&#x27;</span>,<span class="hljs-string">&#x27;ip&#x27;</span>,<span class="hljs-string">&#x27;192.168.1.1&#x27;</span>)<br><span class="hljs-comment"># 将这些修改写入到配置文件中</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>conf.write(f)<br></code></pre></td></tr></table></figure><p>删除某些section和option</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">&#x27;config&#x27;</span>)<br><span class="hljs-comment"># 删除ABC section，包含下面所有的option都会一并删除</span><br>conf.remove_section(<span class="hljs-string">&#x27;ABC&#x27;</span>)<br><span class="hljs-comment"># 删除topsecret.server.com下的ip ，其他option不会受影响</span><br>conf.remove_option(<span class="hljs-string">&#x27;topsecret.server.com&#x27;</span>, <span class="hljs-string">&#x27;ip&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>conf.write(f)<br></code></pre></td></tr></table></figure><h1>logging模块（记录程序运行的日志模块）</h1><p>参考博客：</p><p><a href="https://blog.csdn.net/pansaky/article/details/90710751">https://blog.csdn.net/pansaky/article/details/90710751</a></p><h2 id="函数式简单配置">函数式简单配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-comment">#日志的五个等级</span><br>logging.debug(<span class="hljs-string">&#x27;debug message&#x27;</span>)<br>logging.info(<span class="hljs-string">&#x27;info message&#x27;</span>)<br>logging.warning(<span class="hljs-string">&#x27;warning message&#x27;</span>)<br>logging.error(<span class="hljs-string">&#x27;error message&#x27;</span>)<br>logging.critical(<span class="hljs-string">&#x27;critical message&#x27;</span>)<br></code></pre></td></tr></table></figure><p>默认情况下Python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日 志，这说明默认的日志级别设置为WARNING（日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG），默认的日志格式为日志级别：Logger名称：用户输出消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG,<br>  <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(filename)s[line:%(lineno)d] %</span><br><span class="hljs-string">(levelname)s %(message)s&#x27;</span>,<br>datefmt=<span class="hljs-string">&#x27;%a, %d %b %Y %H:%M:%S&#x27;</span>,<br>filename=<span class="hljs-string">&#x27;test.log&#x27;</span>,<br>filemode=<span class="hljs-string">&#x27;w&#x27;</span>)<br><br>logging.debug(<span class="hljs-string">&#x27;debug message&#x27;</span>)<br>logging.info(<span class="hljs-string">&#x27;info message&#x27;</span>)<br>logging.warning(<span class="hljs-string">&#x27;warning message&#x27;</span>)<br>logging.error(<span class="hljs-string">&#x27;error message&#x27;</span>)<br>logging.critical(<span class="hljs-string">&#x27;critical message&#x27;</span>)<br></code></pre></td></tr></table></figure><p>参数解释</p><ul class="lvl-0"><li class="lvl-2"><p>ogging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，可用参数有：</p></li><li class="lvl-2"><p>filename：用指定的文件名创建FiledHandler，这样日志会被存储在指定的文件中。</p></li><li class="lvl-2"><p>filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。</p></li><li class="lvl-2"><p>format：指定handler使用的日志显示格式。</p></li><li class="lvl-2"><p>datefmt：指定日期时间格式。</p></li><li class="lvl-2"><p>level：设置rootlogger（后边会讲解具体概念）的日志级别</p></li><li class="lvl-2"><p>stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件 (f=open- (‘test.log’,’w’))，默认为sys.stderr。若同时列出了filename和stream两个参数，则 stream参数会被忽略。</p></li><li class="lvl-2"><p>format参数中可能用到的格式化串</p><p>%(name)s Logger的名字</p><p>%(levelno)s 数字形式的日志级别</p><p>%(levelname)s 文本形式的日志级别</p><p>%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</p><p>%(filename)s 调用日志输出函数的模块的文件名</p><p>%(module)s 调用日志输出函数的模块名</p><p>%(funcName)s 调用日志输出函数的函数名</p><p>%(lineno)d 调用日志输出函数的语句所在的代码行</p><p>%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</p><p>%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</p><p>%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</p><p>%(thread)d 线程ID。可能没有</p><p>%(threadName)s 线程名。可能没有</p><p>%(process)d 进程ID。可能没有</p><p>%(message)s用户输出的消息</p></li></ul><h1>logger对象配置（也与日志有关）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logger = logging.getLogger()<br><br><span class="hljs-comment"># 创建一个handler，用于写入日志文件</span><br>fh = logging.FileHandler(<span class="hljs-string">&#x27;test.log&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-comment"># 再创建一个handler，用于输出到控制台</span><br>ch = logging.StreamHandler()<br><br>formatter = logging.Formatter(<span class="hljs-string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)<br><br>fh.setFormatter(formatter)<br><br>ch.setFormatter(formatter)<br><br>logger.addHandler(fh) <span class="hljs-comment">#logger对象可以添加多个fh和ch对象</span><br>logger.addHandler(ch)<br>logger.debug(<span class="hljs-string">&#x27;logger debug message&#x27;</span>)<br>logger.info(<span class="hljs-string">&#x27;logger info message&#x27;</span>)<br>logger.warning(<span class="hljs-string">&#x27;logger warning message&#x27;</span>)<br>logger.error(<span class="hljs-string">&#x27;logger error message&#x27;</span>)<br>logger.critical(<span class="hljs-string">&#x27;logger critical message&#x27;</span>)<br></code></pre></td></tr></table></figure><p>logging库提供了多个组件：Logger、Handler、Filter、Formatter。Logger对象提供应用程序可直接使用的接口，Handler发送日志到适当的目的地，Filter提供了过滤日志信息的方法，Formatter指定日志显示格式。</p><h2 id="logger的配置文件">logger的配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">logging配置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> logging.config<br><br><span class="hljs-comment"># 定义三种日志输出格式 开始</span><br><br>standard_format = <span class="hljs-string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \<br>                  <span class="hljs-string">&#x27;[%(levelname)s][%(message)s]&#x27;</span> <span class="hljs-comment">#其中name为getlogger指定的名字</span><br>                  <br>simple_format = <span class="hljs-string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span><br><br>id_simple_format = <span class="hljs-string">&#x27;[%(levelname)s][%(asctime)s] %(message)s&#x27;</span><br><br><span class="hljs-comment"># 定义日志输出格式 结束</span><br><br>logfile_dir = os.path.dirname(os.path.abspath(__file__)) <span class="hljs-comment"># log文件的目录</span><br><br>logfile_name = <span class="hljs-string">&#x27;all2.log&#x27;</span> <span class="hljs-comment"># log文件名</span><br><br><span class="hljs-comment"># 如果不存在定义的日志目录就创建一个</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(logfile_dir):<br>os.mkdir(logfile_dir)<br><br><span class="hljs-comment"># log文件的全路径</span><br>logfile_path = os.path.join(logfile_dir, logfile_name)<br><br><span class="hljs-comment"># log配置字典</span><br>LOGGING_DIC = &#123;<br><span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,<br><span class="hljs-string">&#x27;formatters&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;standard&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;format&#x27;</span>: standard_format<br>&#125;,<br><span class="hljs-string">&#x27;simple&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;format&#x27;</span>: simple_format<br>&#125;,<br>&#125;,<br><span class="hljs-string">&#x27;filters&#x27;</span>: &#123;&#125;,<br><span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br><span class="hljs-comment">#打印到终端的日志</span><br><span class="hljs-string">&#x27;console&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br><span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>, <span class="hljs-comment"># 打印到屏幕</span><br><span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;simple&#x27;</span><br>&#125;,<br><span class="hljs-comment">#打印到文件的日志,收集info及以上的日志</span><br><span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br><span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>, <span class="hljs-comment"># 保存到文件</span><br><span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,<br><span class="hljs-string">&#x27;filename&#x27;</span>: logfile_path, <span class="hljs-comment"># 日志文件</span><br><span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">5</span>, <span class="hljs-comment"># 日志大小 5M</span><br><span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,<br><span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-comment"># 日志文件的编码，再也不用担心中文log乱码了</span><br>&#125;,<br>&#125;,<br><span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;<br><span class="hljs-comment">#logging.getLogger(__name__)拿到的logger配置</span><br><span class="hljs-string">&#x27;&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;console&#x27;</span>], <span class="hljs-comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span><br><span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br><span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-comment"># 向上（更高level的logger）传递</span><br>&#125;,<br>&#125;,<br>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_my_logging_cfg</span>():<br>    logging.config.dictConfig(LOGGING_DIC) <span class="hljs-comment"># 导入上面定义的logging配置</span><br>logger = logging.getLogger(__name__) <span class="hljs-comment"># 生成一个log实例</span><br>logger.info(<span class="hljs-string">&#x27;It works!&#x27;</span>) <span class="hljs-comment"># 记录该文件的运行状态</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>load_my_logging_cfg()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">注意：<br><br><br><span class="hljs-comment">#1、有了上述方式我们的好处是：所有与logging模块有关的配置都写到字典中就可以了，更加清晰，方便管理</span><br><br><br><span class="hljs-comment">#2、我们需要解决的问题是：</span><br><span class="hljs-number">1</span>、从字典加载配置：logging.config.dictConfig(settings.LOGGING_DIC)<br><br><span class="hljs-number">2</span>、拿到logger对象来产生日志<br>logger对象都是配置到字典的loggers 键对应的子字典中的<br>按照我们对logging模块的理解，要想获取某个东西都是通过名字，也就是key来获取的<br>于是我们要获取不同的logger对象就是<br>logger=logging.getLogger(<span class="hljs-string">&#x27;loggers子字典的key名&#x27;</span>)<br><br><br>但问题是：如果我们想要不同logger名的logger对象都共用一段配置，那么肯定不能在loggers子字典中定义n个key<br><span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;l1&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;default&#x27;</span>, <span class="hljs-string">&#x27;console&#x27;</span>], <span class="hljs-comment">#</span><br><span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br><span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-comment"># 向上（更高level的logger）传递</span><br>&#125;,<br><span class="hljs-string">&#x27;l2: &#123;</span><br><span class="hljs-string">&#x27;</span>handlers<span class="hljs-string">&#x27;: [&#x27;</span>default<span class="hljs-string">&#x27;, &#x27;</span>console<span class="hljs-string">&#x27; ],</span><br><span class="hljs-string">&#x27;</span>level<span class="hljs-string">&#x27;: &#x27;</span>DEBUG<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">&#x27;</span>propagate<span class="hljs-string">&#x27;: False, # 向上（更高level的logger）传递</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&#x27;</span>l3<span class="hljs-string">&#x27;: &#123;</span><br><span class="hljs-string">&#x27;</span>handlers<span class="hljs-string">&#x27;: [&#x27;</span>default<span class="hljs-string">&#x27;, &#x27;</span>console<span class="hljs-string">&#x27;], #</span><br><span class="hljs-string">&#x27;</span>level<span class="hljs-string">&#x27;: &#x27;</span>DEBUG<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">&#x27;</span>propagate<span class="hljs-string">&#x27;: True, # 向上（更高level的logger）传递</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">#我们的解决方式是，定义一个空的key</span><br><span class="hljs-string">&#x27;</span>loggers<span class="hljs-string">&#x27;: &#123;</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;: &#123;</span><br><span class="hljs-string">&#x27;</span>handlers<span class="hljs-string">&#x27;: [&#x27;</span>default<span class="hljs-string">&#x27;, &#x27;</span>console<span class="hljs-string">&#x27;],</span><br><span class="hljs-string">&#x27;</span>level<span class="hljs-string">&#x27;: &#x27;</span>DEBUG<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">&#x27;</span>propagate<span class="hljs-string">&#x27;: True,</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">这样我们再取logger对象时</span><br><span class="hljs-string">logging.getLogger(__name__)，不同的文件__name__不同，这保证了打印日志时标识信息不同，但是拿着该名字去loggers里找key名时却发现找不到，于是默认使用key=&#x27;</span><span class="hljs-string">&#x27;的配置</span><br></code></pre></td></tr></table></figure><h1>collections模块(用来提供额外的数据结构)</h1><p>在内置数据类型（dict、list、set、tuple）的基础上，collections模块还提供了几个额外的数据类型： Counter、deque、defaultdict、namedtuple和OrderedDict等。</p><ol><li class="lvl-3"><p>namedtuple: 生成可以使用名字来访问元素内容的tuple</p></li><li class="lvl-3"><p>deque: 双端队列，可以快速的从另外一侧追加和推出对象</p></li><li class="lvl-3"><p>Counter: 计数器，主要用来计数</p></li><li class="lvl-3"><p>defaultdict: 带有默认值的字典</p></li></ol><h2 id="namedtuple（用于表示二位坐标）">namedtuple（用于表示二位坐标）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br>point = namedtuple(<span class="hljs-string">&#x27;point&#x27;</span>,[<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>])<br>p = point(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(p.x)<br></code></pre></td></tr></table></figure><p>一个点的二维坐标就可以表示成,但是，看到(1, 2)，很难看出这个tuple是用来表示一个坐标的。 这时，namedtuple就派上了用场</p><h2 id="deque（双向链表，可高效插入删除操作，适合队列和栈）">deque（双向链表，可高效插入删除操作，适合队列和栈）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>q = deque([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br>q.append(<span class="hljs-string">&#x27;x&#x27;</span>)<br>q.appendleft(<span class="hljs-string">&#x27;y&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(q)<br></code></pre></td></tr></table></figure><p>deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头 部添加或删除元素。</p><h2 id="defaultdict">defaultdict</h2><p>有如下值列表 [11,22,33,44,55,66,77,88,99,90…]，将所有大于 66 的值保存至字典的第一个key中，将小 于 66 的值保存至第二个key的值中。</p><p>即： {‘k1’: 大于66 , ‘k2’: 小于66}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不用defaultdict的方式</span><br>li = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>,<span class="hljs-number">99</span>,<span class="hljs-number">90</span>]<br><br>result = &#123;&#125;<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> li:<br><span class="hljs-keyword">if</span> row &lt; <span class="hljs-number">66</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;key1&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result:<br>result[<span class="hljs-string">&#x27;key1&#x27;</span>]=[]<br>result[<span class="hljs-string">&#x27;key1&#x27;</span>].append(row)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;key2&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result:<br>result[<span class="hljs-string">&#x27;key2&#x27;</span>]=[]<br>result[<span class="hljs-string">&#x27;key2&#x27;</span>].append(row)<br><span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment"># 用defaultdict的方式</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>li = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>,<span class="hljs-number">99</span>,<span class="hljs-number">90</span>]<br>result=defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> li:<br><span class="hljs-keyword">if</span> row &gt; <span class="hljs-number">66</span>:<br>result[<span class="hljs-string">&#x27;key1&#x27;</span>].append(row)<br><span class="hljs-keyword">else</span>:<br>result[<span class="hljs-string">&#x27;key2&#x27;</span>].append(row)<br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="counter">counter</h2><p>Counter类的目的是用来跟踪值出现的次数。它是一个无序的容器类型，以字典的键值对形式存储，其中元素作为key，其计数作为value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br>c = Counter(<span class="hljs-string">&#x27;qazxswqazxswqazxswsxaqwsxaqws&#x27;</span>)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h1>时间有关的模块</h1><h2 id="time模块">time模块</h2><p>常用方法</p><ul class="lvl-0"><li class="lvl-2"><p>time.sleep(secs)</p><p>(线程)推迟指定的时间运行。单位为秒。</p></li><li class="lvl-2"><p>time.time()</p><p>获取当前时间戳</p></li></ul><p>表示时间的三种方式</p><p>在Python中，通常有这三种方式来表示时间：时间戳、元组(struct_time)、格式化的时间字符串：</p><ol><li class="lvl-3"><p>时间戳(timestamp) ：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移 量。我们运行“type(time.time())”，返回的是float类型。</p></li><li class="lvl-3"><p>格式化的时间字符串(Format String)： ‘1999-12-06’</p></li></ol><table><thead><tr><th>%y</th><th>两位数的年份表示（00-99）</th></tr></thead><tbody><tr><td>%Y</td><td>四位数的年份表示（000-9999）</td></tr><tr><td>%m</td><td>月份（01-12）</td></tr><tr><td>%d</td><td>月内中的一天（0-31）</td></tr><tr><td>%H</td><td>24小时制小时数（0-23）</td></tr><tr><td>%I</td><td>12小时制小时数（01-12）</td></tr><tr><td>%M</td><td>分钟数（00=59）</td></tr><tr><td>%S</td><td>秒（00-59）</td></tr><tr><td>%a</td><td>本地简化星期名称</td></tr><tr><td>%A</td><td>本地完整星期名称</td></tr><tr><td>%b</td><td>本地简化的月份名称</td></tr><tr><td>%B</td><td>本地完整的月份名称</td></tr><tr><td>%c</td><td>本地相应的日期表示和时间表示</td></tr><tr><td>%j</td><td>年内的一天（001-366）</td></tr><tr><td>%p</td><td>本地A.M.或P.M.的等价符</td></tr><tr><td>%U</td><td>一年中的星期数（00-53）星期天为星期的开始</td></tr><tr><td>%w</td><td>星期（0-6），星期天为星期的开始</td></tr><tr><td>%W</td><td>一年中的星期数（00-53）星期一为星期的开始</td></tr><tr><td>%x</td><td>本地相应的日期表示</td></tr><tr><td>%X</td><td>本地相应的时间表示</td></tr><tr><td>%Z</td><td>当前时区的名称</td></tr><tr><td>%%</td><td>%号本身</td></tr></tbody></table><p>元组(struct_time) ：struct_time元组共有9个元素共九个元素:(年，月，日，时，分，秒，一年中 第几周，一年中第几天等）</p><table><thead><tr><th>索引（Index）</th><th>属性（Attribute）</th><th>值（Values）</th></tr></thead><tbody><tr><td>0</td><td>tm_year（年）</td><td>比如2011</td></tr><tr><td>1</td><td>tm_mon（月）</td><td>1月12日</td></tr><tr><td>2</td><td>tm_mday（日）</td><td>1月31日</td></tr><tr><td>3</td><td>tm_hour（时）</td><td>0 - 23</td></tr><tr><td>4</td><td>tm_min（分）</td><td>0 - 59</td></tr><tr><td>5</td><td>tm_sec（秒）</td><td>0 - 60</td></tr><tr><td>6</td><td>tm_wday（weekday）</td><td>0 - 6（0表示周一）</td></tr><tr><td>7</td><td>tm_yday（一年中的第几天）</td><td>1 - 366</td></tr><tr><td>8</td><td>tm_isdst（是否是夏令时）</td><td>默认为0</td></tr></tbody></table><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cos">import time<br><br># 第一种时间格式，时间戳的形式<br><span class="hljs-keyword">print</span>(time.time())<br><br># 第二种时间格式，格式化的时间<br><span class="hljs-keyword">print</span>(time.strftime(&#x27;<span class="hljs-built_in">%Y</span>-<span class="hljs-built_in">%m</span>-<span class="hljs-built_in">%d</span> <span class="hljs-built_in">%X</span>&#x27;))<br><span class="hljs-keyword">print</span>(time.strftime(&#x27;<span class="hljs-built_in">%Y</span>-<span class="hljs-built_in">%m</span>-<span class="hljs-built_in">%d</span> <span class="hljs-built_in">%H</span>-<span class="hljs-built_in">%M</span>-<span class="hljs-built_in">%S</span>&#x27;))<br><br># 第三种时间格式，结构化的时间，是一个元组<br><span class="hljs-keyword">print</span>(time.localtime())<br></code></pre></td></tr></table></figure><p>小结：时间戳是计算机能够识别的时间；时间字符串是人能够看懂的时间；元组则是用来操作时间的</p><p><strong>几种格式之间的转换</strong></p><p><img src="image-20220708192657540.png" alt="转换示意图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 格式化时间 ----&gt; 结构化时间</span><br>ft = time.strftime(<span class="hljs-string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ft&#x27;</span>,ft)<br>st = time.strptime(ft,<span class="hljs-string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;st&#x27;</span>,st)<br><span class="hljs-comment"># 结构化时间 ---&gt; 时间戳</span><br>t = time.mktime(st)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t&#x27;</span>,t)<br><br><span class="hljs-comment"># 时间戳 ----&gt; 结构化时间</span><br>t = time.time()<br>st = time.localtime(t)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;st&#x27;</span>,st)<br><span class="hljs-comment"># 结构化时间 ---&gt; 格式化时间</span><br>ft = time.strftime(<span class="hljs-string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>,st)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ft&#x27;</span>,ft)<br></code></pre></td></tr></table></figure><p><img src="image-20220708192814418.png" alt="转换示意图"></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sas">import time<br><br>#结构化时间 --&gt; <span class="hljs-title function_">%a</span> <span class="hljs-title function_">%b</span> <span class="hljs-title function_">%d</span> <span class="hljs-title function_">%H</span>:<span class="hljs-title function_">%M</span>:<span class="hljs-title function_">%S</span> <span class="hljs-title function_">%Y</span>串<br>#time.asc<span class="hljs-meta">time</span>(结构化时间) 如果不传参数，直接返回当前时间的格式化串<br>pr<span class="hljs-meta">int</span>(time.asc<span class="hljs-meta">time</span>(time.local<span class="hljs-meta">time</span>(1550312090.4021888)))<br><br>#时间戳 --&gt; <span class="hljs-title function_">%a</span> <span class="hljs-title function_">%d</span> <span class="hljs-title function_">%d</span> <span class="hljs-title function_">%H</span>:<span class="hljs-title function_">%M</span>:<span class="hljs-title function_">%S</span> <span class="hljs-title function_">%Y</span>串<br>#time.c<span class="hljs-meta">time</span>(时间戳) 如果不传参数，直接返回当前时间的格式化串<br>pr<span class="hljs-meta">int</span>(time.c<span class="hljs-meta">time</span>(1550312090.4021888))<br></code></pre></td></tr></table></figure><p>计算时间差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br>start_time=time.mktime(time.strptime(<span class="hljs-string">&#x27;2017-09-11 08:30:00&#x27;</span>,<span class="hljs-string">&#x27;%Y-%m-%d</span><br><span class="hljs-string">%H:%M:%S&#x27;</span>))<br>end_time=time.mktime(time.strptime(<span class="hljs-string">&#x27;2019-09-12 11:00:50&#x27;</span>,<span class="hljs-string">&#x27;%Y-%m-%d</span><br><span class="hljs-string">%H:%M:%S&#x27;</span>))<br>dif_time=end_time-start_time<br>struct_time=time.gmtime(dif_time)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;过去了%d年%d月%d天%d小时%d分钟%d秒&#x27;</span>%(struct_time.tm_year-<span class="hljs-number">1970</span>,struct_time.tm_mon-<span class="hljs-number">1</span>,<br>struct_time.tm_mday-<span class="hljs-number">1</span>,struct_time.tm_hour,<br><br>struct_time.tm_min,struct_time.tm_sec))<br></code></pre></td></tr></table></figure><p>显示进度条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">101</span>,<span class="hljs-number">2</span>):<br>time.sleep(<span class="hljs-number">0.1</span>)<br>char_num = i//<span class="hljs-number">2</span><br>per_str = <span class="hljs-string">&#x27;\r%s%% : %s\n&#x27;</span> % (i, <span class="hljs-string">&#x27;*&#x27;</span> * char_num) \<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">100</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;\r%s%% : %s&#x27;</span> % (i,<span class="hljs-string">&#x27;*&#x27;</span>*char_num)<br><span class="hljs-built_in">print</span>(per_str,end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>这是换一种方式显示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> time<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;游戏开始加载&quot;</span>)<br><span class="hljs-keyword">for</span> i in <span class="hljs-keyword">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>):<br>time.sleep(<span class="hljs-number">0.1</span>)<br>char_num = i <span class="hljs-comment">// 2</span><br>per_str = <span class="hljs-string">&#x27;\r[%s&#x27;</span> % (<span class="hljs-string">&#x27;#&#x27;</span> * char_num)<br><br><span class="hljs-built_in">print</span>(per_str+<span class="hljs-string">&quot;%s&quot;</span> % <span class="hljs-string">&quot;_&quot;</span> *(<span class="hljs-number">50</span> - char_num), <span class="hljs-string">&quot;%s%%]&quot;</span> % i, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="datatime模块">datatime模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># datatime模块</span><br><span class="hljs-keyword">import</span> datetime<br>now_time = datetime.datetime.now() <span class="hljs-comment"># 现在的时间</span><br><span class="hljs-comment"># 只能调整的字段：weeks days hours minutes seconds</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(weeks=<span class="hljs-number">3</span>)) <span class="hljs-comment"># 三周后</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(weeks=-<span class="hljs-number">3</span>)) <span class="hljs-comment"># 三周前</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(days=-<span class="hljs-number">3</span>)) <span class="hljs-comment"># 三天前</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(days=<span class="hljs-number">3</span>)) <span class="hljs-comment"># 三天后</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(hours=<span class="hljs-number">5</span>)) <span class="hljs-comment"># 5小时后</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(hours=-<span class="hljs-number">5</span>)) <span class="hljs-comment"># 5小时前</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(minutes=-<span class="hljs-number">15</span>)) <span class="hljs-comment"># 15分钟前</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(minutes=<span class="hljs-number">15</span>)) <span class="hljs-comment"># 15分钟后</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(seconds=-<span class="hljs-number">70</span>)) <span class="hljs-comment"># 70秒前</span><br><span class="hljs-built_in">print</span>(datetime.datetime.now() + datetime.timedelta(seconds=<span class="hljs-number">70</span>)) <span class="hljs-comment"># 70秒后</span><br>current_time = datetime.datetime.now()<br><span class="hljs-comment"># 可直接调整到指定的 年 月 日 时 分 秒 等</span><br><br><span class="hljs-built_in">print</span>(current_time.replace(year=<span class="hljs-number">1977</span>)) <span class="hljs-comment"># 直接调整到1977年</span><br><span class="hljs-built_in">print</span>(current_time.replace(month=<span class="hljs-number">1</span>)) <span class="hljs-comment"># 直接调整到1月份</span><br><span class="hljs-built_in">print</span>(current_time.replace(year=<span class="hljs-number">1989</span>,month=<span class="hljs-number">4</span>,day=<span class="hljs-number">25</span>)) <span class="hljs-comment"># 1989-04-25</span><br><span class="hljs-number">18</span>:<span class="hljs-number">49</span>:<span class="hljs-number">05.898601</span><br><br><span class="hljs-comment"># 将时间戳转化成时间</span><br><span class="hljs-built_in">print</span>(datetime.date.fromtimestamp(<span class="hljs-number">1232132131</span>)) <span class="hljs-comment"># 2009-01-17</span><br></code></pre></td></tr></table></figure><h2 id="random模块">random模块</h2><p>用来生成随机数模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-built_in">print</span>(random.random()) <span class="hljs-comment"># 大于0且小于1之间的小数</span><br><span class="hljs-built_in">print</span>(random.uniform(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 大于1小于3的小数</span><br><br><span class="hljs-built_in">print</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)) <span class="hljs-comment"># 大于等于1且小于等于5之间的整数</span><br><span class="hljs-built_in">print</span>(random.randrange(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment"># 大于等于1且小于10之间的奇数</span><br><br>ret = random.choice([<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;23&#x27;</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]) <span class="hljs-comment"># 1或者23或者[4,5]</span><br><span class="hljs-built_in">print</span>(ret)<br><br>a,b = random.sample([<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;23&#x27;</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],<span class="hljs-number">2</span>) <span class="hljs-comment"># 列表元素任意2个组合 sample(seq, n) 从</span><br>序列seq中选择n个随机且独立的元素<br><span class="hljs-built_in">print</span>(a,b)<br><span class="hljs-comment"># 发牌</span><br><br>item = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>random.shuffle(item) <span class="hljs-comment"># 打乱次序</span><br><span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>生成随机验证码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">v_code</span>():<br><br>code = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><br>num=random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>)<br>alf=<span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">65</span>,<span class="hljs-number">90</span>)) <span class="hljs-comment">#chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。返回值是当前整数对应的 ASCII 字符。</span><br>add=random.choice([num,alf])<br>code=<span class="hljs-string">&quot;&quot;</span>.join([code,<span class="hljs-built_in">str</span>(add)])<br><br><span class="hljs-keyword">return</span> code<br><br><span class="hljs-built_in">print</span>(v_code())<br></code></pre></td></tr></table></figure><p>注册登录案例添加验证码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_code</span>():<br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        num = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>)<br>        alf = <span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">65</span>, <span class="hljs-number">90</span>))  <span class="hljs-comment"># 用ASCII码来返回大小写的字母</span><br>        add = random.choice([num, alf])<br>        code = <span class="hljs-string">&#x27;&#x27;</span>.join([code, <span class="hljs-built_in">str</span>(add)])<br>    <span class="hljs-comment"># print(code)</span><br>    <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure><p>斗地主发牌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fight_whit_the_landowner</span>():  <span class="hljs-comment"># 斗地主游戏代码</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;斗地主游戏即将开始&quot;</span>)<br>    time_line()<br>    ci_shu = <span class="hljs-number">0</span><br>    farmer1 = []<br>    farmer2 = []<br>    landowner = []<br>    card = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">11</span>:<br>            i = <span class="hljs-string">&#x27;J&#x27;</span><br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-number">12</span>:<br>            i = <span class="hljs-string">&#x27;Q&#x27;</span><br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-number">13</span>:<br>            i = <span class="hljs-string">&#x27;K&#x27;</span><br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-number">1</span>:<br>            i = <span class="hljs-string">&#x27;A&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>):<br>        card.append(<span class="hljs-string">&quot;♠&quot;</span> + <span class="hljs-built_in">str</span>(i))<br>        card.append(<span class="hljs-string">&quot;♣&quot;</span> + <span class="hljs-built_in">str</span>(i))<br>        card.append(<span class="hljs-string">&quot;♦&quot;</span> + <span class="hljs-built_in">str</span>(i))<br>        card.append(<span class="hljs-string">&quot;♥&quot;</span> + <span class="hljs-built_in">str</span>(i))<br>    card.append(<span class="hljs-string">&#x27;大王&#x27;</span>)<br>    card.append(<span class="hljs-string">&#x27;小王&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>        random.shuffle(card)<br><br>    <span class="hljs-keyword">while</span> ci_shu &lt; <span class="hljs-number">51</span>:<br>        farmer1.append(card[<span class="hljs-number">1</span>])<br>        farmer2.append(card[ci_shu + <span class="hljs-number">2</span>])<br>        landowner.append(card[ci_shu + <span class="hljs-number">3</span>])<br>        ci_shu += <span class="hljs-number">3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;底牌：%s&#x27;&#x27;&#x27;</span> % card[<span class="hljs-number">52</span>:<span class="hljs-number">55</span>])<br>    landowner.append(card[<span class="hljs-number">52</span>:<span class="hljs-number">55</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;一号农民的牌：%s&#x27;&#x27;&#x27;</span> % farmer1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;二号农民的牌：%s&#x27;&#x27;&#x27;</span> % farmer2)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;地主的牌：%s&#x27;&#x27;&#x27;</span> % landowner)<br>    choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入again重新来一局，输入quit退出&quot;</span>)<br>    <span class="hljs-keyword">if</span> choice == <span class="hljs-string">&#x27;again&#x27;</span>:<br>        fight_whit_the_landowner()<br>    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&#x27;quit&#x27;</span>:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span><br>        <br>fight_with_landowner()<br></code></pre></td></tr></table></figure><h1>OS模块</h1><p>os模块是与操作系统交互的一个接口</p><p>当前执行这个python文件的工作目录相关的工作路径</p><table><thead><tr><th>os.getcwd()</th><th>获取当前工作目录，即当前python脚本工作的目录路径</th></tr></thead><tbody><tr><td>os.chdir(“dirname”)</td><td>改变当前脚本工作目录；相当于shell下cd</td></tr><tr><td>os.curdir</td><td>返回当前目录: (‘.’)</td></tr><tr><td>os.pardir</td><td>获取当前目录的父目录字符串名：(‘…’)</td></tr></tbody></table><p>文件夹相关</p><table><thead><tr><th>os.makedirs(‘dirname1/dirname2’)</th><th>可生成多层递归目录</th></tr></thead><tbody><tr><td>os.removedirs(‘dirname1’)</td><td>若目录为空，则删除，并递归到上一级目录，如若也为 空，则删除，依此类推</td></tr><tr><td>os.mkdir(‘dirname’)</td><td>生成单级目录；相当于shell中mkdir dirname</td></tr><tr><td>os.rmdir(‘dirname’)</td><td>删除单级空目录，若目录不为空则无法删除，报错；相 当于shell中rmdir dirname</td></tr><tr><td>os.listdir(‘dirname’)</td><td>列出指定目录下的所有文件和子目录，包括隐藏文件， 并以列表方式打印</td></tr></tbody></table><p>文件相关</p><table><thead><tr><th>os.remove()</th><th>删除一个文件</th></tr></thead><tbody><tr><td>os.rename(“oldname”,“newname”)</td><td>重命名文件/目录</td></tr><tr><td>os.stat(‘path/filename’)</td><td>获取文件/目录信息</td></tr></tbody></table><p>操作系统差异相关</p><table><thead><tr><th>os.sep</th><th>输出操作系统特定的路径分隔符，win下为&quot;&quot;,Linux下为&quot;/&quot;</th></tr></thead><tbody><tr><td>os.sep</td><td>输出当前平台使用的行终止符，win下为&quot;\t\n&quot;,Linux下为&quot;\n&quot;</td></tr><tr><td>os.pathsep</td><td>输出当前平台使用的行终止符，win下为&quot;\t\n&quot;,Linux下为&quot;\n&quot;</td></tr><tr><td><a href="http://os.name">os.name</a></td><td>输出当前平台使用的行终止符，win下为&quot;\t\n&quot;,Linux下为&quot;\n&quot;</td></tr></tbody></table><p>执行系统命令相关</p><table><thead><tr><th>执行系统命令相关</th><th>os.environ</th></tr></thead><tbody><tr><td>执行系统命令相关</td><td>运行shell命令，获取执行结果</td></tr><tr><td>os.environ</td><td>获取系统环境变量</td></tr></tbody></table><p>path系列，和路径相关</p><table><thead><tr><th>os.path.abspath(path)</th><th>返回path规范化的绝对路径</th></tr></thead><tbody><tr><td>os.path.split(path)</td><td>将path分割成目录和文件名二元组返回</td></tr><tr><td>os.path.dirname(path)</td><td>返回path的目录。其实就是os.path.split(path)的第一个元素</td></tr><tr><td>os.path.basename(path)</td><td>返回path最后的文件名。如何path以／或\结尾，那么就会返回空 值，即os.path.split(path)的第二个元素。</td></tr><tr><td>os.path.exists(path)</td><td>如果path存在，返回True；如果path不存在，返回False</td></tr><tr><td>os.path.isabs(path)</td><td>如果path是绝对路径，返回True</td></tr><tr><td>os.path.isfile(path)</td><td>如果path是一个存在的文件，返回True。否则返回False</td></tr><tr><td>os.path.isdir(path)</td><td>如果path是一个存在的目录，则返回True。否则返回False</td></tr><tr><td>os.path.join(path1[, path2[, …]])</td><td>将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</td></tr><tr><td>os.path.getatime(path)</td><td>返回path所指向的文件或者目录的最后访问时间</td></tr><tr><td>os.path.getmtime(path)</td><td>返回path所指向的文件或者目录的最后修改时间</td></tr><tr><td>os.path.getsize(path)</td><td>返回path的大小</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(os.stat(<span class="hljs-string">&#x27;.\config&#x27;</span>)) <span class="hljs-comment"># 当前目录下的config文件的信息</span><br><br><span class="hljs-comment"># 运行结果</span><br><span class="hljs-comment"># os.stat_result(st_mode=33206, st_ino=2814749767208887, st_dev=1788857329,</span><br>st_nlink=<span class="hljs-number">1</span>, st_uid=<span class="hljs-number">0</span>, st_gid=<span class="hljs-number">0</span>, st_size=<span class="hljs-number">185</span>, st_atime=<span class="hljs-number">1550285376</span>,<br>st_mtime=<span class="hljs-number">1550285376</span>, st_ctime=<span class="hljs-number">1550285376</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>st_mode</th><th>inode 保护模式</th></tr></thead><tbody><tr><td>st_ino</td><td>inode 节点号</td></tr><tr><td>st_dev</td><td>inode 驻留的设备</td></tr><tr><td>st_nlink</td><td>inode 的链接数</td></tr><tr><td>st_uid</td><td>所有者的用户ID</td></tr><tr><td>st_gid</td><td>所有者的组ID</td></tr><tr><td>st_size</td><td>普通文件以字节为单位的大小；包含等待某些特殊文件的数据</td></tr><tr><td>st_atime</td><td>上次访问的时间</td></tr><tr><td>st_mtime</td><td>最后一次修改的时间</td></tr><tr><td>st_ctime</td><td>由操作系统报告的&quot;ctime&quot;。在某些系统上（如Unix）是最新的元数据更改的时间， 在其它系统上（如Windows）是创建时间（详细信息参见平台的文档）</td></tr></tbody></table><h1>sys模块</h1><p>sys模块是与python解释器交互的一个接口</p><table><thead><tr><th>sys.argv</th><th>命令行参数List，第一个元素是程序本身路径，可以接收一些执行程序时传递的 参数</th></tr></thead><tbody><tr><td>sys.exit(n)</td><td>退出程序，正常退出时exit(0),错误退出sys.exit(1)</td></tr><tr><td>sys.version</td><td>获取Python解释程序的版本信息</td></tr><tr><td>sys.path</td><td>返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</td></tr><tr><td>sys.platform</td><td>返回操作系统平台名称</td></tr></tbody></table><h1>re模块(用于网络爬虫)</h1><h2 id="正则表达式">正则表达式</h2><p>正则就是用一些具有特殊含义的符号组合到一起（称为正则表达式）来描述字符或者字符串的方法。或 者说：正则就是用来描述一类事物的规则。（在Python中）它内嵌在Python中，并通过 re 模块实现。 正则表达式模式被编译成一系列的字节码，然后由用 C 编写的匹配引擎执行</p><table><thead><tr><th style="text-align:left">元字符</th><th>匹配内容</th></tr></thead><tbody><tr><td style="text-align:left">\w</td><td>匹配字母（包含中文）或数字或下划线</td></tr><tr><td style="text-align:left">\W</td><td>匹配非字母（包含中文）或数字或下划线</td></tr><tr><td style="text-align:left">\s</td><td>匹配任意的空白符</td></tr><tr><td style="text-align:left">\S</td><td>匹配任意非空白符</td></tr><tr><td style="text-align:left">\d</td><td>匹配数字</td></tr><tr><td style="text-align:left">\D</td><td>匹配非数字</td></tr><tr><td style="text-align:left">\A</td><td>从字符串开头匹配</td></tr><tr><td style="text-align:left">\z</td><td>匹配字符串的结束，如果是换行，只匹配到换行前的结果</td></tr><tr><td style="text-align:left">\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:left">\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:left">^</td><td>匹配字符串的开始</td></tr><tr><td style="text-align:left">$</td><td>匹配字符串的结尾</td></tr><tr><td style="text-align:left">.</td><td>匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任 意字符。</td></tr><tr><td style="text-align:left">[…]</td><td>匹配字符组中的字符</td></tr><tr><td style="text-align:left">[^…]</td><td>匹配除了字符组中的字符的所有字符</td></tr><tr><td style="text-align:left">*</td><td>匹配0个或者多个左边的字符。</td></tr><tr><td style="text-align:left">+</td><td>匹配一个或者多个左边的字符。</td></tr><tr><td style="text-align:left">?</td><td>匹配0个或者1个左边的字符，非贪婪方式。</td></tr><tr><td style="text-align:left">{n}</td><td>精准匹配n个前面的表达式。</td></tr><tr><td style="text-align:left">{n,m}</td><td>匹配n到m次由前面的正则表达式定义的片段，贪婪方式</td></tr><tr><td style="text-align:left">()</td><td>匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h2 id="单字符匹配">单字符匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\w&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\W&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\s&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\S&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\d&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\D&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\A上大&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;^上大&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;666\z&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)666&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;666\Z&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)666&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;666$&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)666&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;\t&#x27;</span>,<span class="hljs-string">&#x27;上大人123asdfg%^&amp;*(_ \t \n)&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="重复匹配">重复匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a.b&#x27;</span>, <span class="hljs-string">&#x27;ab aab a*b a2b a牛b a\nb&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a.b&#x27;</span>, <span class="hljs-string">&#x27;ab aab a*b a2b a牛b a\nb&#x27;</span>,re.DOTALL))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a?b&#x27;</span>, <span class="hljs-string">&#x27;ab aab abb aaaab a牛b aba**b&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a*b&#x27;</span>, <span class="hljs-string">&#x27;ab aab aaab abbb&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;ab*&#x27;</span>, <span class="hljs-string">&#x27;ab aab aaab abbbbb&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a+b&#x27;</span>, <span class="hljs-string">&#x27;ab aab aaab abbb&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a&#123;2,4&#125;b&#x27;</span>, <span class="hljs-string">&#x27;ab aab aaab aaaaabb&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a.*b&#x27;</span>, <span class="hljs-string">&#x27;ab aab a*()b&#x27;</span>)) <span class="hljs-comment">#贪婪</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a.*?b&#x27;</span>, <span class="hljs-string">&#x27;ab a1b a*()b, aaaaaab&#x27;</span>))<br><span class="hljs-comment"># .*? 此时的?不是对左边的字符进行0次或者1次的匹配,</span><br><span class="hljs-comment"># 而只是针对.*这种贪婪匹配的模式进行一种限定:告知他要遵从非贪婪匹配 推荐使用!</span><br><br><span class="hljs-comment"># []: 括号中可以放任意一个字符,一个中括号代表一个字符</span><br><span class="hljs-comment"># - 在[]中表示范围,如果想要匹配上- 那么这个-符号不能放在中间.</span><br><span class="hljs-comment"># ^ 在[]中表示取反的意思.</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a.b&#x27;</span>, <span class="hljs-string">&#x27;a1b a3b aeb a*b arb a_b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[abc]b&#x27;</span>, <span class="hljs-string">&#x27;aab abb acb adb afb a_b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[0-9]b&#x27;</span>, <span class="hljs-string">&#x27;a1b a3b aeb a*b arb a_b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[a-z]b&#x27;</span>, <span class="hljs-string">&#x27;a1b a3b aeb a*b arb a_b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[a-zA-Z]b&#x27;</span>, <span class="hljs-string">&#x27;aAb aWb aeb a*b arb a_b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[0-9][0-9]b&#x27;</span>, <span class="hljs-string">&#x27;a11b a12b a34b a*b arb a_b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[*-+]b&#x27;</span>,<span class="hljs-string">&#x27;a-b a*b a+b a/b a6b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[-*+]b&#x27;</span>,<span class="hljs-string">&#x27;a-b a*b a+b a/b a6b&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a[^a-z]b&#x27;</span>, <span class="hljs-string">&#x27;acb adb a3b a*b&#x27;</span>))<br><br><span class="hljs-comment"># 分组：() 制定一个规则,将满足规则的结果匹配出来</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;(.*?)_sb&#x27;</span>, <span class="hljs-string">&#x27;cs_sb zhao_sb 日天_sb&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;href=&quot;(.*?)&quot;&#x27;</span>,<span class="hljs-string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;点击&lt;/a&gt;&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;compan(y|ies)&#x27;</span>,<span class="hljs-string">&#x27;Too many companies have gone bankrupt, and</span><br><span class="hljs-string">the next one is my company&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;compan(?:y|ies)&#x27;</span>,<span class="hljs-string">&#x27;Too many companies have gone bankrupt,</span><br><span class="hljs-string">and the next one is my company&#x27;</span>))<br><span class="hljs-comment"># 分组() 中加入?: 表示将整体匹配出来而不只是()里面的内容</span><br></code></pre></td></tr></table></figure><h2 id="常用方法举例">常用方法举例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># findall 全部找到返回一个列表</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;aghjmnbghagjmnbafgv&#x27;</span>))<br><br><span class="hljs-comment"># search 只到找到第一个匹配然后返回一个包含匹配信息的对象,该对象可以通过调用group()方法</span><br>得到匹配的字符串,如果字符串没有匹配，则返回<span class="hljs-literal">None</span><br><span class="hljs-built_in">print</span>(re.search(<span class="hljs-string">&#x27;sb|chensong&#x27;</span>, <span class="hljs-string">&#x27;chensong sb sb demon 日天&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.search(<span class="hljs-string">&#x27;chensong&#x27;</span>, <span class="hljs-string">&#x27;chensong sb sb barry 日天&#x27;</span>).group())<br><br><span class="hljs-comment"># match：None,同search,不过在字符串开始处进行匹配,完全可以用search+^代替match</span><br><span class="hljs-built_in">print</span>(re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;sb|chensong&#x27;</span>, <span class="hljs-string">&#x27;chensong sb sb demon 日天&#x27;</span>))<br><span class="hljs-built_in">print</span>(re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;chensong&#x27;</span>, <span class="hljs-string">&#x27;chensong sb sb barry 日天&#x27;</span>).group())<br><br><span class="hljs-comment"># split 分割 可按照任意分割符进行分割,中括号里面写的所有符号都可以进行分割</span><br><span class="hljs-built_in">print</span>(re.split(<span class="hljs-string">&#x27;[:：,;；，]&#x27;</span>,<span class="hljs-string">&#x27;1;3,c,a：3&#x27;</span>))<br><br><span class="hljs-comment"># sub 替换</span><br><span class="hljs-built_in">print</span>(re.sub(<span class="hljs-string">&#x27;帅哥&#x27;</span>,<span class="hljs-string">&#x27;sb&#x27;</span>,<span class="hljs-string">&#x27;陈松是一个帅哥&#x27;</span>))<br><br><span class="hljs-comment"># complie 根据包含的正则表达式的字符串创建模式对象。可以实现更有效率的匹配。</span><br>obj = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;\d&#123;2&#125;&#x27;</span>)<br><span class="hljs-built_in">print</span>(obj.search(<span class="hljs-string">&#x27;abc123eeee&#x27;</span>).group())<br><span class="hljs-built_in">print</span>(obj.findall(<span class="hljs-string">&#x27;1231232aasd&#x27;</span>))<br><br>ret = re.finditer(<span class="hljs-string">&#x27;\d&#x27;</span>,<span class="hljs-string">&#x27;asd123affess32432&#x27;</span>) <span class="hljs-comment"># finditer返回一个存放匹配结果的迭代器</span><br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(ret).group())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(ret).group())<br><span class="hljs-built_in">print</span>([i.group() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ret])<br></code></pre></td></tr></table></figure><h2 id="命名分组举例">命名分组举例</h2><p>命名分组匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>ret = re.search(<span class="hljs-string">&quot;&lt;(?P&lt;tag_name&gt;\w+)&gt;\w+&lt;/(?P=tag_name)&gt;&quot;</span>,<span class="hljs-string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>)<br><span class="hljs-comment">#利用?P的方式可以给匹配的东西添加一个标签名称，一次可以匹配多个内容，利用标签名称可以去取</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-string">&#x27;tag_name&#x27;</span>))<br><span class="hljs-built_in">print</span>(ret.group())<br><br>ret = re.search(<span class="hljs-string">r&quot;&lt;(\w+)&gt;\w+&lt;/\1&gt;&quot;</span>,<span class="hljs-string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>)<br><span class="hljs-comment"># 如果不给组起名字，也可以用\序号来找到对应的组，表示要找的内容和前面的组内容一致</span><br><span class="hljs-comment"># 获取的匹配结果可以直接用group(序号)拿到对应的值</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(ret.group())<br></code></pre></td></tr></table></figure><p>利用re模块实现网络爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 爬取小姐姐图片</span><br>https://www<span class="hljs-number">.3</span>gbizhi.com/meinv/index_1.html<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 1.找个网站</span><br><span class="hljs-comment"># 2.找一下页面的规律</span><br><span class="hljs-comment"># 3.找一下图片链接和图片名</span><br><span class="hljs-comment"># 4.想办法下载</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> Request, urlopen, urlretrieve<br><br>path = os.getcwd() + os.sep + <span class="hljs-string">&quot;bizhi&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(path):<br>        os.makedirs(path)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        url=<span class="hljs-string">f&quot;https://www.3gbizhi.com/meinv/index_<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i)&#125;</span>.html&quot;</span><br>        <span class="hljs-built_in">print</span>(url)<br>        headers = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36&#x27;</span><br>        &#125;<br>        request=Request(url=url,headers=headers)<br>        content=urlopen(request).read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-comment"># lazysrc=&quot;(.*?jpg)&quot;</span><br>        <span class="hljs-comment"># img alt=&quot;(.*?)&quot;</span><br>        link=re.findall(<span class="hljs-string">&#x27;lazysrc=&quot;(.*?jpg)&quot;&#x27;</span>,content)<br>        name=re.findall(<span class="hljs-string">&#x27;img alt=&quot;(.*?)&quot;&#x27;</span>,content)<br>        ziplist=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(name,link))<br>        <span class="hljs-keyword">for</span> imgurl <span class="hljs-keyword">in</span> ziplist:<br>            urlretrieve(imgurl[<span class="hljs-number">1</span>],<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;path&#125;</span><span class="hljs-subst">&#123;os.sep&#125;</span><span class="hljs-subst">&#123;imgurl[<span class="hljs-number">0</span>]&#125;</span>.jpg&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要下载的页数:&quot;</span>))<br>    download(n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载完成，请查看文件夹&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 爬取豆瓣top250</span><br>https://movie.douban.com/top250?start=<span class="hljs-number">0</span>&amp;<span class="hljs-built_in">filter</span>=<br></code></pre></td></tr></table></figure><h1>shutil模块</h1><p>高级的 文件、文件夹、压缩包 处理模块</p><h2 id="shutil-copyfileobj-fsrc-fdst-length">shutil.copyfileobj(fsrc, fdst[, length])</h2><p>将文件内容拷贝到另一个文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.copyfileobj(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>),<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;config.new&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="shutil-copyfile-src-dst">shutil.copyfile(src, dst)</h2><p>拷贝文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.copyfile(<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;config1&#x27;</span>) <span class="hljs-comment"># 目标文件无需存在</span><br></code></pre></td></tr></table></figure><h2 id="shutil-copymode-src-dst">shutil.copymode(src, dst)</h2><p>仅拷贝权限。内容、组、用户均不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.copymode(<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;config1&#x27;</span>) <span class="hljs-comment"># 目标文件必须存在</span><br></code></pre></td></tr></table></figure><h2 id="shutil-copystat-src-dst">shutil.copystat(src, dst)</h2><p>仅拷贝状态的信息，包括：mode bits, atime, mtime, flags</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.copystat(<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;config1&#x27;</span>) <span class="hljs-comment"># 目标文件必须存在</span><br></code></pre></td></tr></table></figure><h2 id="shutil-copy-src-dst">shutil.copy(src, dst)</h2><p>拷贝文件和权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.copy(<span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;config1&#x27;</span>) <span class="hljs-comment"># 目标文件必须存在</span><br></code></pre></td></tr></table></figure><h2 id="shutil-ignore-patterns-patterns">shutil.ignore_patterns(*patterns)</h2><h2 id="shutil-copytree-src-dst-symlinks-False-ignore-None">shutil.copytree(src, dst, symlinks=False, ignore=None)</h2><p>递归的去拷贝文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.copytree(<span class="hljs-string">&#x27;folder1&#x27;</span>, <span class="hljs-string">&#x27;folder2&#x27;</span>, ignore=shutil.ignore_patterns(<span class="hljs-string">&#x27;*.pyc&#x27;</span>,<br><span class="hljs-string">&#x27;tmp*&#x27;</span>))<br><span class="hljs-comment"># 目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除</span><br><span class="hljs-comment"># 硬链接</span><br><br>shutil.copytree(<span class="hljs-string">&#x27;f1&#x27;</span>, <span class="hljs-string">&#x27;f2&#x27;</span>, symlinks=<span class="hljs-literal">True</span>,<br>ignore=shutil.ignore_patterns(<span class="hljs-string">&#x27;*.pyc&#x27;</span>, <span class="hljs-string">&#x27;tmp*&#x27;</span>))<br><span class="hljs-comment"># 软链接</span><br></code></pre></td></tr></table></figure><h2 id="shutil-rmtree-path-ignore-errors-onerror">shutil.rmtree(path[, ignore_errors[, onerror]])</h2><p>递归的去删除文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.rmtree(<span class="hljs-string">&#x27;folder1&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="shutil-move-src-dst">shutil.move(src, dst)</h2><p>递归的去移动文件，它类似mv命令，其实就是重命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><br>shutil.move(<span class="hljs-string">&#x27;folder1&#x27;</span>, <span class="hljs-string">&#x27;folder3&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="shutil-make-archive-base-name-format-…">shutil.make_archive(base_name, format,…)</h2><ul class="lvl-0"><li class="lvl-2"><p>创建压缩包并返回文件路径，例如：zip、tar</p><ul class="lvl-2"><li class="lvl-4">base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目 录，否则保存至指定路径<ul class="lvl-4"><li class="lvl-6">如 data_bak =&gt;保存至当前路径</li><li class="lvl-6">如：/tmp/data_bak =&gt;保存至/tmp/</li></ul></li><li class="lvl-4">format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar”</li><li class="lvl-4">root_dir： 要压缩的文件夹路径（默认当前目录）</li><li class="lvl-4">owner： 用户，默认当前用户</li><li class="lvl-4">group： 组，默认当前组</li><li class="lvl-4">logger： 用于记录日志，通常是logging.Logger对象</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将 /data 下的文件打包放置当前程序目录</span><br><span class="hljs-keyword">import</span> shutil<br>ret = shutil.make_archive(<span class="hljs-string">&quot;data_bak&quot;</span>, <span class="hljs-string">&#x27;gztar&#x27;</span>, root_dir=<span class="hljs-string">&#x27;/data&#x27;</span>)<br><br><span class="hljs-comment"># 将 /data下的文件打包放置 /tmp/目录</span><br><span class="hljs-keyword">import</span> shutil<br>ret = shutil.make_archive(<span class="hljs-string">&quot;/tmp/data_bak&quot;</span>, <span class="hljs-string">&#x27;gztar&#x27;</span>, root_dir=<span class="hljs-string">&#x27;/data&#x27;</span>)<br></code></pre></td></tr></table></figure><p>shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><br><span class="hljs-comment"># 压缩</span><br>z = zipfile.ZipFile(<span class="hljs-string">&#x27;laxi.zip&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>z.write(<span class="hljs-string">&#x27;a.log&#x27;</span>)<br>z.write(<span class="hljs-string">&#x27;data.data&#x27;</span>)<br>z.close()<br><br><span class="hljs-comment"># 解压</span><br>z = zipfile.ZipFile(<span class="hljs-string">&#x27;laxi.zip&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>z.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>)<br>z.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br><br><span class="hljs-comment"># 压缩文件</span><br>t = tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/tmp/egon.tar&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>t.add(<span class="hljs-string">&#x27;/test1/a.py&#x27;</span>,arcname=<span class="hljs-string">&#x27;a.bak&#x27;</span>)<br>t.add(<span class="hljs-string">&#x27;/test1/b.py&#x27;</span>,arcname=<span class="hljs-string">&#x27;b.bak&#x27;</span>)<br>t.close()<br><br><span class="hljs-comment"># 解压缩文件</span><br>t = tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/tmp/egon.tar&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>t.extractall(<span class="hljs-string">&#x27;/egon&#x27;</span>)<br>t.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的模块和包</title>
    <link href="/20220930/Python%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <url>/20220930/Python%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1>什么是模块</h1><ol><li class="lvl-4">使用python编写的代码（<code>.py</code>文件）</li><li class="lvl-4">已被编译为共享库或DLL的C或C++扩展</li><li class="lvl-3">包好一组模块的包</li><li class="lvl-3">使用C编写并链接到python解释器的内置模块</li></ol><h1>为何要使用模块</h1><p>实现代码和功能的复用</p><h2 id="import-自定义模块my-module-py">import 自定义模块my_module.py</h2><p>文件名my_module.py,模块名my_module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_module.py</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from the my_module.py&#x27;</span>)<br><br>money = <span class="hljs-number">100</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my_module-&gt;read1-&gt;money&#x27;</span>,money)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my_module-&gt;read2 calling read1&#x27;</span>)<br>read1()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>():<br><span class="hljs-keyword">global</span> money<br>money=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>模块可以包含可执行的语句和函数的定义，这些语句的目的是<strong>初始化模块</strong>，它们只在模块名第一次遇到 导入import语句时才执行（import语句是可以在程序中的任意位置使用的,且针对同一个模块很import 多次,为了防止你重复导入）</p><p><strong>但是为了能够让程序的可读性更强，所以需要在程序的开头表明所有的引入的包和模块</strong></p><p>python的优化手段是：第一次导入后就将模块名加载到内存了，后续的import语句仅是对已经加载大内存中的模块对象增加了一次引用，不会重新执行模块内的语句）</p><p><strong>也就是说引入包只要一次就好</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_module<br><span class="hljs-keyword">import</span> my_module<br><span class="hljs-keyword">import</span> my_module<br><span class="hljs-keyword">import</span> my_module<br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span>(sys.modules)<br><span class="hljs-comment"># sys.modules是一个字典，内部包含模块名与模块对象的映射，该字典决定了导入模块时是否需要重新导入。</span><br></code></pre></td></tr></table></figure><p>每个模块都是一个独立的名称空间，定义在这个模块中的函数，把这个模块的名称空间当做全局名称空 间，这样我们在编写自己的模块时，就不用担心我们定义在自己模块中全局变量会在被导入时，与使用者的全局变量冲突</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_module<br>money=<span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(my_module.money)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_module<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=========&#x27;</span>)<br><br>my_module.read1()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_module<br><br>money = <span class="hljs-number">1</span><br>my_module.change()<br><span class="hljs-built_in">print</span>(money)<br><span class="hljs-built_in">print</span>(my_module.money)<br></code></pre></td></tr></table></figure><h2 id="为模块名起别名，相当于m1-1-m2-m1">为模块名起别名，相当于m1=1;m2=m1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_module <span class="hljs-keyword">as</span> mm<br><br><span class="hljs-built_in">print</span>(mm.money)<br></code></pre></td></tr></table></figure><blockquote><p>示范用法：</p></blockquote><p>有两中<code>sql</code>模块<code>mysql</code>和<code>oracle</code>，根据用户的输入，选择不同的<code>sql</code>功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mysql.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqlparse</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from mysql sqlparse&#x27;</span>)<br><br><span class="hljs-comment"># oracle</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqlparse</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from oracle sqlparse&#x27;</span>)<br><br><span class="hljs-comment"># test.py</span><br>db_type=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>)<br><span class="hljs-keyword">if</span> db_type == <span class="hljs-string">&#x27;mysql&#x27;</span>:<br><span class="hljs-keyword">import</span> mysql <span class="hljs-keyword">as</span> db<br><span class="hljs-keyword">elif</span> db_type == <span class="hljs-string">&#x27;oracle&#x27;</span>:<br><span class="hljs-keyword">import</span> oracle <span class="hljs-keyword">as</span> db<br><br>db.sqlparse()<br></code></pre></td></tr></table></figure><h2 id="在一行导入多个模块">在一行导入多个模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys, os, re<br></code></pre></td></tr></table></figure><h2 id="from-…-import-…">from … import …</h2><p>对比import my_module，会将源文件的名称空间’my_module’带到当前名称空间中，使用时必须是 my_module.名字的方式</p><p>而from 语句相当于import，也会创建新的名称空间，但是将my_module中的名字直接导入到当前的名 称空间中，在当前名称空间中，直接使用名字就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_module <span class="hljs-keyword">import</span> read1,read2<br>money = <span class="hljs-number">1000</span><br>read1()<br><span class="hljs-comment"># 导入的函数read1，执行时仍然回到my_module.py中寻找全局变量money</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_module <span class="hljs-keyword">import</span> read1,read2<br>money = <span class="hljs-number">1000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">10</span>)<br><br>read2()<br><span class="hljs-comment"># 导入的函数read2，执行时需要调用read1(),仍然回到my_module.py中找read1()</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_module <span class="hljs-keyword">import</span> read1,read2<br>money = <span class="hljs-number">1000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">10</span>)<br><br>read1()<br><span class="hljs-comment"># 导入的函数read1，被当前位置定义的read1覆盖掉了</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_module <span class="hljs-keyword">import</span> read1 <span class="hljs-keyword">as</span> read<br><br>read()<br><span class="hljs-comment"># 也支持as</span><br></code></pre></td></tr></table></figure><p>from my_module import * 把my_module中<strong>所有</strong>的<strong>不是以下划线(_)开头的名字都导入到当前位置</strong> 大部分情况下我们的python程序不应该使用这种导入方式，因为*你不知道你导入什么名字，很有可能 会覆盖掉你之前已经定义的名字。而且可读性极其的差，在交互式环境中导入时没有问题。</p><p>因为这样的会导致原本的函数被覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">.....<br>__all__ = [<span class="hljs-string">&#x27;money&#x27;</span>,<span class="hljs-string">&#x27;read1&#x27;</span>]<br><span class="hljs-comment"># 这样在另外一个文件中用from my_module import *就这能导入列表中规定的两个名字</span><br><br><span class="hljs-comment"># test.py</span><br><span class="hljs-keyword">from</span> my_module <span class="hljs-keyword">import</span> *<br><br><span class="hljs-built_in">print</span>(money)<br>read1()<br>read2()<br></code></pre></td></tr></table></figure><p>注意：如果my_module.py中的名字前加,即money，则from my_module import *,则_money不能被导 入</p><ul class="lvl-0"><li class="lvl-2"><p>编写好的一个python文件可以有两种用途：</p><ol><li class="lvl-5"><p>脚本，一个文件就是整个程序，用来被执行</p></li><li class="lvl-5"><p>模块，文件中存放着一堆功能，用来被导入使用</p></li></ol></li><li class="lvl-2"><p>python为我们内置了全局变量 <code>__name__</code></p><ol><li class="lvl-5">当文件被当做脚本执行时： <code>__name__</code> 等于<code>__main__</code></li><li class="lvl-5">当文件被当做模块导入时： <code>__name__</code>等于模块名</li></ol></li><li class="lvl-2"><p>作用：用来控制.<code>py</code>文件在不同的应用场景下执行不同的逻辑（或者是在模块文件中测试代码）</p><ol><li class="lvl-6">if <code>__name__</code> == <code>__main__</code>:</li></ol></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> b &lt; n:<br><span class="hljs-built_in">print</span>(b, end=<span class="hljs-string">&#x27;,&#x27;</span>)<br>a, b = b, a+b<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-built_in">print</span>(__name__)<br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;num :&#x27;</span>)<br>fib(<span class="hljs-built_in">int</span>(num))<br></code></pre></td></tr></table></figure><h1>模块的搜索路径</h1><p>模块的查找顺序是：内存中已经加载的模块-&gt;自建模块-&gt;<code>sys.path</code>路径中包含的模块</p><ol><li class="lvl-3"><p>在第一次导入某个模块时（比如my_module），会先检查该模块是否已经被加载到内存中（当前 执行文件的名称空间对应的内存），如果有则直接引用</p><p>ps：python解释器在启动时会自动加载一些模块到内存中，可以使用sys.modules查看</p></li><li class="lvl-3"><p>如果还没有找到就从sys.path给出的目录列表中依次寻找my_module.py文件。</p></li></ol><p><strong>注意：自定义的模块名不应该与系统内置模块重名</strong></p><h1>编译python文件</h1><p>为了提高加载模块的速度，python解释器会在 <code>__pycache__</code> 目录中下缓存每个模块编译后的版本，格式为：<code>module.version.pyc</code>。通常会包含python的版本号。例如，在CPython3.3版本下， <code>my_module.py</code>模块会被缓存成 <code>__pycache__</code>/<code>my_module.cpython-33.pyc</code> 。这种命名规范保证了编译 后的结果多版本共存。</p><h1>包</h1><p>包就是一个包含有 <code>__init__.py</code> 文件的文件夹，所以其实我们创建包的目的就是为了用文件夹将文件/ 模块组织起来</p><p>需要强调的是：</p><ol><li class="lvl-3"><p>在python3中，即使包下没有 <strong>init</strong>.py 文件，import 包仍然不会报错，而在python2中，包 下一定要有该文件，否则import 包报错</p></li><li class="lvl-3"><p>创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包的本质就是一种模块</p></li></ol><h2 id="为何要使用包">为何要使用包</h2><p><strong>包的本质就是一个文件夹，那么文件夹唯一的功能就是将文件组织起来</strong></p><p>随着功能越写越多，我们无法将所以功能都放到一个文件中，于是我们使用模块去组织功能，而随着模 块越来越多，我们就需要用文件夹将模块文件组织起来，以此来提高程序的结构性和可维护性</p><h2 id="注意事项">注意事项</h2><ol><li class="lvl-3"><p>关于包相关的导入语句也分为 import 和 from … import … 两种，但是无论哪种，无论在什 么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非 法。可以带有一连串的点，如 item.subitem.subsubitem ,但都必须遵循这个原则。但对于导入 后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用 自己的属性)。</p></li><li class="lvl-4"><p>import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样 来源于文件，即包下的 <strong>init</strong>.py ，导入包本质就是在导入该文件</p></li><li class="lvl-3"><p>包A和包B下有同名模块也不会冲突，如A.a与B.a来自两个命名空间</p></li></ol><h2 id="包的使用">包的使用</h2><p>示例文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">glance/                         <span class="hljs-comment">#Top-level package</span><br>├── __init__.py                 <span class="hljs-comment">#Initialize the glance package</span><br>├── api                         <span class="hljs-comment">#Subpackage for api</span><br>│ ├── __init__.py<br>│ ├── policy.py<br>│ └── versions.py<br>├── cmd                         <span class="hljs-comment">#Subpackage for cmd</span><br>│ ├── __init__.py<br>│ └── manage.py<br>└── db                          <span class="hljs-comment">#Subpackage for db</span><br>├── __init__.py<br>└── models.py<br></code></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#文件内容</span><br><span class="hljs-comment">#policy.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from policy.py&#x27;</span>)<br><br><span class="hljs-comment">#versions.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_resource</span>(<span class="hljs-params">conf</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from version.py: &#x27;</span>,conf)<br><br><span class="hljs-comment">#manage.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from manage.py&#x27;</span>)<br><br><span class="hljs-comment">#models.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register_models</span>(<span class="hljs-params">engine</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from models.py: &#x27;</span>,engine)<br></code></pre></td></tr></table></figure><h2 id="使用import导入包">使用import导入包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> glance.db.models<br><span class="hljs-comment"># 在导入glance的时候会执行glance下的__init__.py中的代码</span><br><br>glance.db.models.register_models(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br></code></pre></td></tr></table></figure><p>单独导入包名称时不会导入包中所有包含的所有子模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> glance<br>glance.cmd.manage.main()<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># glance/__init__.py</span><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> cmd<br><br><span class="hljs-comment"># glance/cmd/__init__.py</span><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> manage<br></code></pre></td></tr></table></figure><p>使用from （具体的路径） import （具体的模块）</p><p>需要注意的是from后import导入的模块，必须是明确的一个不能带点，否则会有语法错误，如： <code>from a import b.c</code> 是错误语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> glance.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> glance.db.models <span class="hljs-keyword">import</span> register_models<br><br>models.register_models(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br>register_models(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>from glance.api import *</code></p><p>想从包<code>api</code>中导入所有，实际上该语句只会导入包<code>api</code>下 <code>__init__.py</code> 文件中定义的名字，我们可以在 <code>__init__.py</code> 这个文件中定义 <code>__all__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from api.__init.py&#x27;</span>)<br><br>__all__=[<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;func&#x27;</span>,<span class="hljs-string">&#x27;policy&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> glance.api <span class="hljs-keyword">import</span> *<br><br>func()<br><span class="hljs-built_in">print</span>(x)<br>policy.get()<br></code></pre></td></tr></table></figure><h1>绝对导入和相对导入</h1><ul class="lvl-0"><li class="lvl-2"><p>绝对导入：以glance作为起始</p></li><li class="lvl-2"><p>相对导入：用.或者…的方式最为起始（只能在一个包中使用，不能用于不同目录内）</p></li></ul><p>绝对导入: 以执行文件的sys.path为起始点开始导入,称之为绝对导入</p><ol><li class="lvl-3"><p>优点: 执行文件与被导入的模块中都可以使用</p></li><li class="lvl-3"><p>缺点: 所有导入都是以sys.path为起始点,导入麻烦</p></li></ol><p>相对导入: 参照当前所在文件的文件夹为起始开始查找,称之为相对导入</p><ol><li class="lvl-3"><p>符号: .代表当前所在文件的文件加,…代表上一级文件夹,…代表上一级的上一级文件夹</p></li><li class="lvl-3"><p>优点: 导入更加简单</p></li><li class="lvl-3"><p>缺点: 只能在导入包中的模块时才能使用</p></li></ol><p>注意:</p><ul class="lvl-0"><li class="lvl-2"><p>相对导入只能用于包内部模块之间的相互导入,导入者与被导入者都必须存在于一个包内</p></li><li class="lvl-2"><p>试图在顶级包之外使用相对导入是错误的,言外之意,必须在顶级包内使用相对导入,每增加一个.代表 跳到上一级文件夹,而上一级不应该超出顶级包</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的递归与二分查找</title>
    <link href="/20220930/Python%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/20220930/Python%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1>认识递归</h1><ul class="lvl-0"><li class="lvl-2">递归的定义——在一个函数里再调用这个函数本身</li><li class="lvl-2">为了防止递归无限进行，通常我们会指定一个退出条件</li><li class="lvl-2">递归的最大深度——998</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#递归的基本形式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">n</span>):<br><span class="hljs-built_in">print</span>(n)<br>n += <span class="hljs-number">1</span><br>foo(n)<br>foo(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#增加退出条件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">n</span>):<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">101</span>:<br><span class="hljs-keyword">return</span><br><span class="hljs-built_in">print</span>(n)<br>n += <span class="hljs-number">1</span><br>foo(n)<br><br>foo(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>998是python为了我们程序的内存优化所设定的一个默认值，我们当然还可以通过一些手段去修改它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span>(sys.setrecursionlimit(<span class="hljs-number">10000</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">n</span>):<br><span class="hljs-built_in">print</span>(n)<br>n += <span class="hljs-number">1</span><br>foo(n)<br><br>foo(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>将python允许的递归深度设置为了1w，至于实际可以达到的深度就取决于计算机的性能了。</p><p>不推荐修改这个默认的递归深度，因为如果用998层递归都没有解决的问题是不适合使用递归来解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span>(sys.setrecursionlimit(<span class="hljs-number">10000</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">n</span>):<br><span class="hljs-built_in">print</span>(n)<br>n += <span class="hljs-number">1</span><br>foo(n)<br><br>foo(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>将python允许的递归深度设置为了1w，至于实际可以达到的深度就取决于计算机的性能了。</p><p>不推荐修改这个默认的递归深度，因为如果用998层递归都没有解决的问题是不适合使用递归来解决。</p><h1>汉诺塔问题</h1><p>从左到右 A B C 柱 大盘子在下, 小盘子在上, 借助B柱将所有盘子从A柱移动到C柱, 期间只有一个原则: 大盘子只能在小盘子的下面.</p><p>我们只需要考虑如果有64层，先将A柱上的63层移动到B柱上，然后将A柱的第64个移动到C柱上，然后 将B柱上的63层移动到C柱上即可。</p><p>那怎么把63层都移到B柱上，这个问题可以用上面相同的方法解决。</p><p><a href="https://zhangxiaoleiwk.gitee.io/h.html">https://zhangxiaoleiwk.gitee.io/h.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">n,a,b,c</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n代表层数</span><br><span class="hljs-string">a代表原来的柱子</span><br><span class="hljs-string">b代表空闲的柱子</span><br><span class="hljs-string">c代表目的柱子</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(a,<span class="hljs-string">&#x27;-&gt;&#x27;</span>,c)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 将n-1个盘子从a --&gt; b</span><br>move(n-<span class="hljs-number">1</span>,a,c,b)<br><span class="hljs-comment"># 将剩余的最后一个盘子从a --&gt; c</span><br><span class="hljs-built_in">print</span>(a,<span class="hljs-string">&#x27;-&gt;&#x27;</span>,c)<br><span class="hljs-comment"># 将剩余的n-1个盘子从 b --&gt; c</span><br>move(n-<span class="hljs-number">1</span>,b,a,c)<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入汉诺塔的层数：&#x27;</span>))<br>move(n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>)<br></code></pre></td></tr></table></figure><p>递归实现三级菜单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python">menu = &#123;<br><span class="hljs-string">&#x27;山东&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;青岛&#x27;</span>: [<span class="hljs-string">&#x27;四方&#x27;</span>, <span class="hljs-string">&#x27;黄岛&#x27;</span>, <span class="hljs-string">&#x27;崂山&#x27;</span>, <span class="hljs-string">&#x27;李沧&#x27;</span>, <span class="hljs-string">&#x27;城阳&#x27;</span>],<br><span class="hljs-string">&#x27;济南&#x27;</span>: [<span class="hljs-string">&#x27;历城&#x27;</span>, <span class="hljs-string">&#x27;槐荫&#x27;</span>, <span class="hljs-string">&#x27;高新&#x27;</span>, <span class="hljs-string">&#x27;长青&#x27;</span>, <span class="hljs-string">&#x27;章丘&#x27;</span>],<br><span class="hljs-string">&#x27;烟台&#x27;</span>: [<span class="hljs-string">&#x27;龙口&#x27;</span>, <span class="hljs-string">&#x27;莱山&#x27;</span>, <span class="hljs-string">&#x27;牟平&#x27;</span>, <span class="hljs-string">&#x27;蓬莱&#x27;</span>, <span class="hljs-string">&#x27;招远&#x27;</span>]<br>&#125;,<br><span class="hljs-string">&#x27;江苏&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;苏州&#x27;</span>: [<span class="hljs-string">&#x27;沧浪&#x27;</span>, <span class="hljs-string">&#x27;相城&#x27;</span>, <span class="hljs-string">&#x27;平江&#x27;</span>, <span class="hljs-string">&#x27;吴中&#x27;</span>, <span class="hljs-string">&#x27;昆山&#x27;</span>],<br><span class="hljs-string">&#x27;南京&#x27;</span>: [<span class="hljs-string">&#x27;白下&#x27;</span>, <span class="hljs-string">&#x27;秦淮&#x27;</span>, <span class="hljs-string">&#x27;浦口&#x27;</span>, <span class="hljs-string">&#x27;栖霞&#x27;</span>, <span class="hljs-string">&#x27;江宁&#x27;</span>],<br><span class="hljs-string">&#x27;无锡&#x27;</span>: [<span class="hljs-string">&#x27;崇安&#x27;</span>, <span class="hljs-string">&#x27;南长&#x27;</span>, <span class="hljs-string">&#x27;北塘&#x27;</span>, <span class="hljs-string">&#x27;锡山&#x27;</span>, <span class="hljs-string">&#x27;江阴&#x27;</span>]<br>&#125;,<br><span class="hljs-string">&#x27;浙江&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;杭州&#x27;</span>: [<span class="hljs-string">&#x27;西湖&#x27;</span>, <span class="hljs-string">&#x27;江干&#x27;</span>, <span class="hljs-string">&#x27;下城&#x27;</span>, <span class="hljs-string">&#x27;上城&#x27;</span>, <span class="hljs-string">&#x27;滨江&#x27;</span>],<br><span class="hljs-string">&#x27;宁波&#x27;</span>: [<span class="hljs-string">&#x27;海曙&#x27;</span>, <span class="hljs-string">&#x27;江东&#x27;</span>, <span class="hljs-string">&#x27;江北&#x27;</span>, <span class="hljs-string">&#x27;镇海&#x27;</span>, <span class="hljs-string">&#x27;余姚&#x27;</span>],<br><span class="hljs-string">&#x27;温州&#x27;</span>: [<span class="hljs-string">&#x27;鹿城&#x27;</span>, <span class="hljs-string">&#x27;龙湾&#x27;</span>, <span class="hljs-string">&#x27;乐清&#x27;</span>, <span class="hljs-string">&#x27;瑞安&#x27;</span>, <span class="hljs-string">&#x27;永嘉&#x27;</span>]<br>&#125;,<br><span class="hljs-string">&#x27;安徽&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;合肥&#x27;</span>: [<span class="hljs-string">&#x27;蜀山&#x27;</span>, <span class="hljs-string">&#x27;庐阳&#x27;</span>, <span class="hljs-string">&#x27;包河&#x27;</span>, <span class="hljs-string">&#x27;经开&#x27;</span>, <span class="hljs-string">&#x27;新站&#x27;</span>],<br><span class="hljs-string">&#x27;芜湖&#x27;</span>: [<span class="hljs-string">&#x27;镜湖&#x27;</span>, <span class="hljs-string">&#x27;鸠江&#x27;</span>, <span class="hljs-string">&#x27;无为&#x27;</span>, <span class="hljs-string">&#x27;三山&#x27;</span>, <span class="hljs-string">&#x27;南陵&#x27;</span>],<br><span class="hljs-string">&#x27;蚌埠&#x27;</span>: [<span class="hljs-string">&#x27;蚌山&#x27;</span>, <span class="hljs-string">&#x27;龙子湖&#x27;</span>, <span class="hljs-string">&#x27;淮上&#x27;</span>, <span class="hljs-string">&#x27;怀远&#x27;</span>, <span class="hljs-string">&#x27;固镇&#x27;</span>]<br>&#125;,<br><span class="hljs-string">&#x27;广东&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;深圳&#x27;</span>: [<span class="hljs-string">&#x27;罗湖&#x27;</span>, <span class="hljs-string">&#x27;福田&#x27;</span>, <span class="hljs-string">&#x27;南山&#x27;</span>, <span class="hljs-string">&#x27;宝安&#x27;</span>, <span class="hljs-string">&#x27;布吉&#x27;</span>],<br><span class="hljs-string">&#x27;广州&#x27;</span>: [<span class="hljs-string">&#x27;天河&#x27;</span>, <span class="hljs-string">&#x27;珠海&#x27;</span>, <span class="hljs-string">&#x27;越秀&#x27;</span>, <span class="hljs-string">&#x27;白云&#x27;</span>, <span class="hljs-string">&#x27;黄埔&#x27;</span>],<br>         <span class="hljs-string">&#x27;东莞&#x27;</span>: [<span class="hljs-string">&#x27;莞城&#x27;</span>, <span class="hljs-string">&#x27;长安&#x27;</span>, <span class="hljs-string">&#x27;虎门&#x27;</span>, <span class="hljs-string">&#x27;万江&#x27;</span>, <span class="hljs-string">&#x27;大朗&#x27;</span>]<br>&#125;,<br><span class="hljs-string">&#x27;测试&#x27;</span>: &#123;&#125;<br>&#125;<br>要求通过菜单一层一层访问，如果遇到输入b就back返回上一层，如果没有上一层就直接退出，如果遇到<br>输入q就直接退出：<br>递归的方式：<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">three_menu</span>(<span class="hljs-params">dic</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dic:<br><span class="hljs-built_in">print</span>(k)<br>key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input&gt;&gt;&#x27;</span>).strip()<br><span class="hljs-keyword">if</span> key == <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">or</span> key == <span class="hljs-string">&#x27;q&#x27;</span>:<br><span class="hljs-keyword">return</span> key<br>         <span class="hljs-keyword">elif</span> key <span class="hljs-keyword">in</span> dic.keys() <span class="hljs-keyword">and</span> dic[key]:<br>ret = three_menu(dic[key])<br><span class="hljs-keyword">if</span> ret == <span class="hljs-string">&#x27;q&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;q&#x27;</span><br>        <br>three_menu(menu)<br>不递归的方式：<br>l = [menu]<br><span class="hljs-keyword">while</span> l:<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> l[-<span class="hljs-number">1</span>]:<br><span class="hljs-built_in">print</span>(key)<br>k = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input&gt;&gt;&#x27;</span>).strip() <span class="hljs-comment"># 江苏</span><br><span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> l[-<span class="hljs-number">1</span>].keys() <span class="hljs-keyword">and</span> l[-<span class="hljs-number">1</span>][k]:<br>l.append(l[-<span class="hljs-number">1</span>][k])<br><span class="hljs-keyword">elif</span> k == <span class="hljs-string">&#x27;b&#x27;</span>:<br>l.pop()<br><span class="hljs-keyword">elif</span> k == <span class="hljs-string">&#x27;q&#x27;</span>:<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1>二分查找算法</h1><p>如果想在列表中查找某个数字，可以排序后从中间开始查找</p><p><img src="image-20220707201759493.png" alt="算法示意图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">l =<br>[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">18</span>,<span class="hljs-number">22</span>,<span class="hljs-number">26</span>,<span class="hljs-number">30</span>,<span class="hljs-number">32</span>,<span class="hljs-number">35</span>,<span class="hljs-number">41</span>,<span class="hljs-number">42</span>,<span class="hljs-number">43</span>,<span class="hljs-number">55</span>,<span class="hljs-number">56</span>,<span class="hljs-number">66</span>,<span class="hljs-number">67</span>,<span class="hljs-number">69</span>,<span class="hljs-number">72</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">83</span>,<span class="hljs-number">88</span>]<br>不递归，不使用二分查找时：<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">66</span>:<br><span class="hljs-built_in">print</span>(l.index(i))<br><span class="hljs-built_in">print</span>(l[<span class="hljs-number">17</span>])<br>使用递归：<br>初级：<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">l,aim</span>):<br>mid = (<span class="hljs-built_in">len</span>(l)-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> l:<br><span class="hljs-keyword">if</span> aim &gt; l[mid]:<br>func(l[mid+<span class="hljs-number">1</span>:],aim)<br><span class="hljs-keyword">elif</span> aim &lt; l[mid]:<br>func(l[:mid],aim)<br><span class="hljs-keyword">elif</span> aim == l[mid]:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;找到了&quot;</span>,mid)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;找不到&#x27;</span>)<br>func(l,<span class="hljs-number">66</span>)<br>func(l,<span class="hljs-number">6</span>)<br>高级：<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">num,l,start=<span class="hljs-literal">None</span>,end=<span class="hljs-literal">None</span></span>):<br>start = start <span class="hljs-keyword">if</span> start <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>end = <span class="hljs-built_in">len</span>(l)-<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> end <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> end<br>mid = (end - start)//<span class="hljs-number">2</span> + start<br><span class="hljs-keyword">if</span> start &gt; end:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">elif</span> l[mid] &gt; num :<br><span class="hljs-keyword">return</span> search(num,l,start,mid-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">elif</span> l[mid] &lt; num:<br><span class="hljs-keyword">return</span> search(num,l,mid+<span class="hljs-number">1</span>,end)<br><span class="hljs-keyword">elif</span> l[mid] == num:<br><span class="hljs-keyword">return</span> mid<br>ret = search(<span class="hljs-number">18</span>,l)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的内置函数和匿名函数</title>
    <link href="/20220930/Python%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <url>/20220930/Python%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1>内置函数</h1><p>截止到python版本3.6.2，现在python一共为我们提供了<strong>68个内置函数</strong>。</p><table><thead><tr><th>内置函数</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abs()</td><td>dict()</td><td>help()</td><td>min()</td><td>setattr()</td></tr><tr><td>all()</td><td>cir()</td><td>hex()</td><td>next()</td><td>slice()</td></tr><tr><td>any()</td><td>divmod()</td><td>id()</td><td>object()</td><td>sorted()</td></tr><tr><td>ascii()</td><td>enumerate()</td><td>input()</td><td>oct()</td><td>staticmethod()</td></tr><tr><td>bin()</td><td>eval()</td><td>int()</td><td>open()</td><td>str()</td></tr><tr><td>bool()</td><td>exec()</td><td>isinstance()</td><td>ord()</td><td>sum()</td></tr><tr><td>bytearray()</td><td>filter()</td><td>issubclass()</td><td>pow()</td><td>super()</td></tr><tr><td>bytes()</td><td>float()</td><td>iter()</td><td>print()</td><td>tuple()</td></tr><tr><td>callable()</td><td>format()</td><td>len()</td><td>property()</td><td>type()</td></tr><tr><td>chr()</td><td>frozenset()</td><td>list()</td><td>range()</td><td>vars()</td></tr><tr><td>classmethod()</td><td>getattr()</td><td>locals()</td><td>repr()</td><td>zip()</td></tr><tr><td>compile()</td><td>globals()</td><td>map()</td><td>reversed()</td><td><code>__import__()</code></td></tr><tr><td>complex()</td><td>hasattr()</td><td>max()</td><td>round()</td><td></td></tr><tr><td>delattr()</td><td>hash()</td><td>memoryview()</td><td>set()</td><td></td></tr></tbody></table><h1>作用域</h1><ul class="lvl-0"><li class="lvl-2"><p>locals：函数会以字典的类型返回当前位置的全部局部变量。</p></li><li class="lvl-2"><p>globals：函数以字典的类型返回全部全局变量。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())<br><span class="hljs-comment"># 这两个一样，因为是在全局执行的</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">argv</span>):<br>c = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<span class="hljs-comment">#打印所有的局部变量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())<span class="hljs-comment">#打印所有的全局变量</span><br>func(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="字符串类型代码的执行-eval，exec，complie">字符串类型代码的执行 eval，exec，complie</h2><ol><li class="lvl-3"><p>eval：计算指定表达式的值，并返回最终结果。（几乎没有用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;2 + 2&#x27;</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br>n = <span class="hljs-number">20</span><br>ret = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;n + 23&#x27;</span>)<span class="hljs-comment">#可以将表达式形式的计算式子计算结果</span><br><span class="hljs-built_in">print</span>(ret)<br><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;print(&quot;Hello world&quot;)&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>exec:执行字符串类型的代码。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">for i in range(5):</span><br><span class="hljs-string">print(i)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">exec</span>(s)<span class="hljs-comment">#可以将字符串型式的语句读出来并执行</span><br></code></pre></td></tr></table></figure><ol><li class="lvl-3"><p>compile:将字符串类型的代码编译。代码对象能够通过exec语句来执行或者eval()进行求值。</p></li><li class="lvl-4"><p>参数 filename：代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。当传入了 source参数时，filename参数传入空字符即可。</p></li><li class="lvl-3"><p>参数model：指定编译代码的种类，可以指定为 ‘exec’,’eval’,’single’。当source中包含流程语句 时，model应指定为‘exec’；当source中只包含一个简单的求值表达式，model应指定为‘eval’；当 source中包含了交互式命令语句，model应指定为’single’。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 流程语句使用exec</span><br>code1 = <span class="hljs-string">&#x27;for i in range(5): print(i)&#x27;</span><br>compile1 = <span class="hljs-built_in">compile</span>(code1,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;exec&#x27;</span>)<br><br><span class="hljs-built_in">exec</span>(compile1)<br><br><span class="hljs-comment"># 简单求值表达式用eval</span><br>code2 = <span class="hljs-string">&#x27;1 + 2 + 3&#x27;</span><br>compile2 = <span class="hljs-built_in">compile</span>(code2,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(compile2))<br><br><span class="hljs-comment"># 交互语句用single</span><br>code3 = <span class="hljs-string">&#x27;name = input(&quot;please input you name: &quot;)&#x27;</span><br>compile3 = <span class="hljs-built_in">compile</span>(code3,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;single&#x27;</span>)<br><br><span class="hljs-built_in">exec</span>(compile3)<br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><p>有返回值的字符串形式的代码用eval，没有返回值的字符串形式的代码用exec，一般不用compile。</p><h2 id="输入输出相关-input，print">输入输出相关 input，print</h2><ul class="lvl-0"><li class="lvl-2"><p>input:函数接受一个标准输入数据，返回为 string 类型。（这就需要输入后常常需要进行强行转换类型）</p></li><li class="lvl-2"><p>print:打印输出。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27; 源码分析</span><br><span class="hljs-string">def print(self, *args, sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=None): # known special caseof print</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">print(value, ..., sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=sys.stdout, flush=False)</span><br><span class="hljs-string">file: 默认是输出到屏幕，如果设置为文件句柄，输出到文件</span><br><span class="hljs-string">sep: 打印多个值之间的分隔符，默认为空格</span><br><span class="hljs-string">end: 每一次打印的结尾，默认为换行符</span><br><span class="hljs-string">flush: 立即把内容输出到流文件，不作缓存</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,sep=<span class="hljs-string">&#x27;*&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">44</span>,<span class="hljs-number">55</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;log&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;写入文件&#x27;</span>,file=f,flush=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="内存相关-hash-id">内存相关 hash id</h2><ul class="lvl-0"><li class="lvl-2"><p>hash：获取一个对象（可哈希对象：int，str，Bool，tuple）的哈希值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(<span class="hljs-number">12322</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(<span class="hljs-string">&#x27;123&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(<span class="hljs-string">&#x27;arg&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(<span class="hljs-string">&#x27;aaron&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)))<br></code></pre></td></tr></table></figure></li><li class="lvl-2"><p>id:用于获取对象的内存地址。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(<span class="hljs-string">&#x27;abc&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(<span class="hljs-string">&#x27;123&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="文件操作相关">文件操作相关</h2><ul class="lvl-0"><li class="lvl-2"><p>open：函数用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写</p></li><li class="lvl-2"><p>只有使用文件对象才能进行对这个文件进行相关操作</p></li></ul><p>模块相关<code>__import__</code></p><ul class="lvl-0"><li class="lvl-2"><p><code>__import__</code> ：函数用于动态加载类和函数 。</p></li></ul><h2 id="帮助">帮助</h2><ul class="lvl-0"><li class="lvl-2"><p>help：函数用于查看函数或模块用途的详细说明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">help</span>(<span class="hljs-built_in">print</span>))<br></code></pre></td></tr></table></figure></li></ul><h2 id="调用相关">调用相关</h2><ul class="lvl-0"><li class="lvl-2"><p>callable：函数用于检查一个对象是否是可调用的。如果返回True，object仍然可能调用失败；但 如果返回- False，调用对象ojbect绝对不会成功。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">callable</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">callable</span>(<span class="hljs-string">&#x27;hello&#x27;</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo1</span>(<span class="hljs-params">a, b</span>):<br><span class="hljs-keyword">return</span> a + b<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">callable</span>(demo1))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span>:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">callable</span>(Demo2))<br><br>a = Demo2()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">callable</span>(a))<br><span class="hljs-comment"># 没有实现 __call__, 返回 False</span><br></code></pre></td></tr></table></figure><h2 id="查看内置属性">查看内置属性</h2><ul class="lvl-0"><li class="lvl-2"><p>dir：函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属 性、方法列表。如果参数包含方法 <code>__dir__</code>() ，该方法将被调用。如果参数不包含 <code>__dir__</code>() ， 该方法将最大限度地收集参数信息。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>()) <span class="hljs-comment"># 获得当前模块的属性列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>([ ])) <span class="hljs-comment"># 查看列表的方法</span><br></code></pre></td></tr></table></figure><h2 id="迭代器生成器相关">迭代器生成器相关</h2><ul class="lvl-0"><li class="lvl-2"><p>range：函数可创建一个整数对象，一般用在 for 循环中。</p></li><li class="lvl-2"><p>next：内部实际使用了 <strong>next</strong> 方法，返回迭代器的下一个项目。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先获得Iterator对象:</span><br>it = <span class="hljs-built_in">iter</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br><span class="hljs-comment"># 循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">try</span>:<br><span class="hljs-comment"># 获得下一个值</span><br>x = <span class="hljs-built_in">next</span>(it)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-keyword">except</span> StopIteration: <span class="hljs-comment"># 遇到StopIteration就退出循环</span><br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>iter：函数用来生成迭代器（讲一个可迭代对象，生成迭代器）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterable<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterator<br><br>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] <span class="hljs-comment"># 可迭代对象，但不是迭代器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l,Iterable))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l,Iterator))<br><br>l1 = <span class="hljs-built_in">iter</span>(l) <span class="hljs-comment"># 从一个可迭代对象生成迭代器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l1,Iterable))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l1,Iterator))<br></code></pre></td></tr></table></figure><h2 id="基础数据类型相关">基础数据类型相关</h2><h3 id="数字相关（14个）">数字相关（14个）</h3><h4 id="数据类型（4个）">数据类型（4个）</h4><ul class="lvl-0"><li class="lvl-2"><p>bool ：用于将给定参数转换为布尔类型，如果没有参数，返回 False。</p></li><li class="lvl-2"><p>int：函数用于将一个字符串或数字转换为整型。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-number">3.6</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0100&#x27;</span>,base=<span class="hljs-number">2</span>)) <span class="hljs-comment"># 将2进制的 0100 转化成十进制。结果为 4</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>float：函数用于将整数和字符串转换成浮点数。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;123&quot;</span>))<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>complex：函数用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第 一个参数为字符串，则不需要指定第二个参数。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-string">&quot;1&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">complex</span>(<span class="hljs-string">&quot;1+2j&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="进制转换（3个）：">进制转换（3个）：</h4><ul class="lvl-0"><li class="lvl-2"><p>bin：将十进制转换成二进制并返回。</p></li><li class="lvl-2"><p>oct：将十进制转化成八进制字符串并返回。</p></li><li class="lvl-2"><p>hex：将十进制转化成十六进制字符串并返回。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-number">10</span>),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-number">10</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-number">10</span>),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">oct</span>(<span class="hljs-number">10</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">10</span>),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">10</span>)))<br></code></pre></td></tr></table></figure><h4 id="数学运算（7）：">数学运算（7）：</h4><ul class="lvl-0"><li class="lvl-2"><p>abs：函数返回数字的绝对值。</p></li><li class="lvl-2"><p>divmod：计算除数与被除数的结果，返回一个包含商和余数的元组(a // b, a % b)。</p></li><li class="lvl-2"><p>round：保留浮点数的小数位数，默认保留整数。</p></li><li class="lvl-2"><p>pow：函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(-<span class="hljs-number">5</span>)) <span class="hljs-comment"># 5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">divmod</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment"># (3, 1)</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">7</span>/<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment"># 2.33</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">7</span>/<span class="hljs-number">3</span>)) <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">3.32567</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 3.326</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>sum：对可迭代对象进行求和计算（可设置初始值）。</p></li><li class="lvl-2"><p>min：返回可迭代对象的最小值（可加key，key为函数名，通过函数的规则，返回最小值）。</p></li><li class="lvl-2"><p>max：返回可迭代对象的最大值（可加key，key为函数名，通过函数的规则，返回最大值）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-number">100</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]))<br><br>ret = <span class="hljs-built_in">min</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">10</span>],key=<span class="hljs-built_in">abs</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br>dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(dic,key=<span class="hljs-keyword">lambda</span> x:dic[x]))<br><span class="hljs-comment"># x为dic的key，lambda的返回值（即dic的值进行比较）返回最小的值对应的键</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]))<br><br>ret = <span class="hljs-built_in">max</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">10</span>],key=<span class="hljs-built_in">abs</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br>dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dic,key=<span class="hljs-keyword">lambda</span> x:dic[x]))<br></code></pre></td></tr></table></figure><h2 id="数据结构相关（24个）">数据结构相关（24个）</h2><h3 id="列表和元祖（2个）">列表和元祖（2个）</h3><ul class="lvl-0"><li class="lvl-2"><p>list：将一个可迭代对象转化成列表（如果是字典，默认将key作为列表的元素）。</p></li><li class="lvl-2"><p>tuple：将一个可迭代对象转化成元祖（如果是字典，默认将key作为元祖的元素）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">l = <span class="hljs-built_in">list</span>((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(l)<br>l = <span class="hljs-built_in">list</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;)<br><span class="hljs-built_in">print</span>(l)<br>l = <span class="hljs-built_in">list</span>(&#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-number">2</span>&#125;)<br><span class="hljs-built_in">print</span>(l)<br><br>tu = <span class="hljs-built_in">tuple</span>((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(tu)<br>tu = <span class="hljs-built_in">tuple</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(tu)<br>tu = <span class="hljs-built_in">tuple</span>(&#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-number">2</span>&#125;)<br><span class="hljs-built_in">print</span>(tu)<br></code></pre></td></tr></table></figure><h4 id="相关内置函数（2个）">相关内置函数（2个）</h4><ul class="lvl-0"><li class="lvl-2"><p>reversed：将一个序列翻转，并返回此翻转序列的迭代器。</p></li><li class="lvl-2"><p>slice：构造一个切片对象，用于列表的切片。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">ite = <span class="hljs-built_in">reversed</span>([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ite:<br><span class="hljs-built_in">print</span>(i)<br><br>l = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>]<br>sli = <span class="hljs-built_in">slice</span>(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(l[sli])<br><br>sli = <span class="hljs-built_in">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(l[sli])<br></code></pre></td></tr></table></figure><h4 id="字符串相关（9）">字符串相关（9）</h4><ul class="lvl-0"><li class="lvl-2"><p>str：将数据转化成字符串</p></li><li class="lvl-2"><p>format:与具体数据相关，用于计算各种小数，精算等。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串可以提供的参数,指定对齐方式，&lt;是左对齐， &gt;是右对齐，^是居中对齐</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;&lt;20&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;&gt;20&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;^20&#x27;</span>))<br><br><span class="hljs-comment"># 整形数值可以提供的参数有 &#x27;b&#x27; &#x27;c&#x27; &#x27;d&#x27; &#x27;o&#x27; &#x27;x&#x27; &#x27;X&#x27; &#x27;n&#x27; None</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">192</span>,<span class="hljs-string">&#x27;b&#x27;</span>)) <span class="hljs-comment"># 转换为二进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">97</span>,<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment"># 转换unicode成字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;d&#x27;</span>)) <span class="hljs-comment"># 转换成10进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;o&#x27;</span>)) <span class="hljs-comment"># 转换为8进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;x&#x27;</span>)) <span class="hljs-comment"># 转换为16进制，小写字母表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;X&#x27;</span>)) <span class="hljs-comment"># 转换为16进制，大写字母表示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;n&#x27;</span>)) <span class="hljs-comment"># 和d一样</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>)) <span class="hljs-comment"># 和d一样</span><br><br><span class="hljs-comment"># 浮点数可以提供的参数有 &#x27;e&#x27; &#x27;E&#x27; &#x27;f&#x27; &#x27;F&#x27; &#x27;g&#x27; &#x27;G&#x27; &#x27;n&#x27; &#x27;%&#x27; None</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">314159265</span>,<span class="hljs-string">&#x27;e&#x27;</span>)) <span class="hljs-comment"># 科学计数法，默认保留6位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">314159265</span>,<span class="hljs-string">&#x27;0.2e&#x27;</span>)) <span class="hljs-comment"># 科学计数法，保留2位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">314159265</span>,<span class="hljs-string">&#x27;0.2E&#x27;</span>)) <span class="hljs-comment"># 科学计数法，保留2位小数,大写E</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">3.14159265</span>,<span class="hljs-string">&#x27;f&#x27;</span>)) <span class="hljs-comment"># 小数点计数法，默认保留6位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">3.14159265</span>,<span class="hljs-string">&#x27;0.10f&#x27;</span>)) <span class="hljs-comment"># 小数点计数法，保留10位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">3.14e+10000</span>,<span class="hljs-string">&#x27;F&#x27;</span>)) <span class="hljs-comment"># 小数点计数法，无穷大转换成大小字母</span><br><br><span class="hljs-comment"># g的格式化比较特殊，假设p为格式中指定的保留小数位数，先尝试采用科学计数法格式化，得到幂指数exp，如果-4&lt;=exp&lt;p，则采用小数计数法，并保留p-1-exp位小数，否则按小数计数法计数，并按p-1保留小数位数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">0.00003141566</span>,<span class="hljs-string">&#x27;.1g&#x27;</span>))<br><span class="hljs-comment"># p=1,exp=-5 ==》 -4&lt;=exp&lt;p不成立，按科学计数法计数，保留0位小数点</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">0.00003141566</span>,<span class="hljs-string">&#x27;.2g&#x27;</span>))<br><span class="hljs-comment"># p=2,exp=-5 ==》 -4&lt;=exp&lt;p不成立，按科学计数法计数，保留1位小数点</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926777</span>,<span class="hljs-string">&#x27;.1g&#x27;</span>))<br><span class="hljs-comment"># p=1,exp=0 ==》 -4&lt;=exp&lt;p成立，按小数计数法计数，保留0位小数点</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926777</span>,<span class="hljs-string">&#x27;.2g&#x27;</span>))<br><span class="hljs-comment"># p=2,exp=0 ==》 -4&lt;=exp&lt;p成立，按小数计数法计数，保留1位小数点</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">3141.5926777</span>,<span class="hljs-string">&#x27;.2g&#x27;</span>))<br><span class="hljs-comment"># p=2,exp=3 ==》 -4&lt;=exp&lt;p不成立，按科学计数法计数，保留1位小数点</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">0.00003141566</span>,<span class="hljs-string">&#x27;.1n&#x27;</span>)) <span class="hljs-comment"># 和g相同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">0.00003141566</span>)) <span class="hljs-comment"># 和g相同</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>bytes：用于不同编码之间的转化。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;你好&#x27;</span><br>bs = s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(bs)<br>s1 = bs.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(s1)<br>bs = <span class="hljs-built_in">bytes</span>(s,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(bs)<br>b = <span class="hljs-string">&#x27;你好&#x27;</span>.encode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br>b1 = b.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br><span class="hljs-built_in">print</span>(b1.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>bytearry：返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围: 0 &lt;= x &lt; 256。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = <span class="hljs-built_in">bytearray</span>(<span class="hljs-string">&#x27;aaron&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(ret))<br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-built_in">print</span>(ret[<span class="hljs-number">0</span>])<br>ret[<span class="hljs-number">0</span>] = <span class="hljs-number">65</span><br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(ret))<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>memoryview: 通过内存查看数据，是指对支持缓冲区协议的数据进行包装，在不需要复制对象基 础上允许Python代码访问。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = <span class="hljs-built_in">memoryview</span>(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&#x27;你好&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(ret))<br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(ret[:<span class="hljs-number">3</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(ret[<span class="hljs-number">3</span>:]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>ord:输入字符找该字符编码的位置</p></li><li class="lvl-2"><p>chr:输入位置数字找出其对应的字符</p></li><li class="lvl-2"><p>ascii:是ascii码中的返回该值，不是就返回/u…</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ord 输入字符找该字符编码的位置</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;中&#x27;</span>))<br><br><span class="hljs-comment"># chr 输入位置数字找出其对应的字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">20013</span>))<br><br><span class="hljs-comment"># 是ascii码中的返回该值，不是就返回/u...</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ascii</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ascii</span>(<span class="hljs-string">&#x27;中&#x27;</span>))<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>repr:返回一个对象的string形式</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&#x27;aaron&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello %r&#x27;</span>%name)<br><br>str1 = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;aaron&quot;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(str1)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(str1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(str1))<br></code></pre></td></tr></table></figure><h3 id="数据集合（3个）">数据集合（3个）</h3><ul class="lvl-0"><li class="lvl-2"><p>dict：创建一个字典。</p></li><li class="lvl-2"><p>set：创建一个集合。</p></li><li class="lvl-2"><p>frozenset：返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</p></li></ul><h3 id="相关内置函数（8个）">相关内置函数（8个）</h3><ul class="lvl-0"><li class="lvl-2"><p>len:返回一个对象中元素的个数。</p></li><li class="lvl-2"><p>sorted：对所有可迭代的对象进行排序操作。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(l,key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>]))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(l,key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)) <span class="hljs-comment"># 降序</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>enumerate: 用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出 数据和数据下标，一般用在 for 循环当中。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">enumerate</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]):<br><span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-number">100</span>):<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>all：可迭代对象中，全都是True才是True</p></li><li class="lvl-2"><p>any：可迭代对象中，有一个True 就是True</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">all</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">True</span>,<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>zip：函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这 些元组组成的列表。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">l1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,]<br>l2 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">5</span>]<br>l3 = (<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&#x27;**&#x27;</span>,(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l1,l2,l3):<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>filter：用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x%<span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>ret = <span class="hljs-built_in">filter</span>(func,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>])<br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ret:<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>map:会根据提供的函数对指定序列做映射。Python 3.x 返回迭代器</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x**<span class="hljs-number">2</span><br><br>ret1 = <span class="hljs-built_in">map</span>(square,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>])<br>ret2 = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x ** <span class="hljs-number">2</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>])<br>ret3 = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x,y : x+y,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ret1:<br><span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ret2:<br><span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ret3:<br><span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><h1>匿名函数</h1><p>匿名函数：为了解决那些功能很简单的需求而设计的一句话函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这段代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">n</span>):<br><span class="hljs-keyword">return</span> n ** n<br><br><br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">10</span>))<br><br><span class="hljs-comment"># 换成匿名函数</span><br>calc = <span class="hljs-keyword">lambda</span> n: n ** n<br><span class="hljs-built_in">print</span>(calc(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><blockquote><p>匿名函数格式的说明</p></blockquote><p>函数名 = lambda 参数 ：返回值，实参</p><ol><li class="lvl-3"><p>参数可以有多个，用逗号隔开</p></li><li class="lvl-3"><p>匿名函数不管逻辑多复杂，只能写一行，且逻辑执行结束后的内容就是返回</p></li><li class="lvl-3"><p>返回值和正常的函数一样可以是任意数据类型</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">l=[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">100</span>,<span class="hljs-number">999</span>,<span class="hljs-number">213</span>,<span class="hljs-number">1111</span>,<span class="hljs-number">31121</span>,<span class="hljs-number">333</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(l))<br><br>dic=&#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;k3&#x27;</span>:<span class="hljs-number">30</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(dic))<br><span class="hljs-built_in">print</span>(dic[<span class="hljs-built_in">max</span>(dic,key=<span class="hljs-keyword">lambda</span> k:dic[k])])<br><br>res = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br><span class="hljs-built_in">print</span>(i)<br><br>res = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x:x&gt;<span class="hljs-number">10</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-number">9</span>,<span class="hljs-number">15</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的各种各样的推导式</title>
    <link href="/20220930/Python%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <url>/20220930/Python%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1>列表推导式和生成器表达式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(l)<br>l = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(l)<br>l1 = [<span class="hljs-string">&#x27;项目%s&#x27;</span>%i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(l1)<br></code></pre></td></tr></table></figure><ol><li class="lvl-3"><p>把列表解析的[]换成()得到的就是生成器表达式（这里描述了生成器表达式的形式）</p></li><li class="lvl-3"><p>列表解析与生成器表达式都是一种便利的编程方式，只不过生成器表达式更节省内存，生成器表达式将许多个变量变成一个统一的表达式，在运行时会自动填入</p></li><li class="lvl-4"><p>Python不但使用迭代器协议，让for循环变得更加通用。大部分内置函数，也是使用迭代器协议访 问对象的。例如， sum函数是Python的内置函数，该函数使用迭代器协议访问对象，而生成器实 现了迭代器协议，所以，我们可以直接这样计算一系列值的和：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = <span class="hljs-built_in">sum</span>(x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>))<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><h1>推导式详细格式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">variable = [out_exp_res <span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list <span class="hljs-keyword">if</span> out_exp == <span class="hljs-number">2</span>]<br>out_exp_res: 列表生成元素表达式，可以是有返回值的函数。<br><span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list： 迭代input_list将out_exp传入out_exp_res表达式中。<br><span class="hljs-keyword">if</span> out_exp == <span class="hljs-number">2</span>： 根据条件过滤哪些值可以。<br></code></pre></td></tr></table></figure><h1>列表推导式</h1><p>30以内所有能被3整除的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">multiples = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(multiples)<br></code></pre></td></tr></table></figure><p>30以内所有能被3整除的数的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">squared</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x*x<br><br>multiples = [squared(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(multiples)<br></code></pre></td></tr></table></figure><p>找到嵌套列表中名字含有两个及以上‘a’的所有名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [[<span class="hljs-string">&#x27;peach&#x27;</span>,<span class="hljs-string">&#x27;Lemon&#x27;</span>,<span class="hljs-string">&#x27;Pear&#x27;</span>,<span class="hljs-string">&#x27;avocado&#x27;</span>,<span class="hljs-string">&#x27;cantaloupe&#x27;</span>,<span class="hljs-string">&#x27;Banana&#x27;</span>,<span class="hljs-string">&#x27;Grape&#x27;</span>],<br>[<span class="hljs-string">&#x27;raisins&#x27;</span>,<span class="hljs-string">&#x27;plum&#x27;</span>,<span class="hljs-string">&#x27;apricot&#x27;</span>,<span class="hljs-string">&#x27;nectarine&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>,<span class="hljs-string">&#x27;papaya&#x27;</span>]]<br><br><span class="hljs-built_in">print</span>([name <span class="hljs-keyword">for</span> lst <span class="hljs-keyword">in</span> fruits <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> lst <span class="hljs-keyword">if</span> name.count(<span class="hljs-string">&#x27;a&#x27;</span>) &gt;= <span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>总结一下，就是在方括号中，先给出这个变量的定义，然后用循环确认出这个变量的需要满足的条件</p><h1>字典推导式</h1><p>将一个字典的key和value对调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>&#125;<br><br>dic2 = &#123;dic1[k]: k <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dic1&#125;<br><span class="hljs-built_in">print</span>(dic2)<br></code></pre></td></tr></table></figure><p>合并大小写对应的value值，将k统一成小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">dic1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;y&#x27;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;Y&#x27;</span>:<span class="hljs-number">9</span>&#125;<br><br>dic2 = &#123;key.lower():dic1.get(key.lower(),<span class="hljs-number">0</span>)+dic1.get(key.upper(),<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> key<br><span class="hljs-keyword">in</span> dic1 &#125;<br><br><span class="hljs-built_in">print</span>(dic2)<br></code></pre></td></tr></table></figure><h1>集合推导式</h1><p>计算列表中每个值的平方，自带去重功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br>squared = &#123;x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> l&#125;<br><span class="hljs-built_in">print</span>(squared)<br></code></pre></td></tr></table></figure><p>总结一下，就是在方括号中，先给出这个变量的定义，然后用循环确认出这个变量的需要满足的条件</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的迭代器与生成器</title>
    <link href="/20220930/Python%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/20220930/Python%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1>迭代器</h1><p>迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一 个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><h2 id="可迭代对象">可迭代对象</h2><p>我们已经知道可以对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使 用，我们把这样的过程称为遍历，也叫迭代。</p><p>但是，如果将整形或者其他不可迭代的对象进行迭代，就会发生报错。</p><h2 id="如何判断一个对象是否可以迭代">如何判断一个对象是否可以迭代</h2><p>可以使用 <strong>isinstance()</strong> 判断一个对象是否是 <strong>Iterable</strong> 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串、列表、元组、字典、集合都可以被for循环，说明他们都是可迭代的</span><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable<br><br>l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>d = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>: <span class="hljs-number">4</span>&#125;<br>s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l, Iterable))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(t, Iterable))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(d, Iterable))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(s, Iterable))<br><span class="hljs-comment">#如果是可以迭代的，会有布尔返回值</span><br></code></pre></td></tr></table></figure><h2 id="可迭代对象的本质">可迭代对象的本质</h2><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个过程中就应该有一 个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们 进行数据迭代的“人”称为迭代器(Iterator)。</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。</p><p>可迭代对象通过 <code>__iter__</code>方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就 是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据.</p><p>那么也就是说，一个具备了 <code>__iter__</code> 方法的对象，就是一个可迭代对象。</p><p>可以被迭代要满足的要求就叫做可迭代协议。可迭代协议的定义非常简单，就是内部实现了__iter__方 法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>d = &#123;<span class="hljs-number">1</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>: <span class="hljs-number">4</span>&#125;<br>s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><span class="hljs-comment">#dir方法可以查看一个对象的所有属性和方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(l))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(t))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(d))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(s))<br></code></pre></td></tr></table></figure><p>可迭代的：内部必须含有一个__iter__方法</p><h2 id="item-函数与-next-函数"><code>__item__函数与__next__函数</code></h2><p>迭代器遵循迭代器协议：必须拥有iter方法和next方法。</p><p>list、tuple等都是可迭代对象，我们可以通过iter()函数获取这些可迭代对象的迭代器。然后我们可以对 获取到的迭代器不断使用next()函数来获取下一条数据。iter()函数实际上就是调用了可迭代对象的 <code>__iter__</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l_iter = l.__iter__()<br>item = l_iter.__next__()<br><span class="hljs-built_in">print</span>(item)<br>item = l_iter.__next__()<br><span class="hljs-built_in">print</span>(item)<br>item = l_iter.__next__()<br><span class="hljs-built_in">print</span>(item)<br>item = l_iter.__next__()<br><span class="hljs-built_in">print</span>(item)<br>item = l_iter.__next__()<br><span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>for循环，能遍历一个可迭代对象，他的内部到底进行了什么？</p><p>将可迭代对象转化成迭代器。（可迭代对象.<code>__iter__</code>()） 内部使用<code>__next__</code>方法，一个一个取值。 加了异常处理功能，取值到底后自动停止。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>l_iter = l.__iter__()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">try</span>:<br>item = l_iter.__next__()<br><span class="hljs-built_in">print</span>(item)<br><span class="hljs-keyword">except</span> StopIteration:<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>对于迭代器使用他的next方法，即在迭代器后面加上 <code>__next__</code>,这样就可以通过迭代器的next获取其返回的其记录的下一个位置的数据。所以，想要构造一个迭代器，就要实现他的<code>__next__</code>方法，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现 <code>__iter__</code> 方法，而 <code>__iter__</code> 方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的 <code>__iter__</code> 方法返回自身即可。</p><h2 id="如何判断一个对象是否是迭代器">如何判断一个对象是否是迭代器</h2><p>可以使用 isinstance() 判断一个对象是否是 Iterator 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterator<br><br><span class="hljs-built_in">isinstance</span>([], Iterator)<br><span class="hljs-literal">False</span><br><br><span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>([]), Iterator)<br><span class="hljs-literal">True</span><br><br><span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>(<span class="hljs-string">&quot;abc&quot;</span>), Iterator)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="为什么要有for循环">为什么要有for循环</h2><p>for循环就是基于迭代器协议提供了一个统一的可以遍历所有对象的方法，即在遍历之前，先调用对象的 <code>__iter__</code>方法将其转换成一个迭代器，然后使用迭代器协议去实现循环访问，这样所有的对象就都可以通 过for循环来遍历了</p><p>最重要的一点，转化成迭代器，在循环时，同一时刻在内存中只出现一条数据，极大限度的节省了内存</p><p>for item in Iterable 循环的本质就是先通过iter()函数获取可迭代对象Iterable的迭代器，然后对获取到 的迭代器不断调用next()方法来获取下一个值并将其赋值给item，当遇到StopIteration的异常后循环结 束。</p><h1>生成器</h1><h2 id="初识生成器">初识生成器</h2><h3 id="Python中提供的生成器">Python中提供的生成器</h3><ol><li class="lvl-4"><p>生成器函数：常规函数定义，但是，使用yield语句而不是return语句返回结果。yield语句一次返 回一个结果，在每个结果中间，挂起函数的状态，以便下次从它离开的地方继续执行</p></li><li class="lvl-3"><p>生成器表达式：类似于列表推导，但是，生成器返回按需产生结果的一个对象，而不是一次构建一 个结果列表</p></li></ol><h3 id="生成器Generator">生成器Generator</h3><ul class="lvl-0"><li class="lvl-2"><p>本质：迭代器(所以自带了iter方法和next方法，不需要我们去实现)，他本身是符合迭代器的所有特性的，但是也迭代器的用途与功能不同</p></li><li class="lvl-2"><p>特点：惰性运算,开发者自定义（可以通过开发者自己的算法每次给出不同的值，让其迭代每次返回值不同）</p></li></ul><h2 id="生成器函数">生成器函数</h2><p>**一个包含yield关键字的函数就是一个生成器函数。**yield与return有类似的作用，都可以的返回一个值给上层，但是return会将当前的程序直接终止，而yield的作用是将该程序暂时挂起，这样再次引用这个函数时会从上一次停止的yield再次开始</p><p>每一次获取这个可迭代对象的值，就能推动函数的执行，获取新的返回值。直到函数执行结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">genrator_func1</span>():<br>a = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;将a赋值&#x27;</span>)<br><span class="hljs-keyword">yield</span> a<br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;将b赋值&#x27;</span>)<br><span class="hljs-keyword">yield</span> b<br><br>g1 = genrator_func1()<br><span class="hljs-built_in">print</span>(g1)<br><span class="hljs-built_in">print</span>(g1.__next__())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g1))<br></code></pre></td></tr></table></figure><h2 id="生成器包子案例">生成器包子案例</h2><p>生成器不会一下子在内存中生成太多数据</p><p>比如我想卖包子，让包子工厂开始加工10000个包子，但是如果一下子全部生产好，没地方放，而且容 易坏。 那么可以让包子工厂在我需要的时候再生产</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">produce</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;生产包子&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br><span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;生产了第%s个包子&#x27;</span>%i<br><br>produce_g = produce()<br><span class="hljs-built_in">print</span>(produce_g.__next__())<br><span class="hljs-built_in">print</span>(produce_g.__next__())<br><span class="hljs-built_in">print</span>(produce_g.__next__())<br><br><span class="hljs-comment"># 需要一批包子</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<span class="hljs-comment">#生成器也可以一次性多次生成</span><br><span class="hljs-built_in">print</span>(produce_g.__next__())<br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>使用了yield关键字的函数不再是函数，而是生成器。（使用了yield的函数就是生成器）</p></li><li class="lvl-2"><p>yield关键字有两点作用</p><ul class="lvl-2"><li class="lvl-4">保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</li><li class="lvl-4">将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用</li></ul></li><li class="lvl-2"><p>可以使用next()函数让生成器从断点处继续执行，即唤醒生成器（函数）</p></li></ul><h2 id="send">send</h2><p>send 获取下一个值的效果和next基本一致，但是是一个特殊的next，在执行next的功能后还会给上一个yield传递一个数据</p><p>注意事项：</p><ul class="lvl-0"><li class="lvl-2"><p>第一次使用生成器的时候 是用next获取下一个值</p></li><li class="lvl-2"><p>最后一个yield不能接受外部的值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generator</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>content = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;=========&#x27;</span>,content)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br><span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br><br>g = generator()<br>ret = g.__next__()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;***&#x27;</span>,ret)<br>ret = g.send(<span class="hljs-string">&#x27;hello&#x27;</span>)<span class="hljs-comment">#这里会将hello的值传回去</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;***&#x27;</span>,ret)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的装饰器</title>
    <link href="/20220930/Python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/20220930/Python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1>什么是装饰器</h1><p>让其他函数在不需要做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。 装饰器的应用场景：比如插入日志，性能测试，事务处理，缓存等等场景。</p><p>简单来说，就是将一个定义好的函数，将其函数名传入另外一个函数，在另一个函数中加入其他的功能，最后返回出新的函数的名，让原本的函数名去接收，完成这个原本函数的更新</p><h2 id="案例">案例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in func1&quot;</span>)<br><span class="hljs-comment"># 要求调用func1()输出如下内容，并且前提是不动原本的两行代码</span><br><span class="hljs-comment"># hello world</span><br><span class="hljs-comment"># in func1</span><br><span class="hljs-comment"># hello python</span><br></code></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<span class="hljs-comment">#添加的第一个功能</span><br>func()<span class="hljs-comment">#这个函数有原本需要的函数功能</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello python&quot;</span>)<span class="hljs-comment">#添加的第二个功能</span><br><span class="hljs-keyword">return</span> inner<span class="hljs-comment">#外层函数唯一的作用是将这个修改后的函数返回</span><br>func1 = func2(func1)<span class="hljs-comment">#调用func1的函数将其返回值给func1，完成对func1的升级</span><br>func1()<br></code></pre></td></tr></table></figure><h1>装饰器的形成过程</h1><p>如果我想测试某个函数的执行时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-comment">#引入time这个库，类似C语言的头文件</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in func1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">func</span>):<span class="hljs-comment">#这个是一个对func1的修饰器，可以计算出一个程序的运行时间</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>start = time.time()<span class="hljs-comment">#计算程序开始的时间</span><br>func()<span class="hljs-comment">#运行程序</span><br>         time.sleep(<span class="hljs-number">1</span>)<span class="hljs-comment">#为了让结果更明显，让程序睡眠1秒钟</span><br><span class="hljs-built_in">print</span>(time.time() - start)<span class="hljs-comment">#将现在的时间减去开始的时间</span><br><span class="hljs-keyword">return</span> inner<br><br>func1 = timer(func1) <span class="hljs-comment">#inner()目前实际是inner的功能</span><br>func1()<br></code></pre></td></tr></table></figure><p>但是如果有多个函数，我都想让你测试他们的执行时间，你每次是不是都得func1 = timer(func1)?这样 还是有点麻烦，因为这些函数的函数名可能是不相同，有func1，func2,graph,等等，所以更简单的方 法，python给你提供了，那就是语法糖。</p><p>语法糖的用法是，先定义一个修饰器，例如像上一个算时间的修饰器，搞个语法糖的叫做@timer</p><p>将这个语法糖黏在定义的新函数的上方，即可用timer这个修饰器去修饰这个新定义的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>start = time.time()<br>func()<br><span class="hljs-built_in">print</span>(time.time() - start)<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@timer</span><span class="hljs-comment">#将下面这个函数用上面的修饰器那样修饰</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in func1&#x27;</span>)<br><br>func1()<br></code></pre></td></tr></table></figure><h1>装饰一个带各种参数的函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args,**kwargs</span>):<span class="hljs-comment">#用这样的方式接收所有的变量</span><br>start = time.time()<br>func(*args,**kwargs)<br><span class="hljs-built_in">print</span>(time.time() - start)<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">*args,**kwargs</span>):<br><span class="hljs-built_in">print</span>(args,kwargs)<br><br>func1(<span class="hljs-string">&#x27;hello world&#x27;</span>,<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-number">432</span>,name=<span class="hljs-string">&#x27;zhangsan&#x27;</span>)<br></code></pre></td></tr></table></figure><p>与原本的装饰方式类似，但是函数需要将变量的类型进行修改</p><h1>wraps装饰器</h1><h2 id="查看函数的相关信息">查看函数的相关信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;这是一条注释信息&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from index&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(index.__doc__) <span class="hljs-comment"># 查看函数注释</span><br><span class="hljs-built_in">print</span>(index.__name__) <span class="hljs-comment"># 查看函数名称</span><br><br>加上装饰器<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;这里是inner&#x27;&#x27;&#x27;</span><br>func()<br><span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-meta">@outer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;这是一条注释信息&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from index&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(index.__doc__) <span class="hljs-comment"># 查看函数注释</span><br><span class="hljs-built_in">print</span>(index.__name__) <span class="hljs-comment"># 查看函数名称</span><br><br><span class="hljs-comment">#运行结果，此处可知，由于修饰器的作用吗，导致函数的基本信息与相应的注释，全部变成了升级后的函数内的注释以及函数名，不在是原来所需要的函数的名字与信息，具体的解决方法就是wraps修饰器</span><br>这是一条注释信息<br>index<br>这里是inner<br>inner<br></code></pre></td></tr></table></figure><p>导入wraps修饰器，可以保留函数本身的属性以及相关的注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">@wraps(<span class="hljs-params">func</span>)</span><span class="hljs-comment">#在修饰器种加入wrap函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;这里是inner&#x27;&#x27;&#x27;</span><br>func()<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@outer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;这是一条注释信息&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from index&#x27;</span>)<br><span class="hljs-built_in">print</span>(index.__doc__) <span class="hljs-comment"># 查看函数注释</span><br><span class="hljs-built_in">print</span>(index.__name__) <span class="hljs-comment"># 查看函数名称</span><br><br><br><br><br><span class="hljs-comment">###不定长参数参数</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">@wraps(<span class="hljs-params">func</span>)</span><span class="hljs-comment">#在修饰器中加入wraps函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args,**kwargs</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;这里是inner&#x27;&#x27;&#x27;</span><br>func(*args,**kwargs)<br><span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-meta">@outer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br><span class="hljs-string">&#x27;&#x27;&#x27;这是一条注释信息&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from index&#x27;</span>)<br><span class="hljs-built_in">print</span>(index.__doc__) <span class="hljs-comment"># 查看函数注释</span><br><span class="hljs-built_in">print</span>(index.__name__) <span class="hljs-comment"># 查看函数名称</span><br></code></pre></td></tr></table></figure><p>wraps修饰器就是在正常的修饰器种加入一个@wraps(形参)，即可保留函数原本的信息</p><h1>带控制参数的装饰器</h1><p>加上一个outer函数，可以携带一个flag的值，然后控制装饰器是否生效</p><p>解释：在修饰糖的后面加入一个变量或者布尔值，在修饰器的逻辑种加入一个判断，如果为True则进行修饰，如果为False则不进行修饰，但是，不管有没有修饰，修饰器已经起作用，所以为了函数的信息不发生变化，必须让wraps修饰器起作用，判断函数归判断函数，必须让wraps修饰器起作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">oouter</span>(<span class="hljs-params">flag</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">@wraps(<span class="hljs-params">func</span>)</span><span class="hljs-comment">#加入一个函数的嵌套执行是为了让wraps修饰器起作用</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args, **kwargs</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;这里是inner&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> flag:<span class="hljs-comment">#加入判断语句，判断具体要不要进行修饰</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始装饰&quot;</span>)<br>func(*args, **kwargs)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;装饰结束&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>func(*args, **kwargs)<br><span class="hljs-keyword">return</span> inner<br><span class="hljs-keyword">return</span> outer<br><br><span class="hljs-meta">@oouter(<span class="hljs-params"><span class="hljs-literal">True</span></span>)</span><span class="hljs-comment">#是否进行修饰要靠修饰糖上面的布尔值类型进行判断</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">a</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;这是一条注释信息&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;from index&#x27;</span>)<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-built_in">print</span>(index.__doc__) <span class="hljs-comment"># 查看函数注释</span><br><span class="hljs-built_in">print</span>(index.__name__) <span class="hljs-comment"># 查看函数名称</span><br>index(<span class="hljs-string">&#x27;abc&#x27;</span>)<br></code></pre></td></tr></table></figure><h1>多个装饰器装饰一个函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#先装饰距离函数更近的装饰器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper1</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第一个装饰器，在程序运行之前&#x27;</span>)<br>func()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第一个装饰器，在程序运行之后&#x27;</span>)<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper2</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第二个装饰器，在程序运行之前&#x27;</span>)<br>func()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第二个装饰器，在程序运行之后&#x27;</span>)<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@wrapper1</span><span class="hljs-comment">#第一个修饰糖</span><br><span class="hljs-meta">@wrapper2</span><span class="hljs-comment">#第二个修饰糖</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br><br>f()<br></code></pre></td></tr></table></figure><p>总结：哪个修饰糖距离更近就先执行哪个，在执行完一个后，这个函数已经发生了变化，将由修饰糖2修饰过的函数交给修饰糖1进行再次修饰，从而得出修饰结果</p><h1>开放封闭原则</h1><p>软件实体应该是可扩展但是不可修改的。</p><ul class="lvl-0"><li class="lvl-2"><p>对于扩展是开放的</p></li><li class="lvl-2"><p>对于修改是封闭的</p></li></ul><p>装饰器完美的遵循了这个开放封闭原则</p><h1>装饰器的主要功能和固定结构</h1><h2 id="本科所学习的知识总结运用">本科所学习的知识总结运用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args,**kwargs</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;执行函数之前要做的&#x27;&#x27;&#x27;</span><br>re = func(*args,**kwargs)<br><span class="hljs-string">&#x27;&#x27;&#x27;执行函数之后要做的&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">return</span> re<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment"># 下面是加上wraps的固定结构</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">@wraps(<span class="hljs-params">func</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args,**kwargs</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;执行函数之前要做的&#x27;&#x27;&#x27;</span><br>re = func(*args,**kwargs)<br><span class="hljs-string">&#x27;&#x27;&#x27;执行函数之后要做的&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">return</span> re<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment">#加上flag</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">oouter</span>(<span class="hljs-params">flag</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">@wraps(<span class="hljs-params">func</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args,**kwargs</span>)<br><span class="hljs-keyword">if</span> flag:<br><span class="hljs-string">&#x27;&#x27;&#x27;执行函数之前要做的&#x27;&#x27;&#x27;</span><br>re = func(*args,**kwargs)<br><span class="hljs-string">&#x27;&#x27;&#x27;执行函数之后要做的&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">else</span>:<br>re = func(*args,**kwargs)<br><span class="hljs-keyword">return</span> re<br><span class="hljs-keyword">return</span> inner<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数用法</title>
    <link href="/20220930/Python%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/"/>
    <url>/20220930/Python%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>数字比较案例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">num1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入第一个数字:&quot;</span>))<br>num2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入第二个数字:&quot;</span>))<br><span class="hljs-keyword">if</span> num1&gt;num2:<br><span class="hljs-built_in">print</span>(num1+<span class="hljs-string">&quot;&gt;&quot;</span>+num2)<br><span class="hljs-keyword">elif</span> num1 &lt; num2:<br><span class="hljs-built_in">print</span>(num1+<span class="hljs-string">&quot;&lt;&quot;</span>+num2)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(num1+<span class="hljs-string">&quot;=&quot;</span>+num2)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compare_num</span>(<span class="hljs-params">num1,num2</span>):<br><span class="hljs-keyword">if</span> num1&gt;num2:<br><span class="hljs-built_in">print</span>(num1+<span class="hljs-string">&quot;&gt;&quot;</span>+num2)<br><span class="hljs-keyword">elif</span> num1 &lt; num2:<br><span class="hljs-built_in">print</span>(num1+<span class="hljs-string">&quot;&lt;&quot;</span>+num2)<br><span class="hljs-keyword">else</span>:<br>print(num1+<span class="hljs-string">&quot;=&quot;</span>+num2)<br>compare_num(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><h1>函数的定义与调用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_len</span>(<span class="hljs-params">s</span>):<span class="hljs-comment">#定义一个函数</span><br>length = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>length = length + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(length)<br>    <br>my_len(<span class="hljs-string">&quot;hello world&quot;</span>)<span class="hljs-comment">#直接进行调用</span><br></code></pre></td></tr></table></figure><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs flix">定义：<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">关键词开头，空格之后接函数名称和圆括号</span></span>()，最后还有一个<span class="hljs-string">&quot;:&quot;</span>。<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">是固定的，不能变，他就是定义函数的关键字。</span></span><br><br>空格 为了将<span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">关键字和函数名分开，必须空</span></span>(四声)，当然你可以空<span class="hljs-number">2</span>格、<span class="hljs-number">3</span>格或者你想空多少都行，但正常人还是空<span class="hljs-number">1</span>格。<br><br>函数名：函数名只能包含字符串、下划线和数字且不能以数字开头。虽然函数名可以随便起，但我们给函数起名字还是要尽量简短，并能表达函数功能<br><br>括号：是必须加的，先别问为啥要有括号，总之加上括号就对了！<br><br>注释：每一个函数都应该对功能和参数进行相应的说明，应该写在函数下面第一行。以增强代码的可读性。<br><br>调用：就是 函数名() 要记得加上括号。<br></code></pre></td></tr></table></figure><h1>函数的返回值</h1><ul class="lvl-0"><li class="lvl-2"><p>return 是一个关键字，这个词翻译过来就是“返回”，所以我们管写在return后面的值叫“返回值”。</p></li><li class="lvl-2"><p>不写return的情况下，会默认返回一个None</p></li><li class="lvl-2"><p>一旦遇到return，结束整个函数。</p></li><li class="lvl-2"><p>返回多个值会被组织成元组被返回，也可以用多个值来接收</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_len</span>(<span class="hljs-params">s</span>):<br>length = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>length += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> length<br><br>ret = my_len(<span class="hljs-string">&#x27;hello world!&#x27;</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><p>实际的要交给函数的内容，简称实参。</p><p>在定义函数的时候它只是一个形式，表示这里有一个参数，简称形参。</p><ol><li class="lvl-3"><p>按照位置传值：位置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxnumber</span>(<span class="hljs-params">x,y</span>):<br>the_max = x <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> y<br><span class="hljs-keyword">return</span> the_max<br><br>ret = maxnumber(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>按照关键字传值：关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxnumber</span>(<span class="hljs-params">x,y</span>):<br>the_max = x <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> y<br><span class="hljs-keyword">return</span> the_max<br><br>ret = maxnumber(y = <span class="hljs-number">10</span>,x = <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>位置、关键字形式混着用：混合传参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxnumber</span>(<span class="hljs-params">x,y</span>):<br>the_max = x <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> y<br><span class="hljs-keyword">return</span> the_max<br><br>ret = maxnumber(<span class="hljs-number">10</span>,y = <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><p>位置参数必须在关键字参数的前面</p><p>对于一个形参只能赋值一次</p></li><li class="lvl-3"><p>默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">stu_info</span>(<span class="hljs-params">name,age = <span class="hljs-number">18</span></span>):<br><span class="hljs-built_in">print</span>(name,age)<br>    <br>stu_info(<span class="hljs-string">&#x27;aaron&#x27;</span>)<br>stu_info(<span class="hljs-string">&#x27;song&#x27;</span>,<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure></li><li class="lvl-4"><p>默认参数是一个可变数据类型</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">a,l = []</span>):<br>l.append(a)<br><span class="hljs-built_in">print</span>(l)<br><br>demo(<span class="hljs-string">&#x27;abc&#x27;</span>)<br>demo(<span class="hljs-string">&#x27;123&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>动态参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">*args,**kwargs</span>):<br><span class="hljs-built_in">print</span>(args,<span class="hljs-built_in">type</span>(args))<br><span class="hljs-built_in">print</span>(kwargs,<span class="hljs-built_in">type</span>(kwargs))<br><br>demo(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>],&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">321</span>&#125;,country=<span class="hljs-string">&#x27;china&#x27;</span>,b=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#动态参数，也叫不定长传参，就是你需要传给函数的参数很多，不定个数，那这种情况下，你就用*args，**kwargs接收，args是元祖形式，接收除去键值对以外的所有参数，kwargs接收的只是键值对的参数，并保存在字典中。</span><br></code></pre></td></tr></table></figure><p>python中函数的参数有位置参数、默认参数、可变参数、命名关键字参数和关键字参数,这个顺序也是定 义函数时的必须顺序。</p></li></ol><h1>命名空间和作用域</h1><p>代码在运行伊始，创建的存储“变量名与值的关系”的空间叫做全局命名空间； 在函数的运行中开辟的临时的空间叫做局部命名空间。</p><p>命名空间一共分为三种：</p><ul class="lvl-0"><li class="lvl-2"><p>内置命名空间：</p><p>系统自带的命名空间</p></li><li class="lvl-2"><p>全局命名空间</p><p>本模块中的命名空间</p></li><li class="lvl-2"><p>局部命名空间</p><p>函数内部的命名空间</p></li></ul><h2 id="变量取值的顺序">变量取值的顺序</h2><p>在局部调用：局部命名空间–&gt;全局命名空间–&gt;内置命名空间</p><p>在全局调用：局部名称空间只在局部范围生效，如果在全局使用局部所定义的变量，会导致报错，因为在全局内没有这个变量</p><h2 id="globals与locals方法">globals与locals方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())<span class="hljs-comment">#打印目前的全局内的所有变量（不包含局部变量）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<span class="hljs-comment">#打印目前定义的局部变量（除去所有的全局变量）</span><br><span class="hljs-comment">#实际上全局与局部的所有变量都是严格分开在不同的空间内，分开存放的</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>a = <span class="hljs-number">12</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())<br><br>func()<span class="hljs-comment">#调用func函数</span><br></code></pre></td></tr></table></figure><h3 id="global-关键字">global 关键字</h3><ol><li class="lvl-4"><p>声明一个全局变量。</p></li><li class="lvl-3"><p>在局部作用域想要对全局作用域的全局变量进行修改时，需要用到 global(限于字符串，数字)。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-keyword">global</span> a<span class="hljs-comment">#在局部定义了一个全局的变量a</span><br>a = <span class="hljs-number">3</span><span class="hljs-comment">#对这个全局的变量a进行赋值</span><br><br>func()<br><span class="hljs-built_in">print</span>(a)<br><br>count = <span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<br><span class="hljs-keyword">global</span> count<span class="hljs-comment">#在局部对一个全局变量进行引用并进行赋值</span><br>count = <span class="hljs-number">2</span><br>    <br>search()<span class="hljs-comment">#引用函数，在局部中修改成功</span><br><span class="hljs-built_in">print</span>(count)<span class="hljs-comment">#在全局中未修改</span><br></code></pre></td></tr></table></figure><p><strong>对可变数据类型（list，dict，set）可以直接引用不用通过global</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<span class="hljs-comment">#这个列表为全局变量</span><br>dic = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;aaron&#x27;</span>&#125;<span class="hljs-comment">#这个字典为全局变量</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>():<br>li.append(<span class="hljs-number">4</span>)<span class="hljs-comment">#在局部中对列表进行了修改</span><br>dic[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">18</span><span class="hljs-comment">#在局部中对字典进行了修改</span><br><span class="hljs-built_in">print</span>(dic)<br><span class="hljs-built_in">print</span>(li)<br><br>change()<span class="hljs-comment">#函数中修改成功 </span><br><span class="hljs-built_in">print</span>(dic)<span class="hljs-comment">#同时外部也被修改成功</span><br><span class="hljs-built_in">print</span>(li)<span class="hljs-comment">#同时外部也被修改成功</span><br></code></pre></td></tr></table></figure><h2 id="nonlocal">nonlocal</h2><ol><li class="lvl-3"><p>不能修改全局变量。</p></li><li class="lvl-4"><p>在局部作用域中，对父级作用域（或者更外层作用域非全局作用域）的变量进行引用和修改，并且引用的哪层，从那层及以下此变量全部发生改变。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_b</span>():<br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_global</span>():<br>b = <span class="hljs-number">10</span><span class="hljs-comment">#此刻外层函数中b=1，但是内层函数中b=10</span><br><span class="hljs-built_in">print</span>(b)<span class="hljs-comment">#打印结果b=10</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dd_nolocal</span>():<br><span class="hljs-keyword">nonlocal</span> b <span class="hljs-comment"># 应用了上一层的变量b</span><br>b = b + <span class="hljs-number">20</span><br>            <span class="hljs-comment">#由于使用了nonlocal函数导致这里的b被修改后上一层的b以及多有下面的所有b都发生改变</span><br><span class="hljs-built_in">print</span>(b) <span class="hljs-comment"># 函数中的b确实发生了改变</span><br>dd_nolocal() <span class="hljs-comment"># 调用函数，导致do_global的命名空间b也改变了</span><br><span class="hljs-built_in">print</span>(b)<span class="hljs-comment">#发现由于在子空间中的对变量的改变导致了父空间中的变量也改变</span><br>do_global()<br><span class="hljs-built_in">print</span>(b)<span class="hljs-comment">#但是变化不会影响最外层的变量，所以这里的b还是1</span><br>    <br><span class="hljs-comment">#执行语句，要学会在Python中通过缩进分辨出执行语句与定义的函数 </span><br>add_b() <span class="hljs-comment"># 最上面一层没有变化</span><br></code></pre></td></tr></table></figure><h1>函数的嵌套和作用域链</h1><h2 id="嵌套调用">嵌套调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mymax</span>(<span class="hljs-params">x,y</span>):<span class="hljs-comment">#定义一个比较两个数大小的函数</span><br>m = x <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> y<br><span class="hljs-keyword">return</span> m<span class="hljs-comment">#返回比较大的那个数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxx</span>(<span class="hljs-params">a,b,c,d</span>):<span class="hljs-comment">#定义一个新函数，用于比较四个数的大小</span><br>res1 = mymax(a,b)<span class="hljs-comment">#嵌套调用先比较前两个数选出最大的</span><br>res2 = mymax(res1,c)<span class="hljs-comment">#利用前面比较出的结果，比较出是否有更大的</span><br>res3 = mymax(res2,d)<span class="hljs-comment">#利用前面比较出的结果，比较出是否有更大的</span><br><span class="hljs-keyword">return</span> res3<span class="hljs-comment">#最终返回最大值</span><br><br>ret = maxx(<span class="hljs-number">23</span>,<span class="hljs-number">453</span>,<span class="hljs-number">12</span>,-<span class="hljs-number">13</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><h2 id="嵌套申明">嵌套申明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in f1&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<span class="hljs-comment">#在一个函数的申明中再定义一个函数，叫做嵌套申明</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in f2&quot;</span>)<br>f2()<br><br>f1()<br></code></pre></td></tr></table></figure><h1>函数名的本质</h1><p>函数名的本质实际是内存地址</p><p>函数名所具备的特性：</p><ol><li class="lvl-3"><p>可以被引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;in func&#x27;</span>)<br><br>f = func<br><br><span class="hljs-built_in">print</span>(f)<span class="hljs-comment">#打印出来的是这个函数所存放的地址</span><br>f()<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>可以被当做容器类型的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f3&#x27;</span>)<br><br>l = [f1,f2,f3]<br>d = &#123;<span class="hljs-string">&#x27;f1&#x27;</span>:f1,<span class="hljs-string">&#x27;f2&#x27;</span>:f2,<span class="hljs-string">&#x27;f3&#x27;</span>:f3&#125;<br><br><span class="hljs-comment">#调用</span><br>l[<span class="hljs-number">0</span>]()<br>d[<span class="hljs-string">&#x27;f2&#x27;</span>]()<br><span class="hljs-comment">#将函数的名字放在容器中进行调用</span><br><span class="hljs-comment">#可行原因：函数名本身是函数所在的地址，这样就可以将这个地址当做一个量进行存放</span><br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>可以当做函数的参数和返回值</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<span class="hljs-comment">#定义一个叫做f1的函数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">argv</span>):<span class="hljs-comment">#定义一个函数，参数是一个函数的地址</span><br>argv()<br><span class="hljs-keyword">return</span> argv<span class="hljs-comment">#作用是返回这个函数，当使用一个变量去接收这个函数的结果时，就将这个变量也变成了这个函数，那么这个接收的量就可以变成一个相同的函数，与其他函数的使用方法一致</span><br><br>f = func(f1)<br>f()<br></code></pre></td></tr></table></figure><h1>闭包</h1><h2 id="闭包的定义">闭包的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>name = <span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">return</span> inner<br><br>f = func()<br>f()<br></code></pre></td></tr></table></figure><p>内部函数包含对外部作用域而非全局作用域变量的引用，该内部函数称为闭包函数</p><p>解释：如果一个内部函数，引用了一个变量，而这个变量不是其内部的，而是一个外部的，而且不是全局变量，那么称这个函数是一个闭包函数</p><h2 id="用于判断是否为闭包的函数-closure">用于判断是否为闭包的函数 closure</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>name = <span class="hljs-string">&#x27;aaron&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(inner.__closure__)<br><span class="hljs-keyword">return</span> inner<br><br>f = func()<span class="hljs-comment">#innner函数引用了name变量，这个变量是func内的，但是并非全局变量，是闭包</span><br>f()<br><br>(&lt;cell at <span class="hljs-number">0x000002103F7A5678</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x000002103F76E180</span>&gt;,)<br>aaron<br><span class="hljs-comment"># 最后运行的结果里面有cell就是闭包</span><br><br>---------------------------------------分割线-----------------------------------------------<br><br>name = <span class="hljs-string">&#x27;aaron&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(name)<span class="hljs-comment">#引用了外部元素，但是这个元素是全局变量，所以不是闭包</span><br><span class="hljs-built_in">print</span>(inner.__closure__)<br><span class="hljs-keyword">return</span> inner<br><br>f = func()<br>f()<br><br><span class="hljs-literal">None</span><br>aaron<br><span class="hljs-comment"># 输出结果为None，说明不是闭包</span><br><br>---------------------------------------分割线-----------------------------------------------<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>name = <span class="hljs-string">&#x27;aaron&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-keyword">nonlocal</span> name<br>name=<span class="hljs-string">&#x27;lisi&#x27;</span><br><span class="hljs-built_in">print</span>(name)<span class="hljs-comment">#引用了父级函数中的name，且不是全局变量，所以是闭包</span><br><span class="hljs-built_in">print</span>(inner.__closure__)<br><span class="hljs-keyword">return</span> inner<br><br>f = func()<br>f()<br><span class="hljs-comment">#输出结果为cell说明是闭包</span><br><br>---------------------------------------分割线-----------------------------------------------<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a,b</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> a*x + b<span class="hljs-comment">#这里使用了外部函数所获得的参数，也算是使用了外部函数的变量</span><br><span class="hljs-built_in">print</span>(inner.__closure__)<br><span class="hljs-keyword">return</span> inner<br><br>func1 = func(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>func2 = func(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(func1(<span class="hljs-number">5</span>),func2(<span class="hljs-number">6</span>))<br><br><span class="hljs-comment">#使用内部函数使用外部函数的参数，也算使用变量，也是闭包</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<span class="hljs-comment">#从urllib.request引用一个包叫做urlopen</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>content = urlopen(<span class="hljs-string">&#x27;http://myip.ipip.net&#x27;</span>).read()<span class="hljs-comment">#访问这个网址并将其内容进行读取</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>():<br><span class="hljs-built_in">print</span>(get_content.__closure__)<br><span class="hljs-keyword">return</span> content<span class="hljs-comment">#最后返回的是其父空间的变量，因为这个所以这个也是闭包</span><br><br><span class="hljs-keyword">return</span> get_content<span class="hljs-comment">#返回的是函数名而不是结果，此时contant中已经有了网站中的内容</span><br><br><br>code = func() <span class="hljs-comment">#get_content()  这个code的表示的是函数get_content的函数地址，而不是量</span><br>content = code()<span class="hljs-comment">#相当于调用了get_content这个函数</span><br><span class="hljs-built_in">print</span>(content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>content2 = code()<br><span class="hljs-built_in">print</span>(content2.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-comment">#内部函数直接return外部函数的参数，也是使用变量，也是闭包</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java环境安装</title>
    <link href="/20220930/Java%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/20220930/Java%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1>相关概念</h1><p>简单地说，Java 是由 Sun Microsystems 公司于 1995 年推出的一门面向对象程序设计语言。2010 年 Oracle 公司收购 Sun Microsystems，之后由 Oracle 公司负责 Java 的维护和版本升级。</p><p>其实，Java 还是一个平台。Java 平台由 Java 虚拟机（Java Virtual Machine，JVM）和 Java 应用编程接口（Application Programming Interface，API）构成。Java 应用编程接口为此提供了一个独立于操作系统的标准接口，可分为基本部分和扩展部分。在硬件或操作系统平台上安装一个 Java 平台之后，Java 应用程序就可运行。</p><p>Java 平台已经嵌入了几乎所有的操作系统。这样 Java 程序只编译一次，就可以在各种系统中运行。Java 的版本很多，目前大约六个月就会处一个新的版本。</p><h2 id="JDK">JDK</h2><pre><code class="hljs">**Java Development Kit（JDK）**是Sun微系统针对Java开发人员发布的**免费软件开发工具包**（SDK，Software development kit）。自从Java推出以来，JDK已经成为使用最广泛的Java SDK。由于JDK的一部分特性采用商业许可证，而非开源。因此，2006年Sun微系统宣布将发布基于GPL的开源JDK，使JDK成为自由软件。在去掉了少量闭源特性之后，Sun微系统最终促成了GPL的OpenJDK的发布。在JDK中包含一个JRE的Java运行环境。</code></pre><h2 id="JRE">JRE</h2><pre><code class="hljs">**JRE**是**Java Runtime Environment**的简称，指Java运行环境，是**Sun的产品**。运行JAVA程序所必须的环境的集合，**包含JVM标准实现及Java核心类库**。**JRE**（包括Java Plug-in）是Sun的产品，包括两部分：**Java Runtime Environment和Java** **Plug-in**。**Java Runtime Environment**是可以在其上运行、测试和传输应用程序的Java平台。它**不包含开发工具(JDK)--编译器、调试器和其它工具**。JRE需要辅助软件--Java Plug-in--以便在浏览器中运行applet。</code></pre><h2 id="JVM">JVM</h2><pre><code class="hljs">**Java Virtual Machine（JVM）**是Java虚拟机。Java为了能够实现在跨平台运行的问题，通过设计了一个虚拟机，即JVM，让所有的java代码跑在java虚拟机上，让java虚拟机运行在不同的平台上。这样实现了**跨平台**的功能，但是也是Java的最大缺点所在，每次运行Java程序都要先启动一个JVM，导致Java程序的启动与关闭缓慢。</code></pre><h1>安装所需要的软件</h1><p>作为开发人员，我们需要使用到软件开发工具包，可以在<a href="https://www.java.com/">Oracle</a>的官网进行下载。<br><img src="image-20220930201146915.png" alt="官网界面"></p><p>由于官网需要登录后才能进行下载，我们也可以去国内一些镜像站下载我们所需要的版本。</p><p>这里使用了<a href="http://www.codebaoku.com/jdk/jdk-index.html">编程宝库</a>的镜像，这里可以下载到你想要的各种版本。</p><p><img src="image-20220930201500117.png" alt="选择镜像"></p><p>我选择的是Oracle的JDK8，可以根据自己的系统下载不同的包，这里以jdk-8u333-windows-x64.exe为例。</p><p><img src="image-20220930201644820.png" alt="下载合适的JDK"></p><h1>安装步骤</h1><p>按照安装程序不断的点击下一步</p><p><img src="image-20220930202313986.png" alt=""></p><p>选择开发工具进行安装，安装位置因人而异，但是需要记住自己安装的位置，后期需要用到。</p><p><img src="image-20220930202422262.png" alt=""></p><p>我这里选择了在C盘下的Java文件夹内进行安装。点击下一步继续安装。</p><p><img src="image-20220930203217418.png" alt=""></p><p>随着安装进行，会跳出一个新的安装界面，这个是JRE程序的安装。</p><p>前文中提及过在JDK中包含了一个JRE，如果此时继续安装一个JRE，会在你的电脑中有两个JRE，这样会比较混乱，个人建议无需安装，直接点击右上角的退出即可。</p><p><img src="image-20220930203342046.png" alt=""></p><p>确认退出之后程序将完成安装</p><p><img src="image-20220930203824141.png" alt=""></p><p><img src="image-20220930203845012.png" alt=""></p><p>选择关闭之后你的JDK已经安装完成，还需要在系统的环境变量中进行添加。</p><p><img src="image-20220930204353054.png" alt="打开属性"></p><p>右击此电脑，打开属性，找到高级系统设置</p><p><img src="image-20220930204528401.png" alt="进入高级系统设置"></p><p>打开环境变量</p><p><img src="image-20220930204611908.png" alt=""></p><p>现在就能看见这样的一个界面</p><p><img src="image-20220930205258717.png" alt=""></p><p>现在之前记下来的JDK安装位置的作用就显现出来了，去到安装目录下，找到bin目录，进入后复制其路径</p><p><img src="image-20220930205205492.png" alt=""></p><p>在刚才的环境变量界面下双击Path，对系统环境变量进行编辑</p><p><img src="image-20220930205409278.png" alt=""></p><p>选择新建，将刚刚复制的bin目录的路径填入新建的环境变量中</p><p><img src="image-20220930205805978.png" alt="添加环境变量"></p><p>逐步点击确定，将修改进行保存，退回到桌面，现在Java的环境已经部署完成，我们现在可以写一个简单的Java程序来检验一下我们的安装是否成功。</p><h1>简单程序输出</h1><p>创建一个文本文件，往里写入一个java程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Helloworld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将文件重命名为 Hello.java</p><p>在桌面上按住shift键进行右击，打开Powershell窗口</p><p><img src="image-20220930211501575.png" alt="右击打开菜单"></p><p><img src="image-20220930211640114.png" alt="打开终端"></p><p>输入<code>javac Hello.java</code> 对java程序进行编译，回生成一个Helloworld.class文件</p><p><img src="image-20220930211945930.png" alt="编译命令"></p><p>输入·java Helloword·,将会在屏幕上打印一个Hello World</p><p><img src="image-20220930212128663.png" alt="Hello World"></p><p>得到预期结果，环境变量安装完成。</p><h1>代码编辑器的选择</h1><p>在我们的日常写代码的工作中，面对大量的需求与代码量，使用记事本进行写代码是完全不现实的，市面上有许多优秀的IDE。对于Java来说，市面上较为主流的IDE如下图，可以根据个人的喜好与习惯进行选择。<img src="8d1d79b751d14d6e834228dc0336f554.png" alt="市面上常见IDE"><br>好的IDE可以让我们写代码的过程更为方便，但是IDE再好，也不能对我们的代码逻辑进行优化，个人的代码能力才是最重要的。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python操作文件的基本流程</title>
    <link href="/20220905/Python%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
    <url>/20220905/Python%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1>操作文件的基本流程</h1><h2 id="操作文件的函数">操作文件的函数</h2><table><thead><tr><th>序号</th><th>函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>open</td><td>打开文件，并且返回文件操作对象</td></tr><tr><td>02</td><td>read</td><td>将文件内容读取到内存</td></tr><tr><td>03</td><td>write</td><td>将指定内容写入文件</td></tr><tr><td>04</td><td>close</td><td>关闭文件</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p>open  函数在把文件打开的同时返回文件对象</p></li><li class="lvl-2"><p>其余的三个函数都需要对文件对象进行操作才能够有效运用</p></li></ul><h3 id="open函数">open函数</h3><ol><li class="lvl-3"><p>第一个参数是文件名（文件名区分大小写）第二个参数是打开方式；</p></li><li class="lvl-3"><p>如果文件存在返回文件操作对象；</p></li><li class="lvl-3"><p>如果文件不存在抛出异常</p></li></ol><h3 id="read函数">read函数</h3><p>可以一次性读入并返回文件的所有内容</p><h3 id="close函数">close函数</h3><p>关闭文件</p><h3 id="演示代码">演示代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 打开 - 文件名需要注意大小写</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README&quot;</span>)<br><br><span class="hljs-comment"># 2. 读取</span><br>text = file.read()<br><span class="hljs-built_in">print</span>(text)<br><br><span class="hljs-comment"># 3. 关闭</span><br>file.close()<br><br><span class="hljs-comment">#打开后进行操作</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>file.write(<span class="hljs-string">&quot;hello everyone&quot;</span>)<br>file.close()<br></code></pre></td></tr></table></figure><h2 id="文件打开方式">文件打开方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;文件名&quot;</span>, <span class="hljs-string">&quot;访问方式&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="访问方式说明">访问方式说明</h3><table><thead><tr><th>访问方式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头，这是默认模式。如果文件不存 在，抛出异常</td></tr><tr><td>w</td><td>以只写方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td>a</td><td>以追加方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不 存在，创建新文件进行写入</td></tr><tr><td>r+</td><td>以读写方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td></tr><tr><td>w+</td><td>以读写方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td>a+</td><td>以读写方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不 存在，创建新文件进行写入</td></tr></tbody></table><p>以bytes类型操作的读写，写读模式(这种方式是仅对非文本文件)</p><table><thead><tr><th>r+b</th><th>读写【可读，可写】</th></tr></thead><tbody><tr><td>w+b</td><td>写读【可写，可读】</td></tr><tr><td>a+b</td><td>写读【可写，可读】</td></tr></tbody></table><p>对于非文本文件，我们只能使用b模式，&quot;b&quot;表示以字节的方式操作（而所有文件也都是以字节的形式存 储的，使用这种模式无需考虑文本文件的字符编码、图片文件的jgp格式、视频文件的avi格式）</p><p>在函数中写的时候不需要加上+号，需要直接写  rb  wb  ab</p><h3 id="按行读取文件内容">按行读取文件内容</h3><ul class="lvl-0"><li class="lvl-2"><p>read方法默认会把文件的所有内容一次性读取到内存</p></li><li class="lvl-2"><p>readline方法可以一次读取一行内容；</p></li><li class="lvl-2"><p>方法执行后，文件指针移动到下一行，准备再次读取；</p></li></ul><h3 id="with结构">with结构</h3><p>with结构的好处是不需要进行再次手动去关闭文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README.txt&quot;</span>) <span class="hljs-keyword">as</span> file1:<span class="hljs-comment">#with结构这样使用，获取的文件对象就是file1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>text1 = file1.readline().strip()<br><span class="hljs-keyword">if</span> text1:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是第%s行内容&quot;</span> % i)<br>i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(text1)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">break</span><br>            <br><span class="hljs-comment">#将一个文件的内容放到另外一个文件内</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> read_f,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> write_f:<br>data=read_f.read()<br>write_f.write(data)<br></code></pre></td></tr></table></figure><h3 id="文件编码">文件编码</h3><p>f=open(…)是由操作系统打开文件，那么如果我们没有为open指定编码，那么打开文件的默认编码很明 显是操作系统说了算了，操作系统会用自己的默认编码去打开文件，在windows下是gbk，在linux下是 utf-8。</p><p>通过这个方式可以将文件强制使用某种编码方式去读取，而非使用操作系统本身默认的编码方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="文件的操作方法">文件的操作方法</h2><h3 id="常用操作方式">常用操作方式</h3><p>read（3）：</p><ol><li class="lvl-3"><p>文件打开方式为文本模式时，代表读取3个字符</p></li><li class="lvl-3"><p>文件打开方式为b模式时，代表读取3个字节</p></li></ol><p>文本文件所有的操作方式整理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>关闭文件<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fileno</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>文件描述符<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flush</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>刷新文件内部缓冲区<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isatty</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>判断文件是否是同意tty设备<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>读取指定字节数据<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readable</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>是否可读<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readline</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>仅读取一行数据<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">seek</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>指定文件中指针位置<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">seekable</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>指针是否可操作<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tell</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>获取指针位置<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">truncate</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>截断数据，仅保留指定之前数据<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writable</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>是否可写<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br>写内容<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__getstate__</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-meta">@staticmethod </span><span class="hljs-comment"># known case of __new__</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">*args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br><span class="hljs-string">&quot;&quot;&quot; Create and return a new object. See help(type) for accurate</span><br><span class="hljs-string">signature. &quot;&quot;&quot;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br><span class="hljs-string">&quot;&quot;&quot; Implement next(self). &quot;&quot;&quot;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self, *args, **kwargs</span>): <span class="hljs-comment"># real signature unknown</span><br><span class="hljs-string">&quot;&quot;&quot; Return repr(self). &quot;&quot;&quot;</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="案例一、文件的修改">案例一、文件的修改</h2><p>文件的数据是存放于硬盘上的，因而只存在覆盖、不存在修改这么一说，我们平时看到的修改文件，都 是模拟出来的效果，具体的说有两种实现方式：</p><p>方式一：将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存 覆盖到硬盘（word，vim，nodpad++等编辑器）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-comment">#与操作系统的指令相连接</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>) <span class="hljs-keyword">as</span> read_f,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt.new&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> write_f:<br>data = read_f.read()<br>data = data.replace(<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-string">&#x27;nihao&#x27;</span>)<br><br>write_f.write(data)<br>os.remove(<span class="hljs-string">&#x27;a.txt&#x27;</span>)<span class="hljs-comment">#让操作系统删除a.txt文件</span><br>os.rename(<span class="hljs-string">&#x27;a.txt.new&#x27;</span>,<span class="hljs-string">&#x27;a.txt&#x27;</span>)<span class="hljs-comment">#让操作系统重命名a.txt.new为a.txt</span><br></code></pre></td></tr></table></figure><p>方式二：将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>) <span class="hljs-keyword">as</span> read_f,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt.new&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> write_f:<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> read_f:<br>line = line.replace(<span class="hljs-string">&#x27;nihao&#x27;</span>,<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>write_f.write(line)<br><br>os.remove(<span class="hljs-string">&#x27;a.txt&#x27;</span>)<br>os.rename(<span class="hljs-string">&#x27;a.txt.new&#x27;</span>,<span class="hljs-string">&#x27;a.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="案列二、完成文件的复制">案列二、完成文件的复制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README&quot;</span>)<span class="hljs-comment">#打开文件</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>text = file.readline()<br><span class="hljs-built_in">print</span>(text)<span class="hljs-comment">#直接对读取到的这一行进行打印</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> text:<span class="hljs-comment">#如果发现文件读取到已经读取不到文件时退出</span><br><span class="hljs-keyword">break</span><br>file.close()<br><span class="hljs-comment"># --------------------------------------------------------------------------</span><br>-----------<br><span class="hljs-comment"># 小文件复制</span><br>file1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<span class="hljs-comment">#以阅读的方式打开需要复制的文件</span><br>file2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README[复件]&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<span class="hljs-comment">#以写入的方式打开要被复制到的文件</span><br><br>text = file1.read()<span class="hljs-comment">#将文件1内的内容一次性宣布读取出来</span><br>file2.write(text)<span class="hljs-comment">#将文件1内读取的内容一次性全部写入文件2</span><br><br>file1.close()<span class="hljs-comment">#将文件1与文件2全部关闭</span><br>file2.close()<br><br><span class="hljs-comment"># --------------------------------------------------------------------------</span><br>-----------<br><span class="hljs-comment"># 大文件复制</span><br><span class="hljs-comment">#由于文件太大，如果像上一个方法一样将文字全部吃入内存，会对内存造成较大的负担</span><br>file3 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>file4 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;README[大文件复制]&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<span class="hljs-comment">#通过循环的建立</span><br>text = file3.readline()<span class="hljs-comment">#将一行读取出来</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> text:<span class="hljs-comment">#如果这一行读取不到东西了，接直接退出</span><br><span class="hljs-keyword">break</span><br>file4.write(text)<span class="hljs-comment">#否则将读到的东西写入文件</span><br><br>file3.close()<br>file4.close()<br></code></pre></td></tr></table></figure><h2 id="案例三、计算总价">案例三、计算总价</h2><p>文件a.txt内容：每一行内容分别为商品名字，价钱，个数。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">apple</span> <span class="hljs-number">10</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">tesla</span> <span class="hljs-number">100000</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">mac</span> <span class="hljs-number">3000</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">lenovo</span> <span class="hljs-number">30000</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">chicken</span> <span class="hljs-number">10</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>通过代码，将其构建成这种数据类型：[{‘name’:‘apple’,‘price’:10,‘amount’:3}, {‘name’:‘tesla’,‘price’:1000000,‘amount’:1}…] 并计算出总价钱。</p><p>自己的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;price.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        text = file.readline().strip()<span class="hljs-comment">#将从文件中读取的行去掉空的字符</span><br>        <span class="hljs-keyword">if</span> text:<br>            ret = text.split(<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">#通过分割函数，将这个一行分割成几个不同的元素存放在列表中</span><br>            information = &#123;<span class="hljs-string">&quot;name&quot;</span>: ret[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;price&quot;</span>: ret[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;amount&quot;</span>: ret[<span class="hljs-number">2</span>]&#125;<span class="hljs-comment">#通过索引将这些信息制作成字典，放进information</span><br>            unit_price = <span class="hljs-built_in">int</span>(information[<span class="hljs-string">&quot;price&quot;</span>]) * <span class="hljs-built_in">int</span>(information[<span class="hljs-string">&quot;amount&quot;</span>])<span class="hljs-comment">#计算一个商品的总价格</span><br>            <span class="hljs-built_in">print</span>(unit_price)<br>            num = num + unit_price<span class="hljs-comment">#借助循环将所有的价格相加</span><br>            <span class="hljs-built_in">list</span> = []<span class="hljs-comment">#为满足题目要求强行制作列表</span><br>            <span class="hljs-built_in">list</span>.append(information)将每次循环产生的新信息放入列表<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(num)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="案例四、注册登录">案例四、注册登录</h2><p>将之前写的注册登录完善，采用文件进行记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    information = &#123;&#125;<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;station.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:  <span class="hljs-comment"># 打开外部存放数据的文件</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            text = file.readline().strip()<br>            <span class="hljs-keyword">if</span> text:  <span class="hljs-comment"># 将拿出来的东西进行切片</span><br>                ret = text.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>                <span class="hljs-comment"># print(ret)</span><br>                information[ret[<span class="hljs-number">0</span>]] = ret[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 存放在字典里面</span><br>                <span class="hljs-comment"># print (list)</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> information<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">dic</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        new_account = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入新的账号： &quot;</span>)<br>        new_password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入新的密码： &quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在检测账号密码是否符合系统要求&quot;</span>)<br>        <span class="hljs-comment"># 首先验证其大小，采用与一个八位的字符串进行大小比较</span><br>        <span class="hljs-comment"># 其次对于其重要包含字母和数字的比较方法可以采用集合的交集，如果分别与字母集合和数字集合比较都出现交集，则满足条件</span><br>        <span class="hljs-comment"># 这个函数可以直接判断是否全部为数字或者全部为字母</span><br>        <span class="hljs-keyword">if</span> new_password &lt; <span class="hljs-string">&quot;12345678&quot;</span> <span class="hljs-keyword">or</span> new_password.isalpha() == <span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> new_password.isdigit() == <span class="hljs-literal">True</span>:<br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密码不符合要求，不能是纯数字或纯字母，重新输入密码&quot;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 将相应的符合要求的账号密码存入字典</span><br>            dic[new_account] = new_password<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;station.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>                amazing = <span class="hljs-string">&quot;\n%s:%s&quot;</span> % (new_account, new_password)<br>                file.write(amazing)<br>            <span class="hljs-comment"># information_station.setdefault(new_account, new_password)我觉得孙茂哥的表达方式更为贴近于英文，表达性更强</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号符合要求，注册成功&quot;</span>)  <span class="hljs-comment"># 鉴于Python边编译边运行的特性，写入成功后再进行打印，防止写入报错</span><br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">visit</span>(<span class="hljs-params">dic</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        account = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入您的账号： &quot;</span>)<br>        password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入您的密码： &quot;</span>)<br>        <span class="hljs-keyword">if</span> account <span class="hljs-keyword">in</span> dic:  <span class="hljs-comment"># 首先有个判断语句说明if account in information_station可以解决报错问题</span><br>            <span class="hljs-keyword">if</span> password == dic[account]:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;欢迎进入系统&quot;</span>)<br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                    Grade = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的成绩\n&quot;</span>)  <span class="hljs-comment"># 如果输入的不是数，会发生报错，该如何解决这个问题？</span><br>                    <span class="hljs-comment"># 可以通过先判断是不是输入了数字，是数字再强行转换，不是数字直接提示输入错误</span><br>                    <span class="hljs-keyword">if</span> Grade.isalpha() == <span class="hljs-literal">True</span>:<br>                        Grade = <span class="hljs-built_in">int</span>(Grade)<br>                        <span class="hljs-keyword">if</span> Grade &lt; <span class="hljs-number">60</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你的成绩不及格&quot;</span>)<br>                        <span class="hljs-keyword">elif</span> Grade &gt;= <span class="hljs-number">60</span> <span class="hljs-keyword">and</span> Grade &lt; <span class="hljs-number">70</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一般般勉强及格&quot;</span>)<br>                        <span class="hljs-keyword">elif</span> Grade &gt;= <span class="hljs-number">70</span> <span class="hljs-keyword">and</span> Grade &lt; <span class="hljs-number">80</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;良好&quot;</span>)<br>                        <span class="hljs-keyword">elif</span> Grade &gt;= <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> Grade &lt; <span class="hljs-number">90</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不错&quot;</span>)<br>                        <span class="hljs-keyword">elif</span> Grade &gt;= <span class="hljs-number">90</span> <span class="hljs-keyword">and</span> Grade &lt;= <span class="hljs-number">100</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;很优秀&quot;</span>)<br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你输入的不是正确的分数&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;账号或密码错误，请确认后重新输入&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有此账号，请重新输入&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">manage</span>(<span class="hljs-params">a, dic=&#123;&#125;</span>):<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        log(dic)<br>    <span class="hljs-keyword">elif</span> a == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        visit(dic)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入正确的选项数字,程序结束&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    dic = read()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        command = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入1进行注册        输入2进行登录        输入3退出系统\n&quot;</span>)<br>        manage(command, dic)<br><br><br><span class="hljs-comment"># --------------------------------------------------主函数---------------------------------------------------------------</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的基础知识</title>
    <link href="/20220905/Python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/20220905/Python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1>Python的注释</h1><p>Python的注释分为两种，分别为单行注释和多行注释</p><p>单行注释：#被注释的内容</p><p>多行注释：‘’‘被注释内容’‘’   “”“被注释内容”“”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">单行注释：<span class="hljs-comment">#被注释的内容</span><br><br>多行注释：<span class="hljs-string">&#x27;&#x27;&#x27;被注释内容&#x27;&#x27;&#x27;</span>   <span class="hljs-string">&quot;&quot;&quot;被注释内容&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1>Python的基础数据类型</h1><p>Python与C语言不同</p><p>其数据类型主要有int float str complex（主要类型）</p><h2 id="查看一个变量的类型方式">查看一个变量的类型方式</h2><p>使用type(a)函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">2</span>**<span class="hljs-number">64</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a)) <span class="hljs-comment">#type()是查看数据类型的方法</span><br>b = <span class="hljs-number">2</span>**<span class="hljs-number">60</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="布尔值（True，False）">布尔值（True，False）</h2><p>布尔值也叫做布尔类型，总共有两个值，一个为True（真），一个为False（假），一般被用于逻辑判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">3</span><br>b = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a &lt; b, a &gt; b , a != b)<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-literal">True</span> <span class="hljs-literal">False</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="字符串">字符串</h2><p>字符串是在Python中运用最为广泛的数据类型，所有的从键盘读入的数据，默认都是字符串类型，如果需要进行类型的变化，需要使用相关函数强行进行转换，但此时需要注意，如果输入的字符无法被转换，程序会报错。</p><h3 id="字符串拼接">字符串拼接</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;eagle &#x27;</span><br>b = <span class="hljs-string">&#x27;welcome &#x27;</span><br><span class="hljs-built_in">print</span>(b + a,<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">3</span>,a * <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>将两个字符串进行相加，实际这个操作的名称为字符串的拼接</p><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">welcome eagle *** eagle eagle eagle<br></code></pre></td></tr></table></figure><h3 id="字符串的索引与切片">字符串的索引与切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;ABCDEFGHIJK&#x27;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>], a[-<span class="hljs-number">11</span>])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">7</span>])<br>a = <span class="hljs-string">&#x27;ABCDEFGHIJK&#x27;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:]) <span class="hljs-comment">#默认到最后</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) <span class="hljs-comment"># -1 是列表中最后一个元素的索引，但是要满足顾头不顾腚的原则，所以取不到K</span><br>元素<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>]) <span class="hljs-comment">#加步长</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>:-<span class="hljs-number">2</span>]) <span class="hljs-comment">#反向加步长</span><br></code></pre></td></tr></table></figure><p>在一个字符串中，Python会对字符串自动进行索引，从正序来看，编号为0<sub>9；从逆序来看，编号为-1</sub>10</p><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">A<br>D<br>F<br>H<br>ABC<br>CDE<br>ABCDEFGHIJK<br>ABCDEFGHIJ<br>ACE<br>FDB<br></code></pre></td></tr></table></figure><h3 id="字符串常用方法">字符串常用方法</h3><h4 id="字母大小写的转换">字母大小写的转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">words = <span class="hljs-string">&quot;beautiful is better than ugly.&quot;</span><br><span class="hljs-built_in">print</span>(words.capitalize()) <span class="hljs-comment">#首字母大写</span><br><span class="hljs-built_in">print</span>(words.swapcase()) <span class="hljs-comment">#大小写翻转</span><br><span class="hljs-built_in">print</span>(words.title()) <span class="hljs-comment">#每个单词的首字母大写</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string">Beautiful is better than ugly.</span><br><span class="hljs-string">BEAUTIFUL IS BETTER THAN UGLY.</span><br><span class="hljs-string">Beautiful Is Better Than Ugly.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="将符号填充到字符两侧">将符号填充到字符两侧</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 内容居中，总长度，空白处填充</span><br>a = <span class="hljs-string">&quot;test&quot;</span><br>ret = a.center(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;*&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string"></span><br><span class="hljs-string">********test********</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="统计字符串中某个元素出现的个数">统计字符串中某个元素出现的个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计字符串中的元素出现的个数</span><br>ret = words.count(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string">3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-comment"># startswith 判断是否以...开头</span><br><span class="hljs-comment"># endswith 判断是否以...结尾</span><br>a = <span class="hljs-string">&quot;aisdjioadoiqwd12313assdj&quot;</span><br><span class="hljs-built_in">print</span>(a.startswith(<span class="hljs-string">&quot;a&quot;</span>))<br><span class="hljs-built_in">print</span>(a.endswith(<span class="hljs-string">&quot;j&quot;</span>))<br><span class="hljs-built_in">print</span>(a.startswith(<span class="hljs-string">&#x27;sdj&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(a.endswith(<span class="hljs-string">&#x27;ado&#x27;</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string"></span><br><span class="hljs-string">True</span><br><span class="hljs-string">True</span><br><span class="hljs-string">True</span><br><span class="hljs-string">True</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-comment"># 寻找字符串中的元素是否存在</span><br><span class="hljs-built_in">print</span>(a.find(<span class="hljs-string">&#x27;sdj&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)) <span class="hljs-comment"># 返回的找到的元素的索引，如果找不到返回-1</span><br><span class="hljs-built_in">print</span>(a.index(<span class="hljs-string">&#x27;sdj&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)) <span class="hljs-comment"># 返回的找到的元素的索引，找不到报错。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string"></span><br><span class="hljs-string">2</span><br><span class="hljs-string">2</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># split 以什么分割，最终形成一个列表此列表不含有这个分割的元素。</span><br>ret = words.split(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(ret)<br>运行结果：<br>[<span class="hljs-string">&#x27;beautiful&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;better&#x27;</span>, <span class="hljs-string">&#x27;than&#x27;</span>, <span class="hljs-string">&#x27;ugly.&#x27;</span>]<br><br>ret = words.rsplit(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 加数字指定分割次数</span><br><span class="hljs-comment">#注意！这边由于指定分割次数小于原本的空格数，所以如直接切割，则从左侧切割两次，在函数前加上r，代表从右侧切割，则切割了右侧的两个空格</span><br><span class="hljs-built_in">print</span>(ret)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string">[&#x27;beautiful is better&#x27;, &#x27;than&#x27;, &#x27;ugly.&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># format的三种玩法 格式化输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;teacher&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;1&#125; &#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;aaron&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;teacher&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;name&#125; &#123;age&#125; &#123;job&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(job=<span class="hljs-string">&#x27;teacher&#x27;</span>,name=<span class="hljs-string">&#x27;aaron&#x27;</span>,age=<span class="hljs-number">18</span>))<br><br><span class="hljs-comment"># strip，此函数可以在字符串中删除某个字符</span><br><span class="hljs-comment"># 如果直接使用strip函数，则会删除字符串中所有的这个字符</span><br><span class="hljs-comment"># 加入r或者l可以说明删除左侧或者右侧的</span><br>a = <span class="hljs-string">&#x27;****asdasdasd********&#x27;</span><br><span class="hljs-built_in">print</span>(a.strip(<span class="hljs-string">&#x27;*&#x27;</span>))<br><span class="hljs-built_in">print</span>(a.lstrip(<span class="hljs-string">&#x27;*&#x27;</span>))<br><span class="hljs-built_in">print</span>(a.rstrip(<span class="hljs-string">&#x27;*&#x27;</span>))<br>运行结果<br>asdasdasd<br>asdasdasd********<br>****asdasdasd<br><br><span class="hljs-comment"># replace  替换函数</span><br><span class="hljs-built_in">print</span>(words.replace(<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment"># 字符串从左向右开始，把e替换成a，一共替换两次</span><br><br><span class="hljs-comment">#一下函数为验证字符串内是有什么组成的，如果是，则返回True，如不是，则返回False</span><br><span class="hljs-built_in">print</span>(words.isalnum()) <span class="hljs-comment">#验证字符串由字母或数字组成</span><br><span class="hljs-built_in">print</span>(words.isalpha()) <span class="hljs-comment">#验证字符串只由字母组成</span><br><span class="hljs-built_in">print</span>(words.isdigit()) <span class="hljs-comment">#验证字符串只由数字组成</span><br></code></pre></td></tr></table></figure><h1>基本运算符</h1><h2 id="基本运算符">基本运算符</h2><p><img src="image-20220702205111583.png" alt="基本运算符"></p><h2 id="比较运算">比较运算</h2><p><img src="image-20220702205143801.png" alt="比较运算"></p><h2 id="赋值运算">赋值运算</h2><p><img src="image-20220702205222875.png" alt="赋值运算"></p><h2 id="逻辑运算">逻辑运算</h2><p><img src="image-20220702205250638.png" alt="逻辑运算符"></p><p>在没有 () 的情况下 not 优先级高于 and，and 优先级高于 or，即优先级关系为()&gt;not&gt;and&gt;or，同一 优先级从左往右计算。</p><p>x or y , x 为真，值就是 x，x 为假，值是 y； x and y, x 为真，值是 y,x 为假，值是 x。</p><h2 id="成员运算">成员运算</h2><p><img src="image-20220702205832489.png" alt="成员之间的运算"></p><h2 id="Python运算的优先级">Python运算的优先级</h2><p><img src="image-20220702205907659.png" alt="运算符号优先级"></p><h1>Python的数据类型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  总结</span><br><span class="hljs-comment"># 似乎Python使用括号作为标识符将不同的数据类型全部区分开来了</span><br><span class="hljs-comment"># 对于元祖，使用了圆括号，其内部元素不可发生变化</span><br><span class="hljs-comment"># 对于列表，使用了方括号，其内部元素可以发生变化</span><br><span class="hljs-comment"># 对于字典，使用花括号，其种的元素使用冒号进行一一对应反应出一种映射的关系</span><br><span class="hljs-comment"># 对于集合，使用花括号，其中的元素直接存储，方式与列表相似，但其中的元素不可变更，但其身可以变更</span><br></code></pre></td></tr></table></figure><h2 id="数据类型的总结">数据类型的总结</h2><p>元祖为圆括号表示；列表为方括号表示；字典为大括号表示，但要求{键：值}一一对应；集合为一种特殊类型，将列表使用set进行强制转换，表示时使用花括号直接与列表方式类似</p><table><thead><tr><th></th><th>书写方式</th><th>可不可变</th><th>顺序</th></tr></thead><tbody><tr><td>列表</td><td>方括号[]</td><td>可变</td><td>有</td></tr><tr><td>元组</td><td>圆括号()</td><td>可变</td><td>有</td></tr><tr><td>字典</td><td>花括号{键:值}</td><td>可变</td><td>有</td></tr><tr><td>集合</td><td>花括号{}</td><td>可变</td><td>没有</td></tr></tbody></table><h2 id="元组tuple（其中的元素内容不可被更改）">元组tuple（其中的元素内容不可被更改）</h2><p>元组被称为只读列表，即数据可以被查询，但不能被修改。</p><p>元组与列表的区别：元祖与链表的区别所在：即元祖采用的是圆括号将其中的数据类型包含住，但是其中已经定义的数据类型是不可改动的，而列表其中的数据类型是可以被改动的。</p><p>tuple其实不可变的是地址空间，如果地址空间里存的是可变的数据类型的话，比如列表就是可变的</p><p>参考博客 <a href="https://blog.csdn.net/machi1/article/details/86601119">https://blog.csdn.net/machi1/article/details/86601119</a></p><p>总结一下，即为元组内部的元素不能被改变，但是如果在元组里面有一个列表，那么列表内的元素是可以被修改的。</p><h2 id="列表-list">列表 list</h2><p>列表相比于字符串，不仅可以储存不同的数据类型，而且可以储存大量数据，32 位 python 的限制是 536870912 个元素,64 位 python 的限制是 1152921504606846975 个元素。而且<strong>列表是有序的，有索引值，可切片</strong>，方便取值。</p><h3 id="列表的增加元素">列表的增加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">4</span>]<br><br>li.insert(<span class="hljs-number">0</span>,<span class="hljs-number">22</span>) <span class="hljs-comment"># 按照索引去增加，对0号元素进行赋值</span><br><span class="hljs-built_in">print</span>(li)<br><br>li.append(<span class="hljs-string">&#x27;ddd&#x27;</span>) <span class="hljs-comment"># 增加到最后在所有的元素最后，在加上一个元素</span><br><span class="hljs-built_in">print</span>(li)<br><br>li.extend([<span class="hljs-string">&#x27;q,a,w&#x27;</span>]) <span class="hljs-comment"># 迭代的去增，增加一个字符串</span><br><span class="hljs-built_in">print</span>(li)<br><br>li.extend([<span class="hljs-string">&#x27;q,a,w&#x27;</span>,<span class="hljs-string">&#x27;das&#x27;</span>]) <span class="hljs-comment"># 迭代的去增，增加两个字符串</span><br><span class="hljs-built_in">print</span>(li)<br><span class="hljs-comment">#append与extand最大的区别就在于，append会将内部的所有的东西全部放进去，一整个的</span><br><span class="hljs-comment">#而extand是将其中的分为一个个字符串，放进去的是字符串</span><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">22</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>]<br>[<span class="hljs-number">22</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ddd&#x27;</span>]<br>[<span class="hljs-number">22</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ddd&#x27;</span>, <span class="hljs-string">&#x27;q,a,w&#x27;</span>]<br>[<span class="hljs-number">22</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ddd&#x27;</span>, <span class="hljs-string">&#x27;q,a,w&#x27;</span>, <span class="hljs-string">&#x27;q,a,w&#x27;</span>, <span class="hljs-string">&#x27;das&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="删除操作">删除操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;f&#x27;</span>]<br>a = li.pop(<span class="hljs-number">1</span>) <span class="hljs-comment"># 按照位置去删除，有返回值</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">del</span> li[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] <span class="hljs-comment"># 按照位置去删除，也可切片删除没有返回值（这里指删除1~2个元素，顾头不顾尾）</span><br><span class="hljs-built_in">print</span>(li)<br>li.remove(<span class="hljs-string">&#x27;f&#x27;</span>)<span class="hljs-comment">#删掉字符串&quot;f&quot;</span><br><span class="hljs-built_in">print</span>(li)<br>li.clear()<span class="hljs-comment">#清除所有的内容</span><br><span class="hljs-built_in">print</span>(li)<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>[]<br></code></pre></td></tr></table></figure><h3 id="改动操作">改动操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;f&#x27;</span>]<br>li[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;aaa&#x27;</span><span class="hljs-comment">#将第二个元素改为...</span><br><span class="hljs-built_in">print</span>(li)<br>li[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>] = [<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;e&#x27;</span>]<span class="hljs-comment">#将2~3个元素改为...</span><br><span class="hljs-built_in">print</span> (li)<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="查找操作">查找操作</h3><p>使用切片去查，或者循环去查</p><h3 id="其他操作">其他操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span> (li.count(<span class="hljs-number">4</span>)) <span class="hljs-comment"># 统计某个元素在列表中出现的次数</span><br><span class="hljs-built_in">print</span> (li.index(<span class="hljs-number">2</span>)) <span class="hljs-comment"># 用于从列表中找出某个值第一个匹配项的索引位置</span><br>li.sort() <span class="hljs-comment"># 用于在原位置对列表进行排序</span><br><span class="hljs-built_in">print</span> (li)<br>li.reverse() <span class="hljs-comment"># 将列表中的元素反向存放</span><br><span class="hljs-built_in">print</span> (li)<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">3</span><br><span class="hljs-number">1</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>[<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h1>字典 dict</h1><p>字典是python中唯一的映射类型，采用键值对（key-value）的形式存储数据。可哈希表示key必须是不可变类型，如：数字、字符串、元组。</p><p>在python3.6以后字典就是有顺序的了</p><p>参考博客 <a href="https://www.cnblogs.com/xieqiankun/p/python_dict.html">https://www.cnblogs.com/xieqiankun/p/python_dict.html</a></p><h3 id="增加操作">增加操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;aaron&quot;</span>&#125;<br>dic[<span class="hljs-string">&#x27;li&#x27;</span>] = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<span class="hljs-comment">#在字典中增加一个映射的关系</span><br><span class="hljs-built_in">print</span>(dic)<br>dic.setdefault(<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>)<br><span class="hljs-comment"># 在字典中添加键值对时，如果指定的键已经存在则不做任何操作,如果原字典中不存在指定的键值对，</span><br>则会添加。<br><span class="hljs-built_in">print</span>(dic)<br>dic.setdefault(<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;v1&#x27;</span>)<span class="hljs-comment">#k已经存在，所以不做任何操作</span><br><span class="hljs-built_in">print</span>(dic)<br><br><br><span class="hljs-comment">#运行结果</span><br>&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;aaron&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]&#125;<br>&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;aaron&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;k&#x27;</span>: <span class="hljs-string">&#x27;v&#x27;</span>&#125;<br>&#123;<span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;aaron&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;k&#x27;</span>: <span class="hljs-string">&#x27;v&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除操作-2">删除操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;aaron&quot;</span>&#125;<br>dic_pop = dic.pop(<span class="hljs-string">&#x27;age&#x27;</span>)<br><span class="hljs-comment"># pop根据key删除键值对，并返回对应的值，如果没有key则返回默认返回值</span><br><span class="hljs-built_in">print</span>(dic_pop)<br>dic_pop = dic.pop(<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;查无此项&#x27;</span>)<br><span class="hljs-built_in">print</span>(dic_pop)<br>dic[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(dic)<br><span class="hljs-keyword">del</span> dic[<span class="hljs-string">&#x27;name&#x27;</span>]<br><span class="hljs-built_in">print</span>(dic)<br>dic[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;demo&#x27;</span><br>dic_pop = dic.popitem()<br><span class="hljs-comment"># 删除字典中的某个键值对，将删除的键值对以元祖的形式返回，由于3.6之前的版本字典是无序的，所以会随机删除，现在字典是有序的，会固定删除最后一个</span><br><span class="hljs-built_in">print</span>(dic_pop)<br>dic_clear = dic.clear()<br><span class="hljs-comment"># 清空字典</span><br><span class="hljs-built_in">print</span>(dic,dic_clear)<br></code></pre></td></tr></table></figure><h3 id="更改操作">更改操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;aaron&quot;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;male&#x27;</span>&#125;<br>dic2 = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">30</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&#x27;demo&#x27;</span>&#125;<br><br>dic2.update(dic)<br><span class="hljs-comment"># 将dic所有的键值对覆盖添加（相同的覆盖，没有的添加）到dic2中</span><br><span class="hljs-comment">#整个字典的集体性赋值</span><br><br><span class="hljs-built_in">print</span>(dic2)<br><br>dic2[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">30</span><span class="hljs-comment">#对单独一个字典进行赋值</span><br><span class="hljs-built_in">print</span>(dic2)<br></code></pre></td></tr></table></figure><h3 id="查找操作-2">查找操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;aaron&quot;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;male&#x27;</span>&#125;<br><br>value = dic[<span class="hljs-string">&#x27;name&#x27;</span>]<span class="hljs-comment">#查找函数</span><br><span class="hljs-comment"># 没有会报错</span><br><span class="hljs-built_in">print</span>(value)<br><br>value = dic.get(<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;查无此项&#x27;</span>)<br><span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><h3 id="其他操作-2">其他操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;aaron&quot;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;male&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic.items():<span class="hljs-comment">#for的循环语句</span><br><span class="hljs-comment"># 将键和值作为元祖列出</span><br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> dic.items():<br><span class="hljs-built_in">print</span>(key,value)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br><span class="hljs-comment"># 只是迭代键</span><br><span class="hljs-built_in">print</span>(i)<br>keys = dic.keys()<br><span class="hljs-built_in">print</span>(keys,<span class="hljs-built_in">type</span>(keys))<br>value = dic.values()<br><span class="hljs-built_in">print</span>(value,<span class="hljs-built_in">type</span>(value))<br></code></pre></td></tr></table></figure><h2 id="集合set">集合set</h2><p>集合是无序的，不重复，确定性的数据集合，它里面的元素是可哈希的(不可变类型)，但是集合本身是不可哈希（所以集合做不了字典的键）的。</p><p>以下是集合最重要的两点： 去重，把一个列表变成集合，就自动去重了。 关系测试，测试两组数据之前的交集、差集、并集等关系。</p><h3 id="创建集合">创建集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = <span class="hljs-built_in">set</span>(&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;barry&#x27;</span>&#125;)<br>set2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;barry&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(set1,set2)<br></code></pre></td></tr></table></figure><h3 id="集合的增">集合的增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;def&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;asdas&#x27;</span>&#125;<br><span class="hljs-comment"># add()函数的参数只能接收可哈希数据类型，即不可变数据类型，</span><br>比如整型、浮点型、元组、字符串<br>set1.add(<span class="hljs-string">&#x27;qwer&#x27;</span>)<br><span class="hljs-built_in">print</span>(set1)<br><span class="hljs-comment"># 我们使用update()向集合中添加元素时，update接收的参数应该是可迭代的数据类型，比如字符</span><br>串、元组、列表、集合、字典。这些都可以向集合中添加元素，但是整型、浮点型不可以。<br>set1.update(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-comment">#update：迭代着增加</span><br><span class="hljs-built_in">print</span>(set1)<br>set1.update(<span class="hljs-string">&#x27;哈哈哈&#x27;</span>)<br><span class="hljs-built_in">print</span>(set1)<br>set1.update([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(set1)<br></code></pre></td></tr></table></figure><h3 id="集合的删">集合的删</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;def&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;asdas&#x27;</span>&#125;<br>set1.remove(<span class="hljs-string">&#x27;abc&#x27;</span>)<br><span class="hljs-built_in">print</span>(set1)<br>set1.pop()<br><span class="hljs-comment"># 随机删除一个数</span><br><span class="hljs-built_in">print</span>(set1)<br>set1.clear()<br><span class="hljs-comment"># 清空合集，其中的内容删除</span><br><span class="hljs-built_in">print</span>(set1)<br><span class="hljs-keyword">del</span> set1<br><span class="hljs-comment"># 删除合集，整个全部删除</span><br><span class="hljs-built_in">print</span>(set1)<br></code></pre></td></tr></table></figure><h3 id="集合的其他操作">集合的其他操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#交集（&amp; 或者 intersection）</span><br><span class="hljs-comment">#取出两个集合共有的元素</span><br>set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>set2 = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;<br><span class="hljs-built_in">print</span>(set1 &amp; set2)<br><span class="hljs-built_in">print</span>(set1.intersection(set2))<br><span class="hljs-comment"># 列出两个集合中共同拥有的项</span><br><br><br><span class="hljs-comment">#并集（| 或者 union）</span><br><span class="hljs-comment">#合并两个集合的所有元素</span><br>set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>set2 = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;<br><span class="hljs-built_in">print</span>(set1 | set2)<br><span class="hljs-built_in">print</span>(set2.union(set1))<br><span class="hljs-comment"># 列出两个集合中所有的项</span><br><br><br><span class="hljs-comment">#差集（- 或者 difference）</span><br><span class="hljs-comment">#类似于第一个集合减去两个集合共有的元素</span><br>set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>set2 = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;<br><span class="hljs-built_in">print</span>(set1 - set2)<br><span class="hljs-built_in">print</span>(set1.difference(set2))<br><span class="hljs-comment"># 在set1中删除set2中有的项</span><br><br><br><span class="hljs-comment">#反交集 （^ 或者 symmetric_difference）</span><br><span class="hljs-comment">#显示集合中不共存的项</span><br>set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>set2 = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;<br><span class="hljs-built_in">print</span>(set1 ^ set2)<br><span class="hljs-built_in">print</span>(set1.symmetric_difference(set2))<br><span class="hljs-comment"># 显示set1和set2不共存的项</span><br></code></pre></td></tr></table></figure><h3 id="子集与超集">子集与超集</h3><p>当一共集合的所有元素都在另一个集合里，则称这个集合是另一个集合的子集，另一个集合是这个集合的超集</p><p>是一个判断的函数，返回的是布尔值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br><span class="hljs-built_in">print</span>(set1 &lt; set2)<br><span class="hljs-built_in">print</span>(set1.issubset(set2)) <span class="hljs-comment"># 这两个相同，都是说明set1是set2子集。</span><br><span class="hljs-built_in">print</span>(set2 &gt; set1)<br><span class="hljs-built_in">print</span>(set2.issuperset(set1)) <span class="hljs-comment"># 这两个相同，都是说明set2是set1超集</span><br></code></pre></td></tr></table></figure><h3 id="frozenset不可变集合，让集合变成不可变类型">frozenset不可变集合，让集合变成不可变类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将一个集合变成不可改变的类型</span><br>set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>s = <span class="hljs-built_in">frozenset</span>(set1)<br><span class="hljs-built_in">print</span>(s,<span class="hljs-built_in">type</span>(s))<br>s.add(<span class="hljs-number">7</span>) <span class="hljs-comment"># 不可以修改,会报错</span><br></code></pre></td></tr></table></figure><h1>流程控制之 --if</h1><h2 id="f…else-…-可以有多个分支条件">f…else … 可以有多个分支条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>满足条件执行代码<br><span class="hljs-keyword">elif</span> 条件:<br>上面的条件不满足就走这个<br><span class="hljs-keyword">elif</span> 条件:<br>上面的条件不满足就走这个<br><span class="hljs-keyword">elif</span> 条件:<br>上面的条件不满足就走这个<br><span class="hljs-keyword">else</span>:<br>上面所有的条件不满足就走这段<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例3：if语句多个条件</span><br>num = <span class="hljs-number">9</span><br><span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num &lt;= <span class="hljs-number">10</span>: <span class="hljs-comment"># 判断值是否在0~10之间</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-comment"># 输出结果: hello</span><br>num = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> num &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num &gt; <span class="hljs-number">10</span>: <span class="hljs-comment"># 判断值是否在小于0或大于10</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;undefine&#x27;</span><br><span class="hljs-comment"># 输出结果: undefine</span><br>num = <span class="hljs-number">8</span><br><span class="hljs-comment"># 判断值是否在0~5或者10~15之间</span><br><span class="hljs-keyword">if</span> (num &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> num &lt;= <span class="hljs-number">5</span>) <span class="hljs-keyword">or</span> (num &gt;= <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> num &lt;= <span class="hljs-number">15</span>):<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;undefine&#x27;</span><br><span class="hljs-comment"># 输出结果: undefine</span><br></code></pre></td></tr></table></figure><h1>流程控制之 --while</h1><h2 id="基本循环">基本循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>循环体<br></code></pre></td></tr></table></figure><p>如果条件为真，那么循环体则执行</p><p>如果条件为假，那么循环体不执行</p><h1>循环中止语句</h1><h2 id="break">break</h2><p>用于完全结束一个循环，跳出循环体执行循环后面的语句</p><h2 id="continue">continue</h2><p>和 break 有点类似，区别在于 continue 只是终止本次循环，接着还执行后面的循环，break 则完全终止循环</p><h2 id="while-…-else-…">while … else …</h2><p>while 后面的 else 作用是指，当 while 循环正常执行完，中间没有被 break 中止的话，就会执行 else 后面的语句</p><h1>其他（for，enumerate，range）</h1><p>for循环：用户按照顺序循环可迭代对象的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br><span class="hljs-built_in">print</span>(i)<br>li = [<span class="hljs-string">&#x27;甲&#x27;</span>,<span class="hljs-string">&#x27;乙&#x27;</span>,<span class="hljs-string">&#x27;丙&#x27;</span>,<span class="hljs-string">&#x27;丁&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br><span class="hljs-built_in">print</span>(i)<br>dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dic.items():<br><span class="hljs-built_in">print</span>(k,v)<br></code></pre></td></tr></table></figure><p>enumerate：枚举，对于一个可迭代的（iterable）/可遍历的对象（如列表、字符串），enumerate将 其组成一个索引序列，利用它可以同时获得索引和值。</p><p>运行出来着的是已元祖的形式出现，key是其序列，values为值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">li = [<span class="hljs-string">&#x27;甲&#x27;</span>,<span class="hljs-string">&#x27;乙&#x27;</span>,<span class="hljs-string">&#x27;丙&#x27;</span>,<span class="hljs-string">&#x27;丁&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> li:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(li):<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">for</span> index,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(li):<br><span class="hljs-built_in">print</span>(index,value)<br><span class="hljs-keyword">for</span> index,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(li,<span class="hljs-number">100</span>): <span class="hljs-comment">#从哪个数字开始索引</span><br><span class="hljs-built_in">print</span>(index,value)<br></code></pre></td></tr></table></figure><p>range：指定范围，生成指定数字。</p><p>使用for循环进行数字的叠加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br><span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>): <span class="hljs-comment"># 步长，从前往后加，隔一个数加一个数</span><br><span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>): <span class="hljs-comment"># 反向步长，从后往前加</span><br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix监控系统</title>
    <link href="/20220905/Zabbix%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <url>/20220905/Zabbix%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1>Zabbix企业级监控方案</h1><h1>常见监控软件介绍</h1><h2 id="Cacti">Cacti</h2><ul class="lvl-0"><li class="lvl-2"><p>Cacti 是一套基于 PHP、MySQL、SNMP 及 RRD Tool 开发的监测图形分析工具，Cacti 是使用<strong>轮询</strong>的方式由主服务器向设备发送数据请求来获取设备上状态数据信息的,如果设备不断增多,这个<strong>轮询的过程就非常的耗时</strong>，轮询的结果就不能即时的反应设备的状态了。Cacti 监控关注的是对数据的<strong>展示</strong>，却不关注数据异常后的反馈。如果凌晨 3 点的时候设备的某个数据出现异常，除非监控人员在屏幕前发现这个异常变化，否则是没有任何报警机制能够让我们道出现了异常。</p></li></ul><h2 id="Nagios">Nagios</h2><ul class="lvl-0"><li class="lvl-2"><p>Nagios 是一款<strong>开源</strong>的免费网络监控报警服务,能有效监控 Windows、Linux 和 Unix 的主机状态， 交换机、路由器和防火墙等网络设置，打印机、网络投影、网络摄像等设备。在系统或服务状态异 常时发出邮件或短信报警第一时间通知运维人员，在状态恢复后发出正常的邮件或短信通知。 Nagios 有完善的插件功能,可以方便的根据应用服务扩展功能。</p></li><li class="lvl-2"><p>Nagios 已经可以支持由数万台服务器或上千台网络设备组成的云技术平台的监控,它可以充分发挥 自动化运维技术特点在设备和人力资源减少成本。只是 Nagios <strong>无法将多个相同应用集群</strong>的数据集 合起来,也不能监控到集群中特殊节点的迁移和恢复。</p></li></ul><h2 id="Ganglia">Ganglia</h2><ul class="lvl-0"><li class="lvl-2"><p>Ganglia 是 UC Berkeley 发起的一个开源集群监视项目,设计用于测量数以千计的节点。Ganglia 的 核心包含 gmond、gmetad 以及一个 Web 前端。</p></li><li class="lvl-2"><p>主要是用来监控系统性能,如:CPU 、内存、硬盘利用率, I/O 负载、网络流量情况等,通过曲线很容易 见到每个节点的工作状态,对合理调整、分配系统资源,提高系统整体 性能起到重要作用,目前是监控 HADOOP 的官方推荐服务。</p></li></ul><h2 id="Zabbix">Zabbix</h2><ul class="lvl-0"><li class="lvl-2"><p>Zabbix 是一个基于 <strong>WEB 界面</strong>的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。 zabbix 能监视各种网络参数,保证服务器系统的安全运营;并提供灵活的通知机制以让系统管理员快 速定位/解决存在的各种问题。</p></li><li class="lvl-2"><p>Zabbix 是由 Alexei Vladishev 创建，目前由 Zabbix SIA 在持续开发和支持。</p></li><li class="lvl-2"><p>Zabbix 是一个企业级的分布式开源监控方案。</p></li><li class="lvl-2"><p>Zabbix 是一款能够监控各种网络参数以及服务器健康性和完整性的软件。</p></li><li class="lvl-2"><p>Zabbix 使用灵活的通知机制，允许用户为几乎任何事件配置基于邮件的告警。这样可以快速反馈服务器的问题。基于已存储的数据，Zabbix提供了出色的报告和数据可视化功能。这些功能使得 Zabbix成为容量规划的理想方案。</p></li><li class="lvl-2"><p>Zabbix 支持主动轮询和被动捕获。</p></li><li class="lvl-2"><p>Zabbix所有的报告、统计信息和配置参数都可以通过基于Web的前端页面进行访问。基于Web的 前端页面可以确保您从任何方面评估您的网络状态和服务器的健康性。</p></li><li class="lvl-2"><p>Zabbix是免费的。Zabbix是根据GPL通用公共许可证第2版编写和发行的。这意味着它的源代码都 是免费发行的，可供公众任意使用, 商业支持由Zabbix公司提供。</p></li></ul><h2 id="监控区别">监控区别</h2><ul class="lvl-0"><li class="lvl-2"><p>nagios 图形不是特别好，也可以安装图形插件，但是也不怎么好看</p></li><li class="lvl-2"><p>nagios 一般情况下如果需要图形可以和 cacti 配合使用</p></li><li class="lvl-2"><p>cacti 的监控是轮询监控,效率低，图形相对 nagios 比较好看</p></li><li class="lvl-2"><p>zabbix 和 nagios 因为是并发监控，对 cpu 的要求更高</p></li><li class="lvl-2"><p>zabbix 在性能和功能上都强大很多</p></li><li class="lvl-2"><p>zabbix 的图形相当漂亮</p></li><li class="lvl-2"><p>支持多种监控方式 zabbix-agent snmp 等等</p></li><li class="lvl-2"><p>支持分布式监控,能监控的 agent 非常多</p></li><li class="lvl-2"><p>zabbix 有图形的 web 配置界面，配置简洁</p></li><li class="lvl-2"><p>zabbix 支持自动发现功能</p></li></ul><h1>Zabbix监控简介</h1><h2 id="zabbix优点">zabbix优点</h2><ul class="lvl-0"><li class="lvl-2"><p>开源,无软件成本投入</p></li><li class="lvl-2"><p>Server 对设备性能要求低</p></li><li class="lvl-2"><p>支持设备多,自带多种监控模板</p></li><li class="lvl-2"><p>支持分布式集中管理,有自动发现功能,可以实现自动化监控</p></li><li class="lvl-2"><p>开放式接口,扩展性强,插件编写容易</p></li><li class="lvl-2"><p>当监控的 item 比较多服务器队列比较大时可以采用主动状态,被监控客户端主动 从server 端去下载 需要监控的 item 然后取数据上传到 server 端。 这种方式对服务器的负载比较小。</p></li><li class="lvl-2"><p>Api 的支持,方便与其他系统结合</p></li></ul><h2 id="zabbix缺点">zabbix缺点</h2><p>需在<strong>被监控主机上安装 agent</strong>,所有数据都存在数据库里, 产生的数据很大,瓶颈主要在数据库。</p><p>项目批量修改不方便</p><p>社区虽然成熟，但是中文资料相对较少，服务支持有限;</p><p>入门容易，能实现基础的监控，但是深层次需求需要非常熟悉Zabbix并进行大量的二次定制开发难度较大</p><p>系统级别报警设置相对比较多，如果不筛选的话报警邮件会很多；并且自定义的项目报警需要自己设置，过程比较繁琐；</p><p>缺少数据汇总功能，如无法查看一组服务器平均值，需进行二次开发；</p><h2 id="zabbix组件结构">zabbix组件结构</h2><ul class="lvl-0"><li class="lvl-2"><p>Zabbix_Server：整个监控体系中<strong>最核心</strong>的组件，它负责接收客户端发送的报告信息，所有配置、 统计数据及操作数据都由它组织。</p></li><li class="lvl-2"><p>数据库存储：所有配置信息和Zabbix收集到的数据都被存储在数据库中。</p></li><li class="lvl-2"><p>Web界面：为了从任何地方和任何平台都可以轻松的访问Zabbix, 我们提供基于Web的Zabbix界 面。该界面是 Zabbix Server的一部分，通常跟Zabbix Server运行在同一台物理机器上（！如果使 用SQLite,Zabbix Web界面<strong>必须要跟Zabbix Server运行在同一台物理机器</strong>上。）</p></li><li class="lvl-2"><p>Zabbix_Proxy（<strong>可选</strong>）：用于监控节点非常多的分布式环境中，它可以代理zabbix-server的功 能，减轻zabbixserver的压力。</p></li><li class="lvl-2"><p>Zabbix_Agent：zabbix-agent为客户端软件，用于采集各监控项目的数据，并把采集的数据传输给 zabbixproxy或zabbix-server。</p></li></ul><h2 id="zabbix监控方式">zabbix监控方式</h2><ul class="lvl-0"><li class="lvl-2"><p>被动模式：</p><ul class="lvl-2"><li class="lvl-4">被动检测：相对于agent而言；agent, <strong>server向agent请求获取配置的各监控项相关的数据</strong>， agent接收请求、获取数据并响应给server；</li></ul></li><li class="lvl-2"><p>主动模式</p><ul class="lvl-2"><li class="lvl-4">主动检测：相对于agent而言；agent(active),agent向server请求与自己相关监控项配置，主 动地将server配置的监控项相关的数据发送给server；</li><li class="lvl-4">主动监控能极大节约监控server 的资源。</li></ul></li></ul><h2 id="Zabbix架构">Zabbix架构</h2><p><img src="image-20220814195405290.png" alt="架构拓扑图"></p><h2 id="Zabbix常用术语">Zabbix常用术语</h2><ul class="lvl-0"><li class="lvl-2"><p>主机：一台你想监控的网络设备，用IP或域名表示</p></li><li class="lvl-2"><p>主机组：主机的逻辑组；它包含主机和模板。一个主机组里的主机和模板之间并没有任何直接的关联。通常在给不同用户组的主机分配权限时候使用主机组。</p></li><li class="lvl-2"><p>监控项：你想要接收的主机的特定数据，一个度量数据。</p></li><li class="lvl-2"><p>触发器：一个被用于定义问题阈值和“评估”监控项接收到的数据的逻辑表达式当接收到的数据高于 阈值时，触发器从“OK”变成“Problem”状态。当接收到的数据低于阈值时，触发器保留/返回一个 “OK”的状态。</p></li></ul><h1>Zabbix部署</h1><h2 id="安装zabbix-服务端">安装zabbix 服务端</h2><p>参考网址：<a href="https://www.zabbix.com/cn/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql&amp;ws=apache">https://www.zabbix.com/cn/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql&amp;ws=apache</a></p><ul class="lvl-0"><li class="lvl-2"><p>准备yum源，安装服务的组件</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br>[root@server1 ~]<span class="hljs-comment"># yum install zabbix-server-mysql zabbix-web-mysql -y</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>关闭selinux、防火墙</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># setenforce 0</span><br>[root@server1 ~]<span class="hljs-comment"># systemctl stop firewalld</span><br></code></pre></td></tr></table></figure><h2 id="准备数据库">准备数据库</h2><ul class="lvl-0"><li class="lvl-2"><p>安装数据库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># yum install mariadb-server -y</span><br>[root@server1 ~]<span class="hljs-comment"># systemctl start mariadb</span><br>[root@server1 ~]<span class="hljs-comment"># systemctl enable mariadb</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>创建zabbix用户</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create database zabbix character set utf8 collate utf8_bin;<br>mysql&gt; create user zabbix@localhost identified by &#x27;000000&#x27;;<br>mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><h2 id="修改服务的配置">修改服务的配置</h2><ul class="lvl-0"><li class="lvl-2"><p>导入初始架构数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz |</span><br>mysql -uzabbix -D zabbix -p<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>为zabbix配置数据库</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># vim /etc/zabbix/zabbix_server.conf</span><br>DBPassword=000000<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>编辑前端php配置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># vim /etc/httpd/conf.d/zabbix.conf</span><br>php_value max_execution_time 300<br>php_value memory_limit 128M<br>php_value post_max_size 16M<br>php_value upload_max_filesize 2M<br>php_value max_input_time 300<br>php_value always_populate_raw_post_data ‐1<br>php_value date.timezone Asia/Shanghai<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>启动服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># systemctl restart zabbix-server httpd</span><br>[root@server1 ~]<span class="hljs-comment"># systemctl enable zabbix-server httpd</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>至此完成zabbix 服务端的部署，可以通过<a href="http://IP/zabbix%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8%E7%94%A8%E6%88%B7">http://IP/zabbix进行访问，初始化完成之后使用用户</a> Admin 密码zabbix</p></li></ul><p><img src="image-20220814195833505.png" alt="进行登录"></p><p><img src="image-20220814195844163.png" alt="修改语言"></p><p><img src="image-20220814195859440.png" alt="仪表盘展示"></p><h2 id="客户端配置">客户端配置</h2><ul class="lvl-0"><li class="lvl-2"><p>安装软件包</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br>[root@server2 ~]<span class="hljs-comment"># yum install zabbix-agent -y</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>关闭selinux、防火墙、启动服务</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># setenforce 0</span><br>[root@server1 ~]<span class="hljs-comment"># systemctl stop firewalld</span><br>[root@server1 ~]<span class="hljs-comment"># systemctl start zabbix-agent.service</span><br></code></pre></td></tr></table></figure><h1>快速使用</h1><h2 id="简单监控一个主机">简单监控一个主机</h2><ol><li class="lvl-3"><p>添加一个主机</p></li><li class="lvl-3"><p>添加模板</p></li><li class="lvl-3"><p>添加应用集</p></li><li class="lvl-3"><p>添加监控项</p></li><li class="lvl-3"><p>观察主机是否变绿色</p></li></ol><h2 id="自定义配置监控项">自定义配置监控项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server2 ~]<span class="hljs-comment"># cat /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf</span><br>UserParameter=nginx_process_num,ps -ef | grep -c nginx<br>[root@server2 ~]<span class="hljs-comment"># systemctl restart zabbix-agent.service</span><br><br><span class="hljs-comment"># 复杂的监控项</span><br>UserParameter=[*]_process_num,ps -ef | grep -c <span class="hljs-variable">$1</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>验证自定义监控项是否生效</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server1 ~]<span class="hljs-comment"># yum install zabbix-get.x86_64 -y</span><br>[root@server1 ~]<span class="hljs-comment"># zabbix_get -s 192.168.175.20 -k nginx_process_num</span><br>9<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>web端添加监控项，加入此键值</p></li></ul><p><img src="image-20220814200135718.png" alt="添加监控项"></p><ul class="lvl-0"><li class="lvl-2"><p>给主机添加触发器</p></li></ul><p><img src="image-20220814200154439.png" alt="添加触发器"></p><h2 id="redis相关的自定义监控项">redis相关的自定义监控项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/zabbix/etc/zabbix_agentd.conf.d/redis.conf<br>UserParameter=Redis.Status,/usr/local/redis/bin/redis-cli -h 127.0.0.1 -p6379 ping |grep -c PONG<br>UserParameter=Redis_conn[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;connected_clients&quot;</span> | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>UserParameter=Redis_rss_mem[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;used_memory_rss&quot;</span> | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>UserParameter=Redis_lua_mem[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;used_memory_lua&quot;</span> | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>UserParameter=Redis_cpu_sys[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;used_cpu_sys&quot;</span> | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>UserParameter=Redis_cpu_user[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;used_cpu_user&quot;</span> | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>UserParameter=Redis_cpu_sys_cline[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;used_cpu_sys_children&quot;</span> | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>UserParameter=Redis_cpu_user_cline[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;used_cpu_user_children&quot;</span> | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>UserParameter=Redis_keys_num[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep -w <span class="hljs-string">&quot;$<span class="hljs-variable">$1</span>&quot;</span> | grep -w <span class="hljs-string">&quot;keys&quot;</span> | grep db<span class="hljs-variable">$3</span> | awk -F<span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F<span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span><br>UserParameter=Redis_loading[*],/usr/local/redis/bin/redis-cli -h <span class="hljs-variable">$1</span> -p <span class="hljs-variable">$2</span> info | grep loading | awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $$2&#125;&#x27;</span><br><br><br>Redis.Status --检测Redis运行状态， 返回整数<br>Redis_conn --检测Redis成功连接数，返回整数<br>Redis_rss_mem --检测Redis系统分配内存，返回整数<br>Redis_lua_mem --检测Redis引擎消耗内存，返回整数<br>Redis_cpu_sys --检测Redis主程序核心CPU消耗率，返回整数<br>Redis_cpu_user --检测Redis主程序用户CPU消耗率，返回整数<br>Redis_cpu_sys_cline --检测Redis后台核心CPU消耗率，返回整数<br>Redis_cpu_user_cline --检测Redis后台用户CPU消耗率，返回整数<br>Redis_keys_num --检测库键值数，返回整数<br>Redis_loding --检测Redis持久化文件状态，返回整数<br></code></pre></td></tr></table></figure><h2 id="nginx相关的自定义监控项">nginx相关的自定义监控项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/nginx/conf.d/default.conf<br>    location /nginx-status<br>    &#123;<br>        stub_status on;<br>        access_log off;<br>        allow 127.0.0.1;<br>        deny all;<br>    &#125;<br>    <br>    <br>vim /usr/local/zabbix/etc/zabbix_agentd.conf.d/nginx.conf<br>UserParameter=Nginx.active,/usr/bin/curl -s <span class="hljs-string">&quot;http://127.0.0.1:80/nginx-status&quot;</span> | awk <span class="hljs-string">&#x27;/Active/ &#123;print $NF&#125;&#x27;</span><br>UserParameter=Nginx.<span class="hljs-built_in">read</span>,/usr/bin/curl -s <span class="hljs-string">&quot;http://127.0.0.1:80/nginx-status&quot;</span> | grep <span class="hljs-string">&#x27;Reading&#x27;</span> | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&quot; &quot;</span> -f2<br>UserParameter=Nginx.wrie,/usr/bin/curl -s <span class="hljs-string">&quot;http://127.0.0.1:80/nginx-status&quot;</span> | grep <span class="hljs-string">&#x27;Writing&#x27;</span> | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&quot; &quot;</span> -f4<br>UserParameter=Nginx.<span class="hljs-built_in">wait</span>,/usr/bin/curl -s <span class="hljs-string">&quot;http://127.0.0.1:80/nginx-status&quot;</span> | grep <span class="hljs-string">&#x27;Waiting&#x27;</span> | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&quot; &quot;</span> -f6<br>UserParameter=Nginx.accepted,/usr/bin/curl -s <span class="hljs-string">&quot;http://127.0.0.1:80/nginx-status&quot;</span> | awk <span class="hljs-string">&#x27;/^[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+/ &#123;print $1&#125;&#x27;</span><br>UserParameter=Nginx.handled,/usr/bin/curl -s <span class="hljs-string">&quot;http://127.0.0.1:80/nginx-status&quot;</span> | awk <span class="hljs-string">&#x27;/^[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+/ &#123;print $2&#125;&#x27;</span><br>UserParameter=Nginx.requests,/usr/bin/curl -s <span class="hljs-string">&quot;http://127.0.0.1:80/nginx-status&quot;</span> | awk <span class="hljs-string">&#x27;/^[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+/ &#123;print $3&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="TCP相关的自定义监控项">TCP相关的自定义监控项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/zabbix/share/zabbix/alertscripts/tcp_connection.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-keyword">function</span> ESTAB &#123;<br>    /usr/sbin/ss -ant |awk <span class="hljs-string">&#x27;&#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;&#x27;</span> | grep <span class="hljs-string">&#x27;ESTAB&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> TIMEWAIT &#123;<br>    /usr/sbin/ss -ant | awk <span class="hljs-string">&#x27;&#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;&#x27;</span> | grep <span class="hljs-string">&#x27;TIME-WAIT&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> LISTEN &#123;<br>/usr/sbin/ss -ant | awk <span class="hljs-string">&#x27;&#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;&#x27;</span> | grep <span class="hljs-string">&#x27;LISTEN&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>&#125;<br><span class="hljs-variable">$1</span><br><br>vim /usr/local/zabbix/etc/zabbix_agentd.conf.d/cattcp.conf<br>UserParameter=tcp[*],/usr/local/zabbix/share/zabbix/alertscripts/tcp_connection.sh <span class="hljs-variable">$1</span><br><br>tcp[TIMEWAIT] --检测TCP的驻留数，返回整数<br>tcp[ESTAB] --检测tcp的连接数、返回整数<br>tcp[LISTEN] --检测TCP的监听数，返回整数<br></code></pre></td></tr></table></figure><h2 id="系统监控的自带选项">系统监控的自带选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">agent.ping 检测客户端可达性、返回nothing表示不可达。1表示可达<br>system.cpu.load --检测cpu负载。返回浮点数<br>system.cpu.util -- 检测cpu使用率。返回浮点数<br>vfs.dev.read -- 检测硬盘读取数据，返回是sps.ops.bps浮点类型，需要定义1024倍<br>vfs.dev.write -- 检测硬盘写入数据。返回是sps.ops.bps浮点类型，需要定义1024倍<br>net.if.out[br0] --检测网卡流速、流出方向，时间间隔为60S<br>net-if-in[br0] --检测网卡流速，流入方向（单位：字节） 时间间隔60S<br>proc.num[] 目前系统中的进程总数，时间间隔60s<br>proc.num[,,run] 目前正在运行的进程总数，时间间隔60S<br><span class="hljs-comment">###处理器信息</span><br>通过zabbix_get 获取负载值<br>合理的控制用户态、系统态、IO等待时间剋保证进程高效率的运行<br>系统态运行时间较高说明进程进行系统调用的次数比较多，一般的程序如果系统态运行时间占用过高就需要优化程序，减少系统调用<br>io等待时间过高则表明硬盘的io性能差，如果是读写文件比较频繁、读写效率要求比较高，可以考虑更换硬盘，或者使用多磁盘做raid的方案<br>system.cpu.swtiches --cpu的进程上下文切换，单位sps，表示每秒采样次数，api中参数<span class="hljs-built_in">history</span>需指定为3<br>system.cpu.intr --cpu中断数量、api中参数<span class="hljs-built_in">history</span>需指定为3<br>system.cpu.load[percpu,avg1] --cpu每分钟的负载值，按照核数做平均值(Processorload (1 min average per core))，api中参数<span class="hljs-built_in">history</span>需指定为0<br>system.cpu.load[percpu,avg5] --cpu每5分钟的负载值，按照核数做平均值(Processorload (5 min average per core))，api中参数<span class="hljs-built_in">history</span>需指定为0<br>system.cpu.load[percpu,avg15] --cpu每5分钟的负载值，按照核数做平均值(Processorload (15 min average per core))，api中参数<span class="hljs-built_in">history</span>需指定为0<br></code></pre></td></tr></table></figure><h2 id="系统监控的自定义监控选项">系统监控的自定义监控选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###内存相关</span><br>vim /usr/local/zabbix/etc/zabbix_agentd.conf.d/catcarm.conf<br>UserParameter=ram.info[*],/bin/cat /proc/meminfo |awk <span class="hljs-string">&#x27;/^$1:&#123;print $2&#125;&#x27;</span><br>ram.info[Cached] --检测内存的缓存使用量、返回整数，需要定义1024倍<br>ram.info[MemFree] --检测内存的空余量，返回整数，需要定义1024倍<br>ram.info[Buffers] --检测内存的使用量，返回整数，需要定义1024倍<br><br><span class="hljs-comment">####TCP相关的自定义项</span><br>vim /usr/local/zabbix/share/zabbix/alertscripts/tcp_connection.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-keyword">function</span> ESTAB &#123;<br>/usr/sbin/ss -ant |awk <span class="hljs-string">&#x27;&#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;&#x27;</span> | grep <span class="hljs-string">&#x27;ESTAB&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>&#125;<br><span class="hljs-keyword">function</span> TIMEWAIT &#123;<br>/usr/sbin/ss -ant | awk <span class="hljs-string">&#x27;&#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;&#x27;</span> | grep <span class="hljs-string">&#x27;TIME-WAIT&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>&#125;<br><span class="hljs-keyword">function</span> LISTEN &#123;<br>/usr/sbin/ss -ant | awk <span class="hljs-string">&#x27;&#123;++s[$1]&#125; END &#123;for(k in s) print k,s[k]&#125;&#x27;</span> | grep <span class="hljs-string">&#x27;LISTEN&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>&#125;<br><span class="hljs-variable">$1</span><br><br>vim /usr/local/zabbix/etc/zabbix_agentd.conf.d/cattcp.conf<br>UserParameter=tcp[*],/usr/local/zabbix/share/zabbix/alertscripts/tcp_connection.sh <span class="hljs-variable">$1</span><br><br>tcp[TIMEWAIT] --检测TCP的驻留数，返回整数<br>tcp[ESTAB] --检测tcp的连接数、返回整数<br>tcp[LISTEN] --检测TCP的监听数，返回整数<br></code></pre></td></tr></table></figure><h1>zabbix实现邮件告警</h1><ol><li class="lvl-3"><p>配置Email：管理-》报警媒介类型-》Email-》修改对应Email参数</p></li><li class="lvl-3"><p>修改admin用户的报警媒介Email：管理-》用户-》Admin-》报警媒介-》添加接收报警邮件的邮箱-》 点击更新</p></li><li class="lvl-3"><p>添加触发器：配置-》主机-》已监控的主机-》触发器-》创建触发器-》填入报警名称-》点击表达式右 边的添加-》点击监控项右边的选择-》建议选择system uptime(系统启动时间)-》结果选等于0确认插 入-》更新</p></li><li class="lvl-3"><p>查看触发器状态：配置-》主机-》已监控主机里的触发器，找到新创建的触发器-》可以看到触发器对 应的值有问题和状态两种，可能需要等几分钟才会更新过来</p></li><li class="lvl-3"><p>配置发送异常报警邮件：配置-》动作-》点击启用Report problems to Zabbix administrators即可</p></li><li class="lvl-3"><p>邮箱收到报警邮件</p></li></ol><p><img src="image-20220814201031644.png" alt="生成授权码"></p><p><img src="image-20220814201039555.png" alt="开启邮箱三方授权服务"></p><p><img src="image-20220814201049721.png" alt=""></p><p><img src="image-20220814201101952.png" alt=""></p><p><img src="image-20220814201109275.png" alt=""></p><p><img src="image-20220814201117179.png" alt="收信箱展示"></p><p>参考博客：<a href="https://www.cnblogs.com/biaopei/p/10535504.html">https://www.cnblogs.com/biaopei/p/10535504.html</a></p><h1>Zabbix通过钉钉告警</h1><p>参考博客：<a href="https://blog.csdn.net/rightlzc/article/details/100702672">https://blog.csdn.net/rightlzc/article/details/100702672</a></p><p>第一步，是钉钉群聊（这个操作直接在手机上就可以拉群）</p><p>第二步，是添加群机器人（这个操作是需要在电脑端完成，手机没有权限创建机器人）</p><p>第三步，去对应的目录下准备python脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server ~]<span class="hljs-comment"># yum install -y python-requests #脚本中会用到的一个模块</span><br>[root@server alertscripts]<span class="hljs-comment"># pwd</span><br>/usr/lib/zabbix/alertscripts<br>[root@server alertscripts]<span class="hljs-comment"># cat zabbix_send_ding.py</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># Author: xxxxxxxx</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>&#125;<br>api_url = <span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send？access_token=1a047d0cdc5d0be0a438c73ad0b5e73e25b600173696fd49a2e4c1f352f4bca4&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">msg</span>(<span class="hljs-params">text</span>):<br>    json_text= &#123;<br>    <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;at&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;atMobiles&quot;</span>: [<br>        <span class="hljs-string">&quot;13333333333&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;isAtAll&quot;</span>: <span class="hljs-literal">True</span><br>        &#125;,<br>        <span class="hljs-string">&quot;text&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;content&quot;</span>: text<br>    &#125;<br>    &#125;<br>    <span class="hljs-built_in">print</span> requests.post(api_url,json.dumps(json_text),headers=headers).content<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#text = &quot;linux + zabbix 天下第一!&quot;</span><br>    text = sys.argv[<span class="hljs-number">1</span>]<br>    msg(text)<br>    <br>[root@server alertscripts]<span class="hljs-comment"># systemctl restart zabbix-server.service</span><br></code></pre></td></tr></table></figure><p>第四步，测试脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server alertscripts]<span class="hljs-comment"># chmod a+x zabbix_send_ding.py</span><br>[root@server alertscripts]<span class="hljs-comment"># ./zabbix_send_ding.py &quot;linux+zabbix天下第一！&quot;</span><br>&#123;<span class="hljs-string">&quot;errcode&quot;</span>:0,<span class="hljs-string">&quot;errmsg&quot;</span>:<span class="hljs-string">&quot;ok&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>第五步，添加告警媒介</p><p>因为我们使用的python脚本只接收一个参数（内容），所以只需要添加一个参数{ALLERT.MESSAGE}即可</p><p><img src="image-20220814201511893.png" alt="设置报警媒介"></p><p>第六步，添加动作</p><p>第七步，绑定用户，用户收件人写电话号码即可</p><p><img src="image-20220814201529716.png" alt="进行用户绑定"></p><p>最终实现效果如下图</p><p><img src="image-20220814201555219.png" alt="钉钉机器人消息"></p><h1>通过企业微信的机器人提示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># Author: xxxxxxxx</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>&#125;<br>api_url = <span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=be88cf0e-ecd8-40a0-999e-7d31f0cb8624&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">msg</span>(<span class="hljs-params">text</span>):<br>        json_text=&#123;<br>    <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>    <span class="hljs-string">&quot;text&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;content&quot;</span>: text,<br>            <span class="hljs-comment">#&quot;mentioned_list&quot;:[&quot;吴亚鹏&quot;],</span><br>            <span class="hljs-string">&quot;mentioned_mobile_list&quot;</span>:[<span class="hljs-string">&quot;17623034844&quot;</span>,<span class="hljs-string">&quot;13270559983&quot;</span>]<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">print</span> requests.post(api_url,json.dumps(json_text),headers=headers).content<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>        <span class="hljs-comment">#text = &quot;linux + zabbix 天下第一!&quot;</span><br>        text = sys.argv[<span class="hljs-number">1</span>]<br>        msg(text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本编程</title>
    <link href="/20220905/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/"/>
    <url>/20220905/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1>Shell脚本编程</h1><h1>简介</h1><ul class="lvl-0"><li class="lvl-2"><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一 种程序设计语言。</p></li><li class="lvl-2"><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的 服务。(翻译官，帮你翻译命令给内核执行)</p></li></ul><p><img src="image-20220812094238713.png" alt="相互之间的关系"></p><ul class="lvl-0"><li class="lvl-2"><p>Linux 的 Shell 种类众多，常见的有：</p><ul class="lvl-2"><li class="lvl-4">Bourne Shell（/usr/bin/sh或/bin/sh）</li><li class="lvl-4">Bourne Again Shell（/bin/bash）</li><li class="lvl-4">C Shell（/usr/bin/csh）</li><li class="lvl-4">K Shell（/usr/bin/ksh）</li><li class="lvl-4">Shell for Root（/sbin/sh）</li></ul></li><li class="lvl-2"><p>程序编程风格</p><ul class="lvl-2"><li class="lvl-4">过程式：以指令为中心，数据服务于命令</li><li class="lvl-4">对象式：以数据为中心，命令服务于数据</li><li class="lvl-4">shell是一种过程式编程</li></ul></li><li class="lvl-2"><p>过程式编程</p><ul class="lvl-2"><li class="lvl-4">顺序执行</li><li class="lvl-4">循环执行</li><li class="lvl-4">选择执行</li></ul></li><li class="lvl-2"><p>编程语言分类</p><ul class="lvl-2"><li class="lvl-4">编译型语言</li><li class="lvl-4">解释型语言（shell是一种解释型语言）</li></ul></li></ul><p><img src="image-20220812094530829.png" alt="两种分类语言之间的区别"></p><p>运行脚本</p><p>给予执行权限，通过具体的文件路径指定文件执行</p><p>直接运行解释器，将脚本作为解释器程序的参数运行</p><p>bash退出状态码</p><p>范围是0-255</p><p>脚本中一旦遇到exit命令，脚本会立即终止，终止退出状态取决于exit命令后面的数字</p><p>如果未给脚本指定退出状态码，整个脚本的退出状态码取决于脚本中执行的最后一条命令的状态</p><h1>变量</h1><h2 id="变量命名">变量命名</h2><ul class="lvl-0"><li class="lvl-2"><p>命名只能使用英文字母，数字和下划线，首字母不能以数字开头</p></li><li class="lvl-2"><p>中间不能够有特殊字符，可以使用_下划线</p></li><li class="lvl-2"><p>不能使用标点符号</p></li><li class="lvl-2"><p>不能使用bash中的关键字</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">有效命名：<br>RUNOOB<br>LD_LIBRARY_PATH<br>_var<br>var2<br>无效命名：<br>?var=123<br>user*name=runoob<br>语句给变量赋值<br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> /etc`<br>或<br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">ls</span> /etc)<br></code></pre></td></tr></table></figure><h2 id="使用变量">使用变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">定义变量：<br>your_name=<span class="hljs-string">&quot;eagles&quot;</span><br>使用变量：<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$your_name</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;your_name&#125;</span><br>建议使用｛｝号作边界<br><span class="hljs-keyword">for</span> skill <span class="hljs-keyword">in</span> Ada Coffe Action Java; <span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;I am good at <span class="hljs-variable">$&#123;skill&#125;</span>Script&quot;</span><br><span class="hljs-keyword">done</span><br>如果使用<span class="hljs-variable">$skillScript</span>，则将会输出空值<br></code></pre></td></tr></table></figure><h2 id="只读变量">只读变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>myUrl=<span class="hljs-string">&quot;http://www.google.com&quot;</span><br><span class="hljs-built_in">readonly</span> myUrl<br>myUrl=<span class="hljs-string">&quot;http://www.runoob.com&quot;</span><br>执行脚本后，显示只读变量无法修改<br></code></pre></td></tr></table></figure><h2 id="删除变量">删除变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>myUrl=<span class="hljs-string">&quot;http://www.runoob.com&quot;</span><br><span class="hljs-built_in">unset</span> myUrl<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$myUrl</span><br></code></pre></td></tr></table></figure><h2 id="变量种类">变量种类</h2><ul class="lvl-0"><li class="lvl-2"><p>本地变量：生效范围仅为当前shell进程；（其他shell，当前的子sehll进程均无效）</p><ul class="lvl-2"><li class="lvl-4">变量赋值：name = “value”</li></ul></li><li class="lvl-2"><p>环境变量：生效范围为当前shell进程及子进程</p><ul class="lvl-2"><li class="lvl-4">变量声明1：export name = “value”</li><li class="lvl-4">变量声明2：declare -x name = “value”</li><li class="lvl-4">bash中有许多内建的变量环境：SHELL,PATH等等</li></ul></li><li class="lvl-2"><p>局部变量：生效范围为当前shell进程中某代码片断（通常指函数）</p></li><li class="lvl-2"><p>位置变量： 2…来表示，让脚本在脚本代码中调用通过命令行传递给它的参数；</p></li><li class="lvl-2"><p>特殊变量：? 0 * @ #</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>,…：对应调用第1，第2等参数<br><span class="hljs-variable">$0</span>：命令本身<br>$*：传递给脚本的所有参数（把所有参数当作整体）<br><span class="hljs-variable">$@</span>：传递给脚本的所有参数<br><span class="hljs-variable">$#</span>：传递给脚本的参数的个数<br>案例1：<br>myecho.sh<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;命令本身是：<span class="hljs-variable">$0</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数是：<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个参数是：<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;一共有<span class="hljs-variable">$#</span>个参数&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;所有参数是：<span class="hljs-variable">$@</span>&quot;</span><br><br>案例2：判断所给文件的行数<br>linecount.sh<br><span class="hljs-comment">#!/bin/bash</span><br>linecount=<span class="hljs-string">&quot;<span class="hljs-subst">$(wc -l $1|cut -d&#x27; &#x27; -f1)</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This file have <span class="hljs-variable">$&#123;linecount&#125;</span> lines&quot;</span><br></code></pre></td></tr></table></figure><h1>数组</h1><ul class="lvl-0"><li class="lvl-2"><p>语法格式</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">语法格式：array_name=(value1 ... valuen)<br>示例：<br>my_array=(A B C D)<br>array_name[0]=value0<br>array_name[1]=value1<br>array_name[2]=value2<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>读取数组</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">读取数组：<span class="hljs-variable">$&#123;array_name[index]&#125;</span><br>获取数组中的所有元素：<br>my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组的元素为: <span class="hljs-variable">$&#123;my_array[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组的元素为: <span class="hljs-variable">$&#123;my_array[@]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>获取数组的长度</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">获取数组的长度：<br>my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组元素个数为: <span class="hljs-variable">$&#123;#my_array[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数组元素个数为: <span class="hljs-variable">$&#123;#my_array[@]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h1>算数运算</h1><ul class="lvl-0"><li class="lvl-2"><p>运算符</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">+ ‐ * / % ** ...<br>增强赋值：<br>+=，‐=，*=，/=，%=<br>乘法符号有些场景中需要转义 : *\<br>bash有内建随机数生成器：<span class="hljs-variable">$RANDOM</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>完成算数运算</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">(1) <span class="hljs-built_in">let</span> var（变量名）=算术表达式<br>(2) var=$[算术表达式]<br>(3) var=$((算术表达式))<br>(4) var=$(<span class="hljs-built_in">expr</span> arg1 arg2 arg3 …)                var=$(<span class="hljs-built_in">expr</span> 1 + 2)<br><span class="hljs-built_in">expr</span>本身是一个命令，可以直接进行运算<br>[root@centos73 ~]<span class="hljs-comment"># expr 1+2</span><br>1+2<br>[root@centos73 ~]<span class="hljs-comment"># expr 1 + 2注意要空格才可以进行运算。乘法符号有些场景中需要转义，如*。也就是expr这个命令后面跟的是3个参数</span><br>3<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>练习题</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">练习1：计算/etc/passwd文件中第10个用户的第20个用户的ID之和<br><br>练习2：传递两个文件路径参数给脚本，计算这两个文件之中所有空白行之和<br><br>练习3：统计/etc/,/var/,/usr/目录下有多少目录和文件<br></code></pre></td></tr></table></figure><h1>条件测试</h1><p>测试命令：test EXPERSSION</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">num1=100<br>num2=100<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> $[num1] -eq $[num2]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;两个数相等！&#x27;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;两个数不相等！&#x27;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="数值测试">数值测试</h3><p>‐gt：是否大于</p><p>‐ge：是否大于等于</p><p>‐eq：是否等于</p><p>‐ne：是否不等于</p><p>‐lt：是否小于</p><p>‐le：是否小于等于</p><p>练习题，比较两个数的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat diff.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入两个整数&quot;</span> num1 num2<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num1</span> -gt <span class="hljs-variable">$num2</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$num1</span> &gt; <span class="hljs-variable">$num2</span>&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$num1</span> -lt <span class="hljs-variable">$num2</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$num1</span> &lt; <span class="hljs-variable">$num2</span>&quot;</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$num1</span> = <span class="hljs-variable">$num2</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="字符串测试">字符串测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">==：是否等于<br>&gt;：是否大于<br>&lt;：是否小于<br>！=：是否不等于<br>=~：左侧字符串是否能够被右侧的PATTERN所匹配<br>Note：此表达式一般用于[[ ]]中<br>‐z “STRING”:测试字符串是否为空，空则为真，不空则为假<br>‐n “STRING”:测试字符串是否不空，不空则为真，空则为假<br></code></pre></td></tr></table></figure><h3 id="文件测试">文件测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">简单的存在性测试：<br>‐a FILE ：文件存在性测试，存在为真，否则为假<br>存在性及类型测试：<br>‐b FLIE：是否存在且为块设备文件；<br>‐c FILE：是否存在且为字符设备文件；<br>‐d FILE：是否存在且为目录文件；<br>‐f FILE：是否存在且为普通文件；<br>‐h FILE 或 ‐L FILE : 存在且为符号链接文件；<br>‐p FIEL ：是否存在且为命名管道文件；<br>‐S FILE：是否存在且为套接文件；<br>文件权限测试：<br>‐r FILE：是否存在且可读<br>‐w FILE：是否存在且可写<br>‐x FILE：是否存在可执行<br>文件特殊权限测试：<br>‐u FILE：是否存在且拥有suid权限；<br>‐g FILE：是否存在且拥有sgid权限；<br>‐k FILE：是否存在且拥有sticky权限；<br>文件大小测试：<br>‐s FILE：是否存在且非空<br>文件是否打开：<br>‐fd：fd表示文件描述符是否已经打开且与某终端相关<br>‐N FILE：文件自动上一次读取之后是否被修改过；<br>‐O FILE：当前用户是否为文件的属主；<br>‐G FILE：当前有效用户是否为文件数组；<br>双目测试：<br>FILE1 ‐ef FILE2 ：FILE1与FILE2是否指向同一个设备上的相同inode<br>FILE1 ‐nt FILE2：FILE1是否新于FILE2<br>FILE1 ‐ot FILE2：FILE1是否旧于FILE2<br></code></pre></td></tr></table></figure><h3 id="组合测试条件">组合测试条件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">逻辑运算符：<br>&amp;&amp;代表的意思是当前一个命令执行成功时会继续执行后续的命令，当前一个命令执行失败的时候不会执行后续的命令<br>||代表的意思是当前一个命令执行成功时不会继续执行后续的命令，当前一个命令执行失败的时候会执行后续的命令<br>第一种方式：<br>COMMAND1 &amp;&amp; COMMAND2<br>COMMAND1 || COMMAND2<br>! COMMAND<br>第二种方式：<br>EXPRESSION1 ‐a EXPRESSION2<br>EXPRESSION1 ‐o EXPRESSION2<br>! EXPRESSION<br>Note：必须使用测试命令进行<br></code></pre></td></tr></table></figure><h2 id="选择执行">选择执行</h2><ul class="lvl-0"><li class="lvl-2"><p>单分支选择结构</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> 判断条件；<span class="hljs-keyword">then</span><br>条件为真的分支代码<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>双分支选择结构</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> 判断条件；<span class="hljs-keyword">then</span><br>条件为真的分支代码<br><span class="hljs-keyword">else</span><br>条件为假的分支代码<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>多分支选择结构</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> 判断条件;<span class="hljs-keyword">then</span><br>条件为真的分支代码<br><span class="hljs-keyword">elif</span> 判断条件;<span class="hljs-keyword">then</span><br>条件为真的分支代码<br><span class="hljs-keyword">else</span><br>条件为假的分支代码<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>练习题</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">练习1：判断两个数是否相等<br><br>Note：<span class="hljs-keyword">if</span>经常会与<span class="hljs-built_in">test</span>命令一起使用<br>练习2：判断用户是否存在，如果不存在添加用户，并设置密码和用户相同<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 练习2</span><br><span class="hljs-comment">#!bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入用户名：&quot;</span> user<br><span class="hljs-built_in">id</span> <span class="hljs-variable">$user</span> &amp;&gt; /dev/null<br>thing=<span class="hljs-string">&quot;<span class="hljs-subst">$(echo $?)</span>&quot;</span><br><span class="hljs-comment"># echo $thing</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> $[thing] -eq 0<br><span class="hljs-keyword">then</span> <br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;用户已存在&quot;</span><br><span class="hljs-keyword">else</span><br>  useradd <span class="hljs-variable">$user</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$user</span> | passwd --stdin <span class="hljs-variable">$user</span> &amp;&gt;/dev/null<br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;账户已id成功创建\n&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;密码已更新为账户名&quot;</span><span class="hljs-variable">$user</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h1>用户交互</h1><h2 id="read命令">read命令</h2><ul class="lvl-0"><li class="lvl-2"><p>常用选项：</p><ul class="lvl-2"><li class="lvl-4">‐a：将内容读入到数组中<ul class="lvl-4"><li class="lvl-6">echo ‐n “Input muliple values into an array:”</li><li class="lvl-6">read ‐a array</li><li class="lvl-6">echo &quot;get $</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell脚本编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本三剑客</title>
    <link href="/20220905/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    <url>/20220905/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1>通配符</h1><p>通配符是shell在做PathnameExpansion时用到的。说白了一般只用于文件名匹配，它是由shell解析 的，比如 find，ls，cp，mv等 shell常见通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">*：匹配0或多个字符<br>?：匹配任意一个字符<br>[list]：匹配list中任意单个字符<br>[c1‐c2]：匹配c1‐c2中任意单个字符<br>[^c1‐c2]/[!c1‐c2]：不匹配c1‐c2中任意字符<br>&#123;string1,string2,...&#125;：匹配&#123;&#125;中任意单个字符串<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>shell 元字符</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">IFS：&lt;tab&gt;/&lt;space&gt;/&lt;enter&gt;<br>CR：&lt;enter&gt;<br>=：设定变量<br><span class="hljs-meta prompt_">$</span><span class="language-bash">：取变量值</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">/&lt; ：重定向</span><br>|：管道<br>&amp;：后台执行命令<br>()：在子shell中执行命令/运算或命令替换<br>&#123;&#125;：函数中执行/变量替换的界定范围<br>;：命令结束后，忽略其返回值，继续执行下一个命令<br>&amp;&amp;：命令结束后，若为true，继续执行下一个命令<br>||：命令结束后，若为false，继续执行下一个命令<br>！：非<br><span class="hljs-meta prompt_">#</span><span class="language-bash">：注释</span><br>\：转义符<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>shell转义符</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#x27;&#x27;：硬转义，内部所有shell元字符，通配符都会被关掉<br>&quot;&quot;：软转义，内部<br></code></pre></td></tr></table></figure><h1>find文件查找</h1><ul class="lvl-0"><li class="lvl-2"><p>实时查找工具，通过遍历指定路径下的文件系统完成文件查找</p></li><li class="lvl-2"><p>工作特点</p><ul class="lvl-2"><li class="lvl-4">查找速度略慢</li><li class="lvl-4">精确查找</li><li class="lvl-4">实时查找</li><li class="lvl-4">可以满足多种条件匹配</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">find [选项] [路径] [查找条件 + 处理动作]<br>查找路径：指定具体目录路径，默认是当前文件夹<br>查找条件：指定的查找标准（文件名/大小/类型/权限等），默认是找出所有文件<br>处理动作：对符合条件的文件做什么操作，默认输出屏幕<br></code></pre></td></tr></table></figure><h2 id="查找条件">查找条件</h2><ul class="lvl-0"><li class="lvl-2"><p>查找条件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">根据文件名查找：<br>    ‐name &quot;filename&quot; 支持global<br>    ‐iname &quot;filename&quot; 忽略大小写<br>    ‐regex &quot;PATTERN&quot; 以Pattern匹配整个文件路径字符串，而不仅仅是文件名称<br>根据属主和属组查找：<br>    ‐user USERNAME：查找属主为指定用户的文件<br>    ‐group GROUPNAME：查找属组为指定属组的文件<br>    ‐uid UserID：查找属主为指定的ID号的文件<br>    ‐gid GroupID：查找属组为指定的GID号的文件<br>    ‐nouser：查找没有属主的文件<br>    ‐nogroup：查找没有属组的文件<br>根据文件类型查找：<br>    ‐type Type：<br>    f/d/l/s/b/c/p<br>根据文件大小来查找：<br>‐size [+|‐]N[bcwkMG]<br>根据时间戳:<br>    天：<br>        ‐atime [+|‐]N<br>        ‐mtime<br>        ‐ctime<br>    分钟：<br>        ‐amin N<br>        ‐cmin N<br>        ‐mmin N<br>根据权限查找：<br>    ‐perm [+|‐]MODE<br>    MODE：精确权限匹配<br>    /MODE：任何一类(u，g，o)对象的权限中只要能一位匹配即可<br>    ‐MODE：每一类对象都必须同时拥有为其指定的权限标准<br>组合条件：<br>    与：‐a<br>    或：‐o<br>    非：‐not<br>相关案例：找出/tmp目录下，属主不是root，且文件名不是fstab的文件：<br>find /tmp \( -not -user root -a -not -name fstab \) -ls<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>根据文件名查找</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -name &quot;ifcfg-ens33&quot;<br>[root@localhost ~]# find /etc -iname &quot;ifcfg-ens33&quot; # 忽略大小写<br>[root@localhost ~]# find /etc -iname &quot;ifcfg*&quot;<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按文件大小</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -size +5M # 大于5M<br>[root@localhost ~]# find /etc -size 5M # 等于5M<br>[root@localhost ~]# find /etc -size -5M # 小于5M<br>[root@localhost ~]# find /etc -size +5M -ls # 找到的处理动作-ls<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>指定查找的目录深度</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find / -maxdepth 3 -a -name &quot;ifcfg-ens33&quot; # 最大查找深度<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a是同时满足，-o是或</span><br>[root@localhost ~]# find / -mindepth 3 -a -name &quot;ifcfg-ens33&quot; # 最小查找深度<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按时间找</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -mtime +5 # 修改时间超过5天<br>[root@localhost ~]# find /etc -mtime 5 # 修改时间等于5天<br>[root@localhost ~]# find /etc -mtime -5 # 修改时间5天以内<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按照文件属主、属组找</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /home -user xwz # 属主是xwz的文件<br>[root@localhost ~]# find /home -group xwz<br>[root@localhost ~]# find /home -user xwz -group xwz<br>[root@localhost ~]# find /home -user xwz -a -group root<br>[root@localhost ~]# find /home -user xwz -o -group root<br>[root@localhost ~]# find /home -nouser # 没有属主的文件<br>[root@localhost ~]# find /home -nogroup # 没有属组的文件<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按文件类型</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /dev -type d<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按文件权限</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find / -perm 644 -ls<br>[root@localhost ~]# find / -perm -644 -ls # 权限小于644的<br>[root@localhost ~]# find / -perm 4000 -ls<br>[root@localhost ~]# find / -perm -4000 -ls<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>按正则表达式</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# find /etc -regex &#x27;.*ifcfg-ens[0-9][0-9]&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">.* 任意多个字符</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[0-9] 任意一个数字</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>条件组合</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-a：多个条件and并列<br>-o：多个条件or并列<br>-not：条件取反<br></code></pre></td></tr></table></figure><h2 id="处理动作">处理动作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">‐print：默认的处理动作，显示至屏幕<br>‐ls：类型于对查找到的文件执行“ls ‐l”命令<br>‐delete：删除查找到的文件<br>‐fls /path/to/somefile：查找到的所有文件的长格式信息保存至指定文件中<br>‐ok COMMAND &#123;&#125;\：对查找到的每个文件执行由COMMAND指定的命令<br>对于每个文件执行命令之前，都会交换式要求用户确认<br>‐exec COMMAND &#123;&#125; \：对查找到的每个文件执行由COMMAND指定的命令<br>[root@server1 ~]# find /etc/init.d/ -perm -111 -exec cp -r &#123;&#125; dir1/ \;<br>&#123;&#125;：用于引用查找到的文件名称自身<br>注意：find传递查找到的文件至后面指定的命令时，查找到所有符合条件的文件一次性传递给后面的命<br>令；另一种方式可规避此问题<br>find | xargs COMMAND<br></code></pre></td></tr></table></figure><h1>正则表达式</h1><p>正则表达式是用来匹配字符串的，针对文件内容的文本过滤工具里，大都用到正则表达式，如vi， grep，awk， sed等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#字符匹配</span></span><br>    .：匹配任意单个字符<br>    []：匹配指定范围内任意单个字符 [a-z] [0-9]<br>    [^]：匹配指定范围外任意单个字符 [^a-z] [^0-9]<br>    [:alnum:]：字母与数字字符<br>    [:alpha:]：字母<br>    [:ascii:]：ASCII字符<br>    [:blank:]：空格或制表符<br>    [:cntrl:]：ASCII控制字符<br>    [:digit:]：数字<br>    [:graph:]：非控制、非空格字符<br>    [:lower:]：小写字母<br>    [:print:]：可打印字符<br>    [:punct:]：标点符号字符<br>    [:space:]：空白字符，包括垂直制表符<br>    [:upper:]：大写字母<br>    [:xdigit:]：十六进制数字<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#匹配次数</span></span><br>    *：匹配前面的字符任意次数<br>    .*：匹配任意长度的字符<br>    \?：匹配其前面字符0或1次，即前面的可有可无 &#x27;a\?b&#x27;<br>    \+：匹配其前面的字符至少1次 &#x27;a\+b&#x27;<br>    \&#123;m\&#125;：匹配前面的字符m次<br>    \&#123;m,n\&#125;：匹配前面的字符至少m次，至多n次<br>    \&#123;0,n\&#125;：匹配前面的字符至多n次<br>    \&#123;m,\&#125;：匹配前面的字符至少m次<br>    ##位置锚定<br>    ^：行首锚定，用于模式的最左侧<br>    $：行末锚定，用于模式的最右侧<br>    ^PATTERN$：用于模式匹配整行；<br>    ^$：空行<br>    \&lt; 或 \b：词首锚定，用于单词模式的左侧<br>    \&gt; 或 \b：词尾锚定，用于单词模式的右侧<br>    \&lt;PATTERN\&gt;：匹配整个单词 &#x27;\&lt;hello\&gt;&#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#分组</span></span><br>\(\):将一个或多个字符捆绑在一起；当作一个字符<br>\(xy\)*ab<br>Note：分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命令<br>方式为：<br>    \1，\2，\3……<br>    \1：从左侧起，第一个左括号以及与之匹配右括号之间的模式所匹配到的字符；<br>    \(ab\+\(xy\)*\):<br>    \1：ab\+\(xy\)*<br>    \2：xy<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>扩展正则表达式</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#字符匹配</span></span><br>.<br>[]<br>[^]<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#次数匹配</span></span><br>*<br>？：0次或1次<br>+：1次或多次<br>&#123;m&#125;:匹配m次<br>&#123;m,n&#125;：至少m次，至多n次<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#位置锚定</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#分组</span></span><br>()<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#或者</span></span><br>a|b<br>C | cat ：C或cat<br>(C|c)at : C或c<br></code></pre></td></tr></table></figure><h1>Linux三剑客之grep</h1><p>grep作用：过滤文本内容</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-E :–extended–regexp</td><td>模式是扩展正则表达式（ERE）</td></tr><tr><td>-i :–ignore–case</td><td>忽略大小写</td></tr><tr><td>-n: --line–number</td><td>打印行号</td></tr><tr><td>-o:–only–matching</td><td>只打印匹配的内容</td></tr><tr><td>-c:–count</td><td>只打印每个文件匹配的行数</td></tr><tr><td>-B:–before–context=NUM</td><td>打印匹配的前几行</td></tr><tr><td>-A:–after–context=NUM</td><td>打印匹配的后几行</td></tr><tr><td>-C:–context=NUM</td><td>打印匹配的前后几行</td></tr><tr><td>–color[=WHEN]</td><td>匹配的字体颜色，别名已定义了</td></tr><tr><td>-v:–invert–match</td><td>打印不匹配的行</td></tr><tr><td>-e</td><td>多点操作eg：grep -e “^s” -e “s$”</td></tr></tbody></table><p>样本文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat test<br>asdkahsduoa<br>aslkdsl<br>oiofr<br>sdjo<br>A<br>F<br>aSDD<br>CASDC<br><br>asdo<br>ca<br></code></pre></td></tr></table></figure><h2 id="实例">实例</h2><p>实例1：打印出所有的a无论大小写 ： -i选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -i &quot;a&quot; test<br>asdkahsduoa<br>aslkdsl<br>A<br>aSDD<br>CASDC<br>asdo<br>ca<br></code></pre></td></tr></table></figure><p>实例2：打印出所有的a无论大小写，并且显示该字符串所在的行 ： -n选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -in &quot;a&quot; test<br>1:asdkahsduoa<br>2:aslkdsl<br>5:A<br>7:aSDD<br>8:CASDC<br>10:asdo<br>11:ca<br></code></pre></td></tr></table></figure><p>实例3：仅仅打印出所有匹配的字符串： -o选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -io &quot;a&quot; test<br>a<br>a<br>a<br>a<br>A<br>a<br>A<br>a<br>a<br></code></pre></td></tr></table></figure><p>实例4：打印出匹配的字符串有多少行 -c选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -ic &quot;a&quot; test<br>7<br></code></pre></td></tr></table></figure><p>实例5：打印出字符S前面的2行 -B</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -B 2 &quot;S&quot; test<br>A<br>F<br>aSDD<br>CASDC<br></code></pre></td></tr></table></figure><p>实例6：打印出字符S后面的2行 -A</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -A 2 &quot;S&quot; test<br>aSDD<br>CASDC<br><br>asdo<br></code></pre></td></tr></table></figure><p>实例7：打印出字符S前后2行 -C</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -C 2 &quot;S&quot; test<br>A<br>F<br>aSDD<br>CASDC<br><br>asdo<br><br></code></pre></td></tr></table></figure><p>实例8：打印出不包含大小s的所有行 取反 -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -iv &quot;S&quot; test<br>oiofr<br>A<br>F<br><br>ca<br></code></pre></td></tr></table></figure><p>grep可以从文件当中直接搜索某个关键词,也可以从标准输入里面搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep root /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>operator:x:11:0:operator:/root:/sbin/nologin<br>[root@localhost ~]# cat /etc/passwd | grep &quot;root&quot;<br>root:x:0:0:root:/root:/bin/bash<br>operator:x:11:0:operator:/root:/sbin/nologin<br></code></pre></td></tr></table></figure><h2 id="正则表达式（基于grep）">正则表达式（基于grep）</h2><ul class="lvl-0"><li class="lvl-2"><p>功能就是用来检索、替换那些符合某个模式(规则)的文本,正则表达式在每种语言中都会有;</p></li><li class="lvl-2"><p>正则表达式就是为了处理大量的文本或字符串而定义的一套规则和方法</p></li><li class="lvl-2"><p>通过定义的这些特殊符号的辅助，系统管理员就可以快速过滤，替换或输出需要的字符串</p></li><li class="lvl-2"><p>Linux正则表达式一般以行为单位处理</p></li></ul><h3 id="基础正则表达式">基础正则表达式</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配任意单个字符（必须存在）</td></tr><tr><td>^</td><td>匹配以某个字符开头的行</td></tr><tr><td>$</td><td>配以什么字符结尾的行</td></tr><tr><td>*</td><td>匹配前面的一个字符出现0次或者多次；eg：a*b</td></tr><tr><td>.*</td><td>表示任意长度的任意字符</td></tr><tr><td>[]</td><td>表示匹配括号内的一个字符</td></tr><tr><td>[^]</td><td>匹配<code>[^字符]</code>之外的任意一个字符</td></tr><tr><td>[]</td><td>匹配非<code>[^字符]</code>内字符开头的行</td></tr><tr><td>&lt;</td><td>锚定 单词首部；eg：\</td></tr><tr><td>&gt;</td><td>锚定 单词尾部：eg：root&gt;</td></tr><tr><td>{m,n}</td><td>表示匹配前面的字符出现至少m次，至多n次</td></tr><tr><td>()</td><td>表示对某个单词进行分组；\1表示第一个分组进行调用</td></tr></tbody></table><h3 id="扩展正则">扩展正则</h3><ul class="lvl-0"><li class="lvl-2"><p>egrep …</p></li><li class="lvl-2"><p>grep -E …</p></li><li class="lvl-2"><p>扩展正则支持所有基础正则；</p></li><li class="lvl-2"><p>并有补充 扩展正则中{}和[]不用转义可以直接使用；</p></li></ul><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>表示前面的字符至少出现1次的情况</td></tr><tr><td>|</td><td>表示“或”</td></tr><tr><td>？</td><td>表示前面的字符至多出现1次的情况</td></tr></tbody></table><h3 id="最常用">最常用</h3><p>查看配置文件时去除所有的注释和空行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# grep -Ev &quot;^#|^$&quot; /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><h1>Linux三剑客之sed</h1><p>Linux sed命令是利用script来处理文本文件。</p><p>sed可依照script的指令，来处理、编辑文本文件。</p><p>sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p><h2 id="语法">语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed的命令格式： sed [option] <span class="hljs-string">&#x27;sed command&#x27;</span> filename<br>sed的脚本格式：sed [option] ‐f <span class="hljs-string">&#x27;sed script&#x27;</span> filename<br>常用选项：<br>‐n ：只打印模式匹配的行<br>‐e ：直接在命令行模式上进行sed动作编辑，此为默认选项<br>‐f ：将sed的动作写在一个文件内，用–f filename 执行filename内的sed动作<br>‐r ：支持扩展表达式<br>‐i ：直接修改文件内容<br>查询文本的方式<br>使用行号和行号范围<br>x：行号<br>x,y：从x行到y行<br>x,y!：x行到y行之外<br>/pattern：查询包含模式的行<br>/pattern/, /pattern/：查询包含两个模式的行<br>/pattern/,x：x行内查询包含模式的行<br>x,/pattern/：x行后查询匹配模式的行<br></code></pre></td></tr></table></figure><h2 id="动作说明">动作说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">常用选项：<br>p：打印匹配的行(‐n)<br>=：显示文件行号<br>a\：指定行号后添加新文本<br>i\：指定行号前添加新文本<br>d：删除定位行<br>c\：用新文本替换定位文本<br>w filename：写文本到一个文件<br>r filename：从另一个文件读文本<br>s///：替换<br>替换标记：<br>g：行内全局替换<br>p：显示替换成功的行<br>w：将替换成功的结果保存至指定文件<br>q：第一个模式匹配后立即退出<br>&#123;&#125;：在定位行执行的命令组，用逗号分隔<br>g：将模式2粘贴到/pattern n/<br></code></pre></td></tr></table></figure><p>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)</p><p>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</p><p>d ：删除，因为是删除啊，所以 d 后面通常不接任何东西；</p><p>i ：插入， i的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</p><p>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行</p><p>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</p><h2 id="实例-2">实例</h2><p>在testfile文件的第四行后添加一行，并将结果输出到标准输出</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@localhost ~]# sed -<span class="hljs-keyword">e</span> 4a\newline <span class="hljs-keyword">test</span><br><span class="hljs-keyword">line</span> <span class="hljs-keyword">one</span><br><span class="hljs-keyword">line</span> <span class="hljs-keyword">two</span><br><span class="hljs-keyword">line</span> three<br><span class="hljs-keyword">line</span> four<br>newline<br><span class="hljs-keyword">line</span> five<br></code></pre></td></tr></table></figure><h3 id="以行为单位的新增-删除">以行为单位的新增/删除</h3><p>将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2,5d&#x27;</span><br>    1 root:x:0:0:root:/root:/bin/bash<br>    6 <span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>    8 halt:x:7:0:halt:/sbin:/sbin/halt<br>    9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>    10 operator:x:11:0:operator:/root:/sbin/nologin<br>    11 games:x:12:100:games:/usr/games:/sbin/nologin<br>    12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>    13 nobody:x:99:99:Nobody:/:/sbin/nologin<br>    14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>    15 dbus:x:81:81:System message bus:/:/sbin/nologin<br>    16 polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>    17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>    18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br></code></pre></td></tr></table></figure><p>sed 的动作为 ‘2,5d’ ，那个 d 就是删除！因为 2-5 行给他删除了，所以显示的数据就没有 2-5 行罗～ 另 外，注意一下，原本应该是要下达 sed -e 才对，没有 -e 也行啦！同时也要注意的是， sed 后面接的动 作，请务必以 ‘’ 两个单引号括住喔！</p><p>只要删除第 2 行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2d&#x27;</span><br>    1 root:x:0:0:root:/root:/bin/bash<br>    3 daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>    4 adm:x:3:4:adm:/var/adm:/sbin/nologin<br>    5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>    6 <span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>    8 halt:x:7:0:halt:/sbin:/sbin/halt<br>    9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>    10 operator:x:11:0:operator:/root:/sbin/nologin<br>    11 games:x:12:100:games:/usr/games:/sbin/nologin<br>    12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>    13 nobody:x:99:99:Nobody:/:/sbin/nologin<br>    14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>    15 dbus:x:81:81:System message bus:/:/sbin/nologin<br>    16 polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>    17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br></code></pre></td></tr></table></figure><p>要删除第 3 到最后一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;3,$d&#x27;</span><br>    1 root:x:0:0:root:/root:/bin/bash<br>    2 bin:x:1:1:bin:/bin:/sbin/nologin<br></code></pre></td></tr></table></figure><p>在第二行后(亦即是加在第三行)加上『hello world』字样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2a\hello world&#x27;</span><br>    1 root:x:0:0:root:/root:/bin/bash<br>    2 bin:x:1:1:bin:/bin:/sbin/nologin<br>hello world<br>    3 daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>    4 adm:x:3:4:adm:/var/adm:/sbin/nologin<br>    5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>    6 <span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>    8 halt:x:7:0:halt:/sbin:/sbin/halt<br>    9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>    10 operator:x:11:0:operator:/root:/sbin/nologin<br>    11 games:x:12:100:games:/usr/games:/sbin/nologin<br>    12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>    13 nobody:x:99:99:Nobody:/:/sbin/nologin<br>    14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>    15 dbus:x:81:81:System message bus:/:/sbin/nologin<br>    16 polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>    17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>    18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br></code></pre></td></tr></table></figure><p>加在第二行前面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2i\hello world&#x27;</span><br>1 root:x:0:0:root:/root:/bin/bash<br>hello world<br>    2 bin:x:1:1:bin:/bin:/sbin/nologin<br>    3 daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>    4 adm:x:3:4:adm:/var/adm:/sbin/nologin<br>    5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>    6 <span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>    8 halt:x:7:0:halt:/sbin:/sbin/halt<br>    9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>    10 operator:x:11:0:operator:/root:/sbin/nologin<br>    11 games:x:12:100:games:/usr/games:/sbin/nologin<br>    12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>    13 nobody:x:99:99:Nobody:/:/sbin/nologin<br>    14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>    15 dbus:x:81:81:System message bus:/:/sbin/nologin<br>    16 polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>    17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>    18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br></code></pre></td></tr></table></figure><p>增加多行文字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2a\hello world\</span><br>&gt; nihao<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    1 root:x:0:0:root:/root:/bin/bash</span><br><span class="hljs-string">    2 bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">nihao</span><br><span class="hljs-string">    3 daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="hljs-string">    4 adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="hljs-string">    5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="hljs-string">    6 sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="hljs-string">    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="hljs-string">    8 halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="hljs-string">    9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="hljs-string">    10 operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="hljs-string">    11 games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="hljs-string">    12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="hljs-string">    13 nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="hljs-string">    14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="hljs-string">    15 dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="hljs-string">    16 polkitd:x:999:998:User for polkitd:/:/sbin/nologin</span><br><span class="hljs-string">    17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="hljs-string">    18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br></code></pre></td></tr></table></figure><h3 id="以行为单位的替换与显示">以行为单位的替换与显示</h3><p>将第2-5行的内容取代成为『No 2-5 number』</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2,5c\No 2-5 number&#x27;</span><br>1 root:x:0:0:root:/root:/bin/bash<br>No 2-5 number<br>    6 <span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>    8 halt:x:7:0:halt:/sbin:/sbin/halt<br>    9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>    10 operator:x:11:0:operator:/root:/sbin/nologin<br>    11 games:x:12:100:games:/usr/games:/sbin/nologin<br>    12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>    13 nobody:x:99:99:Nobody:/:/sbin/nologin<br>    14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>    15 dbus:x:81:81:System message bus:/:/sbin/nologin<br>    16 polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>    17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>    18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br></code></pre></td></tr></table></figure><p>仅列出 /etc/passwd 文件内的第 5-7 行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed -n &#x27;5,7p&#x27;</span><br>    5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>    6 <span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br></code></pre></td></tr></table></figure><h3 id="数据的搜寻并显示">数据的搜寻并显示</h3><p>搜索 /etc/passwd有root关键字的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed -n &#x27;/root/p&#x27;</span><br>    1 root:x:0:0:root:/root:/bin/bash<br>    10 operator:x:11:0:operator:/root:/sbin/nologin<br></code></pre></td></tr></table></figure><h3 id="数据的搜寻并删除">数据的搜寻并删除</h3><p>删除/etc/passwd所有包含root的行，其他行输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;/root/d&#x27;</span><br>    2 bin:x:1:1:bin:/bin:/sbin/nologin<br>    3 daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>    4 adm:x:3:4:adm:/var/adm:/sbin/nologin<br>    5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br>    6 <span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>    7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>    8 halt:x:7:0:halt:/sbin:/sbin/halt<br>    9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>    11 games:x:12:100:games:/usr/games:/sbin/nologin<br>    12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br>    13 nobody:x:99:99:Nobody:/:/sbin/nologin<br>    14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin<br>    15 dbus:x:81:81:System message bus:/:/sbin/nologin<br>    16 polkitd:x:999:998:User <span class="hljs-keyword">for</span> polkitd:/:/sbin/nologin<br>    17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>    18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br></code></pre></td></tr></table></figure><h3 id="数据的搜寻并执行命令">数据的搜寻并执行命令</h3><p>搜索/etc/passwd,找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里 把bash替换为blueshell，再输出这行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed -n &#x27;/root/&#123;s/bash/blueshell/p;q&#125;&#x27;</span><br>1 root:x:0:0:root:/root:/bin/blueshell<br></code></pre></td></tr></table></figure><p>最后的q是退出，不然会继续找下去</p><h3 id="数据的搜寻并替换">数据的搜寻并替换</h3><p>除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的搜寻并取代</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed <span class="hljs-string">&#x27;s/要被取代的字串/新的字串/g&#x27;</span><br></code></pre></td></tr></table></figure><p>查询 IP</p><p>原始信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ifconfig</span><br>ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500<br>        inet 192.168.91.128 netmask 255.255.255.0 broadcast 192.168.91.255<br>        inet6 fe80::2de4:b37a:36e9:ae2e prefixlen 64 scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether 00:0c:29:d3:76:83 txqueuelen 1000 (Ethernet)<br>        RX packets 33461 bytes 32133707 (30.6 MiB)<br>        RX errors 0 dropped 0 overruns 0 frame 0<br>        TX packets 11322 bytes 1300148 (1.2 MiB)<br>        TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536<br>        inet 127.0.0.1 netmask 255.0.0.0<br>        inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt;<br>        loop txqueuelen 1000 (Local Loopback)<br>        RX packets 10 bytes 697 (697.0 B)<br>        RX errors 0 dropped 0 overruns 0 frame 0<br>        TX packets 10 bytes 697 (697.0 B)<br>        TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0<br></code></pre></td></tr></table></figure><p>取有IP地址那一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ifconfig | sed -n &#x27;/netmask/p&#x27;</span><br>    inet 192.168.91.128 netmask 255.255.255.0 broadcast 192.168.91.255<br>    inet 127.0.0.1 netmask 255.0.0.0<br></code></pre></td></tr></table></figure><p>删除IP地址前面和后面的东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ifconfig | sed -n &#x27;/netmask/p&#x27; | sed &#x27;s/^.*inet //g&#x27; |</span><br>sed <span class="hljs-string">&#x27;s/ netmask.*$//g&#x27;</span><br>192.168.91.128<br>127.0.0.1<br></code></pre></td></tr></table></figure><p>取第一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ifconfig | sed -n &#x27;/netmask/p&#x27; | sed &#x27;s/^.*inet //g&#x27; |</span><br>sed <span class="hljs-string">&#x27;s/ netmask.*$//g&#x27;</span> | sed -n <span class="hljs-string">&#x27;1p&#x27;</span><br>192.168.91.128<br></code></pre></td></tr></table></figure><p>可以在末尾加g替换每一个匹配的关键字,否则只替换每行的第一个</p><p>另一种方式：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># ip a|sed -n <span class="hljs-string">&#x27;/inet /p&#x27;</span>|sed <span class="hljs-string">&#x27;s/^.*inet //g&#x27;</span>|sed<span class="hljs-string">&#x27;s/\/.*$//g&#x27;</span>|sed -n <span class="hljs-string">&#x27;2p</span></span><br></code></pre></td></tr></table></figure><h2 id="多点编辑">多点编辑</h2><p>一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># nl /etc/passwd | sed -e &#x27;3,$d&#x27; -e &#x27;s/bash/blueshell/&#x27;</span><br>    1 root:x:0:0:root:/root:/bin/blueshell<br>    2 bin:x:1:1:bin:/bin:/sbin/nologin<br></code></pre></td></tr></table></figure><p>-e表示多点编辑，第一个编辑命令删除/etc/passwd第三行到末尾的数据，第二条命令搜索bash替换为 blueshell。</p><h2 id="直接修改文件内容-危险动作">直接修改文件内容(危险动作)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat test</span><br>line one.<br>line two.<br>line three.<br>line four.<br>line five.<br></code></pre></td></tr></table></figure><p>加i参数就是直接修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># sed -i &#x27;s/\.$/\!/g&#x27; test</span><br>[root@localhost ~]<span class="hljs-comment"># cat test</span><br>line one!<br>line two!<br>line three!<br>line four!<br>line five!<br></code></pre></td></tr></table></figure><p>利用 sed 直接在最后一行加入 # test</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># sed -i &#x27;$a\# test&#x27; test</span><br>[root@localhost ~]<span class="hljs-comment"># cat test</span><br>line one!<br>line two!<br>line three!<br>line four!<br>line five!<br><span class="hljs-comment"># test</span><br></code></pre></td></tr></table></figure><h1>Linux三剑客之awk</h1><h2 id="使用方法">使用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;pattern + action&#125;&#x27;</span> &#123;filenames&#125;<br></code></pre></td></tr></table></figure><p>其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花 括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是 要表示的正则表达式，用斜杠括起来。</p><p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进 行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p><p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文 本。</p><h2 id="awk-的原理">awk 的原理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># awk -F: &#x27;&#123;print $0&#125;&#x27; /etc/passwd</span><br></code></pre></td></tr></table></figure><p>执行 awk 时，它依次对/etc/passwd 中的每一行执行 print 命令</p><p><img src="image-20220812090844760.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># awk -F&quot;:&quot; &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span><br>[root@localhost ~]<span class="hljs-comment"># awk -F&quot;:&quot; &#x27;&#123;print $1 $3&#125;&#x27; /etc/passwd</span><br>[root@localhost ~]<span class="hljs-comment"># awk -F&quot;:&quot; &#x27;&#123;print $1&quot; &quot; $3&#125;&#x27; /etc/passwd</span><br>[root@localhost ~]<span class="hljs-comment"># awk -F&quot;:&quot; &#x27;&#123;print &quot;username:&quot;$1&quot;\t\tuid:&quot; $3&#125;&#x27;/etc/passwd</span><br></code></pre></td></tr></table></figure><p>-F参数：指定分隔符，可指定一个或多个</p><p>print 后面做字符串的拼接</p><h2 id="实例一：只查看test-txt文件（100行）内第20到第30行的内容（企业面试）">实例一：只查看test.txt文件（100行）内第20到第30行的内容（企业面试）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># seq 100 &gt; test.txt</span><br>[root@localhost ~]<span class="hljs-comment"># awk &#x27;&#123;if(NR&gt;=20 &amp;&amp; NR&lt;=30) print $1&#125;&#x27; test.txt</span><br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br></code></pre></td></tr></table></figure><h2 id="实例二：已知test-txt文件内容为">实例二：已知test.txt文件内容为</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat test.txt</span><br>I am aaron, my qq is 1234567<br></code></pre></td></tr></table></figure><p>请从该文件中过滤出’aaron’字符串与1234567，最后输出的结果为：aaron 1234567</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># awk -F &#x27;[ ,]+&#x27; &#x27;&#123;print $3&quot; &quot;$8&#125;&#x27; test.txt #用[]可以放多个分隔符</span><br>aaron 1234567<br>等效<br>[root@localhost ~]<span class="hljs-comment"># awk -F &#x27;,&#x27; &#x27;&#123;print $1&quot; &quot;$2&#125;&#x27; test.txt|awk &#x27;&#123;print $3 &quot; &quot;$7&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="BEGIN-和-END-模块">BEGIN 和 END 模块</h2><h3 id="实例一：统计-etc-passwd的账户人数">实例一：统计/etc/passwd的账户人数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;BEGIN &#123;count=0;print &quot;[start] user count is &quot;,count&#125;&#123;count++;print $0&#125;END&#123;print &quot;[end] user count is &quot;,count&#125;&#x27;</span> /etc/passwd<br></code></pre></td></tr></table></figure><p>count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多 个语句，以;号隔开。这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># awk &#x27;&#123;count++;print $0;&#125; END&#123;print &quot;user count is&quot;,count&#125;&#x27; /etc/passwd</span><br></code></pre></td></tr></table></figure><h3 id="实例二：统计某个文件夹下的文件占用的字节数">实例二：统计某个文件夹下的文件占用的字节数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ll | awk &#x27;BEGIN &#123;size=0&#125; &#123;size=size+$5&#125; END&#123;print &quot;sizeis &quot;,size&#125;&#x27;</span><br>size is 1468<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ll | awk &#x27;BEGIN &#123;size=0&#125; &#123;size=size+$5&#125; END&#123;print&quot;sizeis&quot;,size/1024/1024,&quot;M&quot;&#125;&#x27;</span><br>size is 0.00139999 M<br></code></pre></td></tr></table></figure><h2 id="awk运算符">awk运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>赋值运算符</td><td></td></tr><tr><td>= += -= *= /= %= ^= **=</td><td>赋值语句</td></tr><tr><td>逻辑运算符</td><td></td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>正则运算符</td><td></td></tr><tr><td>~ !~</td><td>匹配正则表达式和不匹配正则表达式</td></tr><tr><td>关系运算符</td><td></td></tr><tr><td>&lt; &lt;= &gt; &gt;= != ==</td><td>关系运算符</td></tr><tr><td>算数运算符</td><td></td></tr><tr><td>+ -</td><td>加,减</td></tr><tr><td>* / &amp;</td><td>乘,除与求余</td></tr><tr><td>+ - !</td><td>一元加,减和逻辑非</td></tr><tr><td>^ ***</td><td>求幂</td></tr><tr><td>++ –</td><td>增加或减少，作为前缀或后缀</td></tr><tr><td>其他运算符</td><td></td></tr><tr><td>$</td><td>字段引用</td></tr><tr><td>空格</td><td>字符串链接符</td></tr><tr><td>?:</td><td>三目运算符</td></tr><tr><td>ln</td><td>数组中是否存在某键值</td></tr></tbody></table><p>awk 赋值运算符：a+=5;等价于： a=a+5;其他同类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=5;a+=5;print a&#125;&#x27;</span><br>10<br></code></pre></td></tr></table></figure><p>awk逻辑运算符：判断表达式 a&gt;2&amp;&amp;b&gt;1为真还是为假，后面的表达式同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=1;b=2;print (a&gt;2&amp;&amp;b&gt;1,a=1||b&gt;1)&#125;&#x27;</span><br>0 1<br></code></pre></td></tr></table></figure><p>awk正则运算符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=&quot;100testaa&quot;;if(a~/100/) &#123;print &quot;OK&quot;&#125;&#125;&#x27;</span><br>OK<br></code></pre></td></tr></table></figure><p>关系运算符：</p><p>如： &gt; &lt; 可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比 较。两个都为数字 才转为数值比较。字符串比较：按照ascii码顺序比较。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=&quot;11&quot;;if(a&gt;=9)&#123;print&quot;OK&quot;&#125;&#125;&#x27;</span><br>[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=11;if(a&gt;=9)&#123;print&quot;OK&quot;&#125;&#125;&#x27;</span><br>OK<br>[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a;if(a&gt;=b)&#123;print&quot;OK&quot;&#125;&#125;&#x27;</span><br>OK<br></code></pre></td></tr></table></figure><p>awk 算术运算符：</p><p>说明，所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=&quot;b&quot;;print a++,++a&#125;&#x27;</span><br>0 2<br>[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=&quot;20b4&quot;;print a++,++a&#125;&#x27;</span><br>20 22<br></code></pre></td></tr></table></figure><p>这里的a++ , <ins>a与javascript语言一样：a</ins>是先赋值加++；<ins>a是先</ins>再赋值</p><p>三目运算符 ?:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=&quot;b&quot;;print a==&quot;b&quot;?&quot;ok&quot;:&quot;err&quot;&#125;&#x27;</span><br>ok<br>[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;a=&quot;b&quot;;print a==&quot;c&quot;?&quot;ok&quot;:&quot;err&quot;&#125;&#x27;</span><br>err<br></code></pre></td></tr></table></figure><h2 id="常用-awk-内置变量">常用 awk 内置变量</h2><table><thead><tr><th>变量名</th><th>属性</th></tr></thead><tbody><tr><td>$0</td><td>当前记录</td></tr><tr><td>1 n</td><td>当前记录的第n个字段</td></tr><tr><td>FS</td><td>输入字段分割符 默认是空格</td></tr><tr><td>RS</td><td>输入记录分割符 默认为换行符</td></tr><tr><td>NF</td><td>当前记录中的字段个数，就是有多少列</td></tr><tr><td>NR</td><td>已经读出的记录数，就是行号，从1开始</td></tr><tr><td>OFS</td><td>输出字段分割符 默认也是空格</td></tr><tr><td>ORS</td><td>输出的记录分割符 默认为换行符</td></tr></tbody></table><p>注：内置变量很多，参阅相关资料</p><p>字段分隔符 FS</p><p>FS=“\t” 一个或多个 Tab 分隔</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># cat tab.txt</span><br>aa bb cc<br>[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;FS=&quot;\t+&quot;&#125;&#123;print $1,$2,$3&#125;&#x27; tab.txt</span><br>aa bb cc<br></code></pre></td></tr></table></figure><p>FS=“[[:space:]+]” 一个或多个空白空格，默认的，匹配到不符合的就停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk -F [[:space:]+] &#x27;&#123;print $1,$2,$3,$4,$5&#125;&#x27; tab.txt</span><br>aa bb cc<br>[root@node-1 ~]<span class="hljs-comment"># awk -F [[:space:]+] &#x27;&#123;print $1,$2&#125;&#x27; tab.txt</span><br>aa bb<br></code></pre></td></tr></table></figure><p>FS=“[” “:]+” 以一个或多个空格或：分隔</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk -F [&quot; &quot;:]+ &#x27;&#123;print $1,$2,$3&#125;&#x27; hello.txt</span><br>root x 0<br></code></pre></td></tr></table></figure><p>字段数量 NF :显示满足用:分割，并且有8个字段的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk -F &quot;:&quot; &#x27;NF==8&#123;print $0&#125;&#x27; hello.txt</span><br>bin:x:1:1:bin:/bin:/sbin/nologin:888<br></code></pre></td></tr></table></figure><p>记录数量 NR</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># ifconfig br0 | awk -F [&quot; &quot;:]+ &#x27;NR==2&#123;print $3&#125;&#x27;</span><br>192.168.0.241<br></code></pre></td></tr></table></figure><p>RS 记录分隔符变量</p><p>将 FS 设置成&quot;\n&quot;告诉 awk 每个字段都占据一行。通过将 RS 设置成&quot;&quot;，还会告诉 awk每个地址记录都由 空白行分隔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># cat awk.txt</span><br><span class="hljs-comment">#!/bin/awk</span><br>BEGIN &#123;<br>FS=<span class="hljs-string">&quot;\n&quot;</span><br>RS=<span class="hljs-string">&quot;&quot;</span><br>&#125;<br>&#123;<br><span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-variable">$2</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-variable">$3</span><br>&#125;<br>[root@node-1 ~]<span class="hljs-comment"># awk -f awk.txt recode.txt</span><br></code></pre></td></tr></table></figure><p>在&quot;&quot;分割符之内，符合\n分割的会被打印出来</p><p>OFS 输出字段分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;FS=&quot;:&quot;;OFS=&quot;#&quot;&#125;&#123;print $1,$2,$3&#125;&#x27; hello.txt</span><br>root<span class="hljs-comment">#x#0</span><br>bin<span class="hljs-comment">#x#1</span><br></code></pre></td></tr></table></figure><p>ORS 输出记录分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># cat awk.txt</span><br><span class="hljs-comment">#!/bin/awk</span><br>BEGIN &#123;<br>FS=<span class="hljs-string">&quot;\n&quot;</span><br>RS=<span class="hljs-string">&quot;&quot;</span><br>ORS=<span class="hljs-string">&quot;\n\n&quot;</span><br>&#125;<br>&#123;<br><span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-variable">$2</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-variable">$3</span><br>&#125;<br>[root@node-1 ~]<span class="hljs-comment"># awk -f awk.txt recode.txt</span><br>Jimmy the Weasel,100 Pleasant Drive,San Francisco,CA 123456<br>Big Tony,200 Incognito Ave.,Suburbia,WA 64890<br></code></pre></td></tr></table></figure><h2 id="awk正则">awk正则</h2><table><thead><tr><th>元字符</th><th>功能</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td>^</td><td>首航定位符</td><td>/^root/</td><td>匹配所有以root开头的行</td></tr><tr><td>行尾定位符/root/</td><td>匹配所有以root结尾的行</td><td></td><td></td></tr><tr><td>.</td><td>匹配任意单个字符</td><td>/r…t/</td><td>匹配字母r,然后两个任意字符，再以t结尾的行</td></tr><tr><td>*</td><td>匹配0个或多个前导字符(包括回车)</td><td>/a*ool/</td><td>匹配0个或多个a之后紧跟着ool的行，比如ool，aaaaool 等</td></tr><tr><td>+</td><td>匹配1个或多个前导字符</td><td>/a+b/</td><td>ab, aaab</td></tr><tr><td>?</td><td>匹配0个或1个前导字符</td><td>/a?b/</td><td>b，ab</td></tr><tr><td>[]</td><td>匹配指定字符组内的任意一个字符</td><td>/<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>/</td><td>匹配以a或b或c开头的行</td></tr><tr><td>[^]</td><td>匹配不在指定字符组内任意一个字符</td><td><code>/^[^abc]/</code></td><td>匹配不以字母a或b或c开头的行</td></tr><tr><td>()</td><td>子表达式组合</td><td>/(rool)+/</td><td>表示一个或多个rool组合，当有一些字符需要组合时，使用括号括起来</td></tr><tr><td>|</td><td>或者的意思</td><td>/(root)|B/</td><td>匹配root或者B的行</td></tr><tr><td>\</td><td>转义字符</td><td>/a///</td><td>匹配a//</td></tr><tr><td><sub>,!</sub></td><td>匹配，不匹配的条件语句</td><td>$1~/root/</td><td>匹配第一个字段包含字符 root的所有记录</td></tr><tr><td>x{m}x{m,}x{m,n}</td><td>x重复m次x重复至少m次x重复至少m次，但是不超过n次</td><td>/(root) {3}//(root) {3,}//(root) {3,6}/</td><td></td></tr></tbody></table><p>正则应用</p><p>规则表达式</p><p>awk '/REG/{action} ’ file ,/REG/为正则表达式，可以将$0 中，满足条件的记录送入到：action 进行处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;/root/&#123;print$0&#125;&#x27; /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br>operator:x:11:0:operator:/root:/sbin/nologin<br>[root@node-1 ~]<span class="hljs-comment"># awk -F &quot;:&quot; &#x27;$5~/root/&#123;print$0&#125;&#x27; /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br>[root@node-1 ~]<span class="hljs-comment"># ifconfig br0 | awk &#x27;BEGIN&#123;FS=&quot;[[:space:]:]+&quot;&#125;NR==2&#123;print$3&#125;&#x27;</span><br>192.168.0.241<br></code></pre></td></tr></table></figure><p>布尔表达式</p><p>awk ‘布尔表达式{action}’ file 仅当对前面的布尔表达式求值为真时， awk 才执行代码块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk -F: &#x27;$1==&quot;root&quot;&#123;print$0&#125;&#x27; /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br>[root@node-1 ~]<span class="hljs-comment"># awk -F: &#x27;($1==&quot;root&quot;)&amp;&amp;($5==&quot;root&quot;)&#123;print$0&#125;&#x27; /etc/passwd</span><br>root:x:0:0:root:/root:/bin/bash<br></code></pre></td></tr></table></figure><h2 id="awk-的-if、循环和数组">awk 的 if、循环和数组</h2><h3 id="if">if</h3><p>条件语句</p><p>awk 提供了非常好的类似于 C 语言的 if 语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$1</span>==<span class="hljs-string">&quot;foo&quot;</span>)&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$2</span>==<span class="hljs-string">&quot;foo&quot;</span>)&#123;<br><span class="hljs-built_in">print</span><span class="hljs-string">&quot;uno&quot;</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">print</span><span class="hljs-string">&quot;one&quot;</span><br>&#125;<br>  &#125;elseif(<span class="hljs-variable">$1</span>==<span class="hljs-string">&quot;bar&quot;</span>)&#123;<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;two&quot;</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">print</span><span class="hljs-string">&quot;three&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 if 语句还可以将代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">! /matchme/ &#123; <span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span> <span class="hljs-variable">$3</span> <span class="hljs-variable">$4</span> &#125;<br></code></pre></td></tr></table></figure><p>转换成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$0</span> !~ /matchme/ ) &#123;<br><span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span> <span class="hljs-variable">$3</span> <span class="hljs-variable">$4</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while">while</h3><p>循环结构</p><p>我们已经看到了 awk 的 while 循环结构，它等同于相应的 C 语言 while 循环。 awk 还有&quot;do…while&quot;循 环，它在代码块结尾处对条件求值，而不像标准 while 循环那样在开始处求值。</p><p>它类似于其它语言中的&quot;repeat…until&quot;循环。以下是一个示例：</p><p>do…while 示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>count=1do &#123;<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;I get printed at least once no matter what&quot;</span><br>&#125; <span class="hljs-keyword">while</span> ( count !=1 )<br>&#125;<br></code></pre></td></tr></table></figure><p>与一般的 while 循环不同，由于在代码块之后对条件求值， &quot;do…while&quot;循环永远都至少执行一次。换句 话说，当第一次遇到普通 while 循环时，如果条件为假，将永远不执行该循环。</p><h3 id="for-循环">for 循环</h3><p>awk 允许创建 for 循环，它就象 while 循环，也等同于 C 语言的 for 循环：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ( initial assignment; comparison; increment ) &#123;<br>code block<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是一个简短示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ( x=1;x&lt;=4;x++ ) &#123;<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;iteration&quot;</span>, x<br>&#125;<br></code></pre></td></tr></table></figure><p>break 和 continue</p><p>此外，如同 C 语言一样， awk 提供了 break 和 continue 语句。使用这些语句可以更好地控制 awk 的 循环结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/awk</span><br>BEGIN&#123;<br>x=1<br><span class="hljs-keyword">while</span>(1) &#123;<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;iteration&quot;</span>,x<br><span class="hljs-keyword">if</span> ( x==10 )&#123;<br><span class="hljs-built_in">break</span><br>&#125;<br>x++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>continue 语句补充了 break</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">x=1<br><span class="hljs-keyword">while</span> (1) &#123;<br><span class="hljs-keyword">if</span> ( x==4 ) &#123;<br>x++<br><span class="hljs-built_in">continue</span><br>&#125;<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;iteration&quot;</span>, x<br><span class="hljs-keyword">if</span> ( x&gt;20 ) &#123;<br><span class="hljs-built_in">break</span><br>&#125;<br>x++<br>&#125;<br></code></pre></td></tr></table></figure><p>continue在for中使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/awk</span><br>BEGIN&#123;<br><span class="hljs-keyword">for</span> (x=1;x&lt;=21;x++)&#123;<br><span class="hljs-keyword">if</span> (x==4)&#123;<br><span class="hljs-built_in">continue</span><br>&#125;<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;iteration&quot;</span>,x<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组">数组</h3><p>AWK 中的数组都是关联数组,数字索引也会转变为字符串索引</p><p>在awk中，数组叫关联数组，与我们在其它编程语言中的数组有很大的区别。关联数组，简单来说，类 似于python语言中的dict、java语言中的map，其下标不再局限于数值型，而可以是字符串，即下标为 key，value=array[key]。竟然为key，那其下标也不再是有序的啦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/awk</span><br>BEGIN&#123;<br>    cities[1]=<span class="hljs-string">&quot;beijing&quot;</span><br>    cities[2]=<span class="hljs-string">&quot;shanghai&quot;</span><br>    cities[<span class="hljs-string">&quot;three&quot;</span>]=<span class="hljs-string">&quot;guangzhou&quot;</span><br>    <span class="hljs-keyword">for</span>( c <span class="hljs-keyword">in</span> cities) &#123;<br>    <span class="hljs-built_in">print</span> cities[c]<br>    &#125;<br>    <span class="hljs-built_in">print</span> cities[1]<br>    <span class="hljs-built_in">print</span> cities[<span class="hljs-string">&quot;1&quot;</span>]<br>    <span class="hljs-built_in">print</span> cities[<span class="hljs-string">&quot;three&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>用 awk 中查看服务器连接状态并汇总</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># netstat -an|awk &#x27;/^tcp/&#123;++s[$NF]&#125;END&#123;for(a in s)printa,s[a]&#125;&#x27;</span><br>LISTEN 8<br>ESTABLISHED 1<br></code></pre></td></tr></table></figure><h2 id="常用字符串函数">常用字符串函数</h2><p><img src="image-20220812093929092.png" alt="常用字符串函数"></p><p>字符串函数的应用</p><p>在 info 中查找满足正则表达式， /[0-9]+/ 用”!”替换，并且替换后的值，赋值给 info</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;gsub(/[0-9]+/,&quot;!&quot;,info);print info&#125;&#x27;</span><br>this is a <span class="hljs-built_in">test</span>!<span class="hljs-built_in">test</span>!<br></code></pre></td></tr></table></figure><p>如果查找到数字则匹配成功返回 ok，否则失败，返回未找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;printindex(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span><br>ok<br></code></pre></td></tr></table></figure><p>从第 4 个 字符开始，截取 10 个长度字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print</span><br>substr(info,4,10);&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">s is a tes</span><br></code></pre></td></tr></table></figure><p>分割 info,动态创建数组 tA,awk for …in 循环，是一个无序的循环。 并不是从数组下标1…n 开始</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># awk &#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print</span><br>length(tA);<span class="hljs-keyword">for</span>(k <span class="hljs-keyword">in</span> tA)&#123;<span class="hljs-built_in">print</span> k,tA[k];&#125;&#125;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">4</span><br><span class="hljs-string">4 test</span><br><span class="hljs-string">1 this</span><br><span class="hljs-string">2 is</span><br><span class="hljs-string">3 a</span><br></code></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>abc <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文本三剑客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件管理</title>
    <link href="/20220905/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/20220905/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><ul class="lvl-0"><li class="lvl-2"><p>绝对路径</p><ul class="lvl-2"><li class="lvl-4">路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录</li></ul></li><li class="lvl-2"><p>相对路径</p><ul class="lvl-2"><li class="lvl-4">路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以 写成： cd …/man 这就是相对路径的写法。</li></ul></li></ul><h1>文件管理命令</h1><p>几个常见的处理目录的命令</p><ul class="lvl-0"><li class="lvl-2"><p>ls（英文全拼：list files）: 列出目录及文件名</p></li><li class="lvl-2"><p>cd（英文全拼：change directory）：切换目录</p></li><li class="lvl-2"><p>pwd（英文全拼：print work directory）：显示目前的目录</p></li><li class="lvl-2"><p>mkdir（英文全拼：make directory）：创建一个新的目录</p></li><li class="lvl-2"><p>rmdir（英文全拼：remove directory）：删除一个空的目录</p></li><li class="lvl-2"><p>cp（英文全拼：copy file）: 复制文件或目录</p></li><li class="lvl-2"><p>rm（英文全拼：remove）: 删除文件或目录</p></li><li class="lvl-2"><p>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</p></li></ul><h2 id="touch（创建新文件）">touch（创建新文件）</h2><p>用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch 文件名<br></code></pre></td></tr></table></figure><h3 id="实例">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>创建新空白文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# touch newfile<br></code></pre></td></tr></table></figure><h2 id="mkdir-创建新目录">mkdir (创建新目录)</h2><p>创建新的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir [-mpv] 目录名称<br></code></pre></td></tr></table></figure><h3 id="选项">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-m：配置文件的权限喔！直接配置，不需要看默认权限 (umask)<strong>(自己没有试验成功)</strong></p></li><li class="lvl-2"><p>-p：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</p></li><li class="lvl-2"><p>-v:显示目录创建的过程</p></li></ul><h3 id="实例-2">实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir dir<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个新的文件夹叫<span class="hljs-built_in">dir</span></span><br>[root@localhost ~]# mkdir a/b/c<br>mkdir: 无法创建目录&quot;a/b/c&quot;: 没有那个文件或目录<br><span class="hljs-meta prompt_"># </span><span class="language-bash">无法直接创建多层目录</span><br>[root@localhost ~]# mkdir -p a/b/c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">加上-p选项之后可以自动创建父级目录</span><br>[root@localhost ~]# mkdir -pv dir1/dir2<br>mkdir: 已创建目录 &quot;dir1&quot;<br>mkdir: 已创建目录 &quot;dir1/dir2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示详细的创建过程</span><br></code></pre></td></tr></table></figure><h2 id="cp-复制文件或目录">cp (复制文件或目录)</h2><p>拷贝文件和目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp [选项]... 源文件... 目录<br></code></pre></td></tr></table></figure><h3 id="选项-2">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-a：相当于 -pdr 的意思，至于 pdr 请参考下列说明；(常用)</p></li><li class="lvl-2"><p>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p></li><li class="lvl-2"><p>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p></li><li class="lvl-2"><p>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p></li><li class="lvl-2"><p>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</p></li><li class="lvl-2"><p>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p></li><li class="lvl-2"><p>-r：递归持续复制，用於目录的复制行为；(常用)</p></li><li class="lvl-2"><p>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p></li><li class="lvl-2"><p>-u：若 destination 比 source 旧才升级 destination ！</p></li><li class="lvl-2"><p>-v：显示复制的详细过程</p></li></ul><h3 id="实例-3">实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir /home/dir&#123;1,2&#125;<br>[root@localhost ~]# touch install.log<br>[root@localhost ~]# cp -v install.log /home/dir1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制文件到目录下</span><br>[root@localhost ~]# cp -v install.log /home/dir1/abc.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制文件到目录下，并且重命名为abc.txt</span><br>[root@localhost ~]# cp -rv /etc /home/dir1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制目录</span><br>[root@localhost ~]# cp -rv /etc/sysconfig/network-scripts/ifcfg-ens33<br>/etc/passwd /etc/hostname /home/dir2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将多个文件复制到同一个目录</span><br>[root@localhost ~]# cp -rv /etc/sysconfig/network-scripts/ifcfg-ens33<br>/etc/passwd /etc/hostname .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将多个文件复制到当前目录</span><br>[root@localhost ~]# type -a cp<br>cp 是 `cp -i&#x27; 的别名<br>cp 是 /usr/bin/cp<br>[root@localhost ~]# cp -rv /etc/sysconfig/network-scripts/ifcfg-ens33<br>/etc/sysconfig/network-scripts/ifcfg-ens33.bak<br>[root@localhost ~]# cp -rv /etc/sysconfig/network-scripts/&#123;ifcfgens33,ifcfg-ens33.bak&#125;<br>[root@localhost ~]# cp -rv /etc/sysconfig/network-scripts/ifcfg-ens33&#123;,-old&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份配置文件</span><br></code></pre></td></tr></table></figure><h2 id="mv-移动文件与目录，或修改名称">mv(移动文件与目录，或修改名称)</h2><p>移动文件与目录，或修改名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv [选项]... 源文件... 目录<br></code></pre></td></tr></table></figure><h3 id="选项-3">选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mv file1 /home/dir3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将file1移动到/home/dir3</span><br>[root@localhost ~]# mv file2 /home/dir3/file20<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将file2移动到/home/dir3，并且改名file20</span><br>[root@localhost ~]# mv file4 file5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将file4改名为file5</span><br></code></pre></td></tr></table></figure><h2 id="rm-移除文件或目录">rm (移除文件或目录)</h2><p>移除文件或目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm [选项]... 文件...<br></code></pre></td></tr></table></figure><h3 id="选项-4">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-f：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</p></li><li class="lvl-2"><p>-i：互动模式，在删除前会询问使用者是否动作</p></li><li class="lvl-2"><p>-r：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</p></li></ul><h3 id="实例-4">实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cd /home<br>[root@localhost home]# rm -rf dir1<br></code></pre></td></tr></table></figure><h1>文本文件查看</h1><p>在Linux中一切皆文件，说的就是Linux利用文本文件来保存系统所有的设置。 我们在Linux中想实现一个功能，不可避免的需要查看文本文件，修改文本文件。</p><h2 id="cat">cat</h2><p>用于打开文本文件并显示出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat [选项]... [文件]...<br></code></pre></td></tr></table></figure><h3 id="选项-5">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-n：由 1 开始对所有输出的行数编号</p></li><li class="lvl-2"><p>-b：和 -n 相似，只不过对于空白行不编号。</p></li><li class="lvl-2"><p>-s：当遇到有连续两行以上的空白行，就代换为一行的空白行。</p></li><li class="lvl-2"><p>-A：显示控制字符。</p></li></ul><h3 id="实例-5">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查看anaconda-ks.cfg文件</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat anaconda-ks.cfg<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看anaconda-ks.cfg文件，并且显示行号</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat -n anaconda-ks.cfg<br></code></pre></td></tr></table></figure><h2 id="less">less</h2><p>可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页</p><h3 id="实例-6">实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# less anaconda-ks.cfg<br></code></pre></td></tr></table></figure><h2 id="head">head</h2><p>查看文件的开头部分的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">head [选项]... [文件]...<br></code></pre></td></tr></table></figure><h3 id="选项-6">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-q：隐藏文件名，默认是隐藏</p></li><li class="lvl-2"><p>-v：显示文件名</p></li><li class="lvl-2"><p>-c&lt;数目&gt;：显示的字节数。</p></li><li class="lvl-2"><p>-n&lt;行数&gt;：显示的行数。</p></li></ul><h3 id="实例-7">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查看文件的前6行</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# head -n 6 anaconda-ks.cfg<br></code></pre></td></tr></table></figure><h2 id="tail">tail</h2><p>会把文本文件里的最尾部的内容显示在屏幕上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail [选项]... [文件]...<br></code></pre></td></tr></table></figure><h3 id="参数">参数</h3><ul class="lvl-0"><li class="lvl-2"><p>-f：循环读取</p></li><li class="lvl-2"><p>-q：隐藏文件名，默认隐藏</p></li><li class="lvl-2"><p>-v：显示文件名</p></li><li class="lvl-2"><p>-c&lt;数目&gt;：显示的字节数</p></li><li class="lvl-2"><p>-n&lt;行数&gt;：显示文件的尾部 n 行内容</p></li><li class="lvl-2"><p>-s：与-f合用,表示在每次反复的间隔休眠S秒</p></li></ul><h3 id="实例-8">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查看文件anaconda-ks.cfg尾部的3行</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# tail -n 3 anaconda-ks.cfg<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看日志的实时更新情况</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# tail -f /var/log/messages<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl+c退出</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看文件anaconda-ks.cfg从第10行到结尾</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# tail -n +10 anaconda-ks.cfg<br></code></pre></td></tr></table></figure><h2 id="grep">grep</h2><p>针对文件内容进行过滤，本工具属于文本三剑客，后续会详细讲解，目前只要求初学者掌握最基本的实 例即可</p><h3 id="实例-9">实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@xwz ~]<span class="hljs-comment"># grep &#x27;root&#x27; /etc/passwd</span><br><span class="hljs-comment"># 在/etc/passwd的文件中找出有root的行</span><br>[root@xwz ~]<span class="hljs-comment"># grep &#x27;^root&#x27; /etc/passwd</span><br><span class="hljs-comment"># 在/etc/passwd中找出root开头的行</span><br>[root@xwz ~]<span class="hljs-comment"># grep &#x27;bash$&#x27; /etc/passwd</span><br><span class="hljs-comment"># 在/etc/passwd中找出bash结尾的行</span><br></code></pre></td></tr></table></figure><h1>文本文件编辑</h1><p>在Linux中只掌握文本查看是远远不够的，我们还需要掌握编辑文本文件</p><p>Linux上也有图形化的文本编辑器，类似于windows的记事本，但是很多时候我们只能用命令行来管理 Linux操作系统，所以必须要掌握命令行的文本编辑器软件。</p><p>目前常见的命令行文本编辑器</p><ul class="lvl-0"><li class="lvl-2"><p>nano：在debain系列的系统上会比较常见，但是其他的Linux发行版也都可以安装</p></li><li class="lvl-2"><p>vi：所有的 Unix Like 系统都会内建 vi 文本编辑器，其他的文本编辑器则不一定会存在。</p></li><li class="lvl-2"><p>vim：具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p></li></ul><p>目前vim是使用的最多的，也是比较推荐的，下面就来讲一下vim</p><h2 id="什么是-vim？">什么是 vim？</h2><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程 序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以 说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim是一个纯命令行文本编辑器，很多文本编辑的功能都是通过键盘快捷键的方式完成，所以我们需要 记住常用的键位，在vim官方网站上我们可以找到vim键盘图的完整版，不过对于初学者来说，我们只需 要知道常用的就可以了。</p><p><img src="image-20220905121604004.png" alt="Vim键盘图"></p><h2 id="vi-vim-的使用">vi/vim 的使用</h2><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和 末行模式（Last line mode）。 这三种模式的作用分别是：</p><h3 id="命令模式">命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下 i ，并不会输入一个字 符， i 被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul class="lvl-0"><li class="lvl-2"><p>i切换到输入模式，以输入字符。</p></li><li class="lvl-2"><p>x删除当前光标所在处的字符。</p></li><li class="lvl-2"><p>:切换到末行模式，以在最底一行输入命令。</p></li></ul><p>:切换到末行模式，以在最底一行输入命令。</p><p>命令模式只有一些最基本的命令，因此仍要依靠末行模式输入更多命令。</p><h3 id="输入模式">输入模式</h3><p>在命令模式下按下 i 就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>字符按键以及Shift组合</strong>，输入字符</p></li><li class="lvl-2"><p><strong>ENTER</strong>，回车键，换行</p></li><li class="lvl-2"><p><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</p></li><li class="lvl-2"><p><strong>DEL</strong>，删除键，删除光标后一个字符</p></li><li class="lvl-2"><p><strong>方向键</strong>，在文本中移动光标</p></li><li class="lvl-2"><p><strong>HOME/END</strong>，移动光标到行首/行尾</p></li><li class="lvl-2"><p><strong>Page Up/Page Down</strong>，上/下翻页</p></li><li class="lvl-2"><p><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</p></li><li class="lvl-2"><p><strong>ESC</strong>，退出输入模式，切换到命令模式</p></li></ul><h3 id="末行模式">末行模式</h3><p>在命令模式下按下 : （英文冒号）就进入了末行模式。</p><p>末行模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在末行模式中，基本的命令有</p><ul class="lvl-0"><li class="lvl-2"><p>:q退出程序</p></li><li class="lvl-2"><p>:w保存文件</p></li></ul><p>按ESC键可随时退出末行模式。</p><p>简单的说，我们可以将这三个模式的关系用下图来表示：</p><p><img src="image-20220905121640123.png" alt="关系图"></p><h2 id="vi-vim使用实例">vi/vim使用实例</h2><p>有些linux发行套件上并没有安装vim，我们可以安装一下，下面提供了centos的安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum -y install vim<br><span class="hljs-meta prompt_"># </span><span class="language-bash">yum是在线安装软件的命令，后面会有详细的介绍，这边直接使用</span><br></code></pre></td></tr></table></figure><p>vi和vim大部分的操作完全一模一样，所以会使用vim自然也会使用vi</p><h3 id="编辑一个文档">编辑一个文档</h3><p>直接输入 vim 文件名 就能够进入 vim 的一般模式了。请注意，记得 vim 后面一定要加文件名，不管该 文件存在与否！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim file.txt<br></code></pre></td></tr></table></figure><p>输入这条命令之后，会看到如下画面</p><p><img src="image-20220905121659388.png" alt=""></p><p>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</p><p>在命令模式之中，只要按下 i , o , a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 --INSERT-- 的字样，那就是可以输入任意字符的 提示。</p><p>这个时候，键盘上除了 Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进 行任何的编辑。</p><p><img src="image-20220905121713424.png" alt=""></p><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按 下 Esc 这个按钮即可！马上你就会发现画面左下角 --INSERT-- 的不见了！</p><p><img src="image-20220905121732915.png" alt=""></p><p>输入:wq后回车即可保存离开，注意其中的冒号必须是英文输入法下的冒号</p><p><img src="image-20220905121747514.png" alt=""></p><p>现在我们就成功创建了一个文件，查看文件的内容吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls -lh file.txt<br>[root@localhost ~]# cat file.txt<br></code></pre></td></tr></table></figure><h2 id="vi-vim按键说明">vi/vim按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p>下面将会列举出vim非常多的常用按键，初学者只需要浏览一遍，记住大概vim有哪些功能，等后面大量 使用vim的时候，再来翻阅笔记，并且在多次使用中把这些功能记住。</p><h3 id="命令模式-2">命令模式</h3><p>下面的操作都是在命令模式下进行的</p><p>移动光标的方法</p><table><thead><tr><th>h 或 向左 箭头键 (←)</th><th>光标向左移动一个字符</th></tr></thead><tbody><tr><td>j 或 向下 箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上 箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右 箭头键 (→)</td><td>光标向右移动一个字符</td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。</td></tr><tr><td>0 或功能 键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>$ 或功能 键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>移动到这个档案的最后一行(常用）</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可 配合 :set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td>n</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><p><strong>删除/剪切、复制与粘贴</strong></p><table><thead><tr><th>x, X</th><th>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相 当于 [backspace] 亦即是退格键) (常用)</th></tr></thead><tbody><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>删除/剪切光标所在的那一整行(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除/剪切光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d2G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除光标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p,P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在光标上一行！ 举例来说，我目前光 标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td>j</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10c ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>.</td><td>重复前一个动作。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好 了！ (常用)</td></tr></tbody></table><p><strong>进入输入或取代的编辑模式</strong></p><table><thead><tr><th>i, I</th><th>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的 第一个非空格符处开始输入』。 (常用)</th></tr></thead><tbody><tr><td>a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为 『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行 处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光 标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><p>末行模式下的储存、离开等指令</p><table><thead><tr><th>:w</th><th>将编辑的数据写入硬盘中(常用)</th></tr></thead><tbody><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该文件。不过，到底能不能写入， 还是跟你对 该文件的权限有关</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过文件，又不想储存，使用 ! 为强制离开不储存。</td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退 出)</td></tr><tr><td>:x</td><td>效果等同于(保存并退出)</td></tr><tr><td>:X</td><td>大写的X，用于加密文件</td></tr><tr><td>ZQ</td><td>不保存，强制退出。效果等同于:q!。</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个文件（类似文件另存为）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个文件的数据。亦即将 『filename』 这个文件内容加 到光标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个文件。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到bash命令行下执行 command 的显示结果！例如 『:! ls /home』即 可在 vi 当中察看 /home 底下以 ls 输出的文件信息！</td></tr></tbody></table><p>vim环境变量修改</p><table><thead><tr><th>:set nu</th><th>显示行号，设定之后，会在每一行的前缀显示该行的行号</th></tr></thead><tbody><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令行</title>
    <link href="/20220905/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <url>/20220905/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1>初识shell</h1><p>虽然我们已经安装好了系统，但是光会安装不会操作是不够的。我们还要像玩手机一样熟悉并记忆操作方法。</p><p>shell是系统的用户界面,提供了用户与内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行。实际上shell是一个命令解释器，它解释用户输入的命令并且把用户的意图传达给内核。 （可以理解为用户与内核之间的翻译官角色）</p><p><img src="image-20220712181206947.png" alt="Shell是什么"></p><p>我们可以使用shell实现对Linux系统单的大部分管理，例如：</p><ol><li class="lvl-3"><p>文件管理</p></li><li class="lvl-3"><p>用户管理</p></li><li class="lvl-3"><p>权限管理</p></li><li class="lvl-3"><p>磁盘管理</p></li><li class="lvl-3"><p>软件管理</p></li><li class="lvl-3"><p>网络管理</p></li></ol><p>使用shell的两种方式</p><ul class="lvl-0"><li class="lvl-2"><p>交互式命令行</p><ul class="lvl-2"><li class="lvl-4">默认等待用户输入命令，输入一行回车后执行一行命令</li><li class="lvl-4">效率低 适合少量的工作</li></ul></li><li class="lvl-2"><p>shell脚本</p><ul class="lvl-2"><li class="lvl-4"><p>将需要执行的命令和逻辑判断语句都写入一个文件中，一起运行</p></li><li class="lvl-4"><p>效率高 适合完成复杂，重复性工作</p></li></ul></li></ul><h1>bash shell提示符</h1><p>登录Linux系统之后，默认进入交互式的命令行界面，在光标前边会出现提示符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment">#</span><br>[用户名@主机名 目录名]权限标识<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>用户名</p><ul class="lvl-2"><li class="lvl-4">当前登录的用户</li></ul></li><li class="lvl-2"><p>主机名</p><ul class="lvl-2"><li class="lvl-4">当前这台主机的名字，默认叫 localhost</li></ul></li><li class="lvl-2"><p>目录名</p><ul class="lvl-2"><li class="lvl-4"><p>当前光标所在的目录</p></li><li class="lvl-4"><p>当前光标所在的目录</p></li></ul></li><li class="lvl-2"><p>权限标识</p><ul class="lvl-2"><li class="lvl-4">超级管理员权限就表示为 #</li><li class="lvl-4">普通用户标识为 $</li></ul></li></ul><p>这个提示符格式被 $PS1 控制，我们可以查看这个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># echo $PS1</span><br>[\u@\h \W]\$<br><span class="hljs-comment"># \u表示是用户名 \h表示的是主机名 \W表示的当前所在目录 \$是权限标识</span><br>[root@localhost ~]<span class="hljs-comment"># export PS1=&quot;&#123;\u@\h&#125;\W \$&quot;</span><br>&#123;root@localhost&#125;~ $<br><span class="hljs-comment"># 可以通过export命令修改PS1变量，让提示符可以根据你的习惯变化</span><br></code></pre></td></tr></table></figure><h1>shell语法</h1><p>命令 选项 参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cal --year -m 2020<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>命令</p><ul class="lvl-2"><li class="lvl-4">cal 是命令，用于查看日历</li></ul></li><li class="lvl-2"><p>选项</p><ul class="lvl-2"><li class="lvl-4">–year 是选项，表示显示一整年，这个是一个长选项，也就是单词都拼全了，需要两条 - 符号</li><li class="lvl-4">-m 是短选项，是首字母，表示每个星期的星期一作为第一天</li><li class="lvl-4">对于有些命令而言，可以不写选项，这样命令会有个默认的行为</li><li class="lvl-4">短选项可以多个合并在一起，比如上面的命令可以写成 -ym 其中y是year简写，可以和m写在 一起，而长选项不支持写在一起</li></ul></li><li class="lvl-2"><p>参数</p><ul class="lvl-2"><li class="lvl-4">2020 是参数，参数是命令作用的对象，表示查看的是2020年的日历</li></ul></li></ul><p>我们也可以查看这个命令的所有选项</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">[root@localhost ~]# cal --help<br>用法：<br>cal [选项] [[[日] 月] 年]<br>选项：<br><span class="hljs-number">-1</span>, --one 只显示当前月份(默认)<br><span class="hljs-number">-3</span>, --three 显示上个月、当月和下个月<br>-s, --sunday 周日作为一周第一天<br>-m, --monday 周一用为一周第一天<br>-j, --julian 输出儒略日<br>-y, --year 输出整年<br>-V, --version 显示版本信息并退出<br>-h, --help 显示此帮助并退出<br></code></pre></td></tr></table></figure><h1>常用命令</h1><p>Linux的常见命令比较多，这边只列出初学者最常用的部分命令，大家可以根据命令意思去进行练习。</p><p>注意Linux会准确的识别出命令的大小写，所以大家需要注意大小写的问题。命令选项和参数之间是用空格进行分隔，请大家在输入的时候注意不要缺失空格。</p><p>学习Linux最重要的就是以下三个方面</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 命令的积累<br><span class="hljs-bullet">2.</span> 原理的掌握<br><span class="hljs-bullet">3.</span> 大量的实战<br></code></pre></td></tr></table></figure><p>下面就是开始第一步，积累基础的命令</p><h2 id="ls">ls</h2><p>用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ls <span class="hljs-selector-attr">[-alrtAFR]</span> <span class="hljs-selector-attr">[name...]</span><br></code></pre></td></tr></table></figure><h3 id="选项">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-a：显示所有文件及目录 (.开头的隐藏文件也会列出)</p></li><li class="lvl-2"><p>-l：除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</p></li><li class="lvl-2"><p>-r：将文件以相反次序显示(原定依英文字母次序)</p></li><li class="lvl-2"><p>-t：将文件依建立时间之先后次序列出</p></li><li class="lvl-2"><p>-A：同 -a ，但不列出 “.” (目前目录) 及 “…” (父目录)</p></li><li class="lvl-2"><p>-F：在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/”</p></li><li class="lvl-2"><p>-R：若目录下有文件，则以下之文件亦皆依序列出</p></li><li class="lvl-2"><p>-h：将显示出来的文件大小以合适的单位显示出来</p></li></ul><h3 id="实例">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查看当前目录下的文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># ls</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看根目录下的文件，查看/usr目录下的文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># ls /</span><br>[root@localhost ~]<span class="hljs-comment"># ls /usr</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看当前目录下所有文件，包括隐藏文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># ls -a</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看当前目录下文件详情，包括隐藏文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># ls -lha</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看当前目录下的文件，并且显示出目录，文件，程序的区别</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># ls -F</span><br>anaconda-ks.cfg dirb/ dird/ file2 file4 ping*<br>dira/ dirc/ dire/ file1 file3 file5<br><span class="hljs-comment"># 可以看到普通文件只有文件名，可执行文件后面带*，文件夹后面带/</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看当前目录下的文件，如果有文件夹，那么将文件夹中的文件也显示出来</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># ls -FR</span><br><span class="hljs-comment"># dir这是一个目录，在这个目录下的文件也全部显示出来</span><br>[root@localhost ~]<span class="hljs-comment"># ls -FRl</span><br><span class="hljs-comment"># 显示详细的信息</span><br></code></pre></td></tr></table></figure><h3 id="扩展知识">扩展知识</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># ls -ahl</span><br>总用量 24K<br>dr-xr-x---. <span class="hljs-number">3</span> root root <span class="hljs-number">139</span> <span class="hljs-number">4</span>月 <span class="hljs-number">2</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span> .<br>dr-xr-xr-x. <span class="hljs-number">17</span> root root <span class="hljs-number">224</span> <span class="hljs-number">6</span>月 <span class="hljs-number">21</span> <span class="hljs-number">2020</span> ..<br>-rw-------. <span class="hljs-number">1</span> root root <span class="hljs-number">128</span> <span class="hljs-number">4</span>月 <span class="hljs-number">2</span> 09:<span class="hljs-number">37</span> .bash_history<br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">18</span> <span class="hljs-number">12</span>月 <span class="hljs-number">29</span> <span class="hljs-number">2013</span> .bash_logout<br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">176</span> <span class="hljs-number">12</span>月 <span class="hljs-number">29</span> <span class="hljs-number">2013</span> .bash_profile<br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">176</span> <span class="hljs-number">12</span>月 <span class="hljs-number">29</span> <span class="hljs-number">2013</span> .bashrc<br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">100</span> <span class="hljs-number">12</span>月 <span class="hljs-number">29</span> <span class="hljs-number">2013</span> .cshrc<br>drwxr-xr-x. <span class="hljs-number">2</span> root root <span class="hljs-number">32</span> <span class="hljs-number">4</span>月 <span class="hljs-number">2</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span> <span class="hljs-built_in">dir</span><br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">129</span> <span class="hljs-number">12</span>月 <span class="hljs-number">29</span> <span class="hljs-number">2013</span> .tcshrc<br>-rw-r--r--. <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> <span class="hljs-number">4</span>月 <span class="hljs-number">2</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span> test.txt<br></code></pre></td></tr></table></figure><ol><li class="lvl-3"><p>第一列共10位，第1位表示文档类型， d 表示目录， - 表示文件， l 表示链接文件， d 表示可随机 存取的设备，如U盘等， c 表示一次性读取设备，如鼠标、键盘等。后9位，依次对应三种身份所拥 有的权限，身份顺序为：owner、group、others，权限顺序为：readable、writable、 excutable。如： -r-xr-x— 的含义为<strong>当前文档是一个文件，拥有者可读、可执行，同一个群组下的 用户，可读、可写，其他人没有任何权限。</strong></p></li><li class="lvl-3"><p>第二列表示链接数，表示有多少个文件链接到inode号码。</p></li><li class="lvl-3"><p>第三列表示拥有者</p></li><li class="lvl-3"><p>第四列表示所属群组</p></li><li class="lvl-3"><p>第五列表示文档容量大小，单位字节</p></li><li class="lvl-3"><p>第六列表示文档最后修改时间，注意不是文档的创建时间哦</p></li><li class="lvl-3"><p>第七列表示文档名称。以点(.)开头的是隐藏文档</p></li></ol><h2 id="cd">cd</h2><p>用于切换当前工作目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cd [dirName]<br></code></pre></td></tr></table></figure><h3 id="实例-2">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>跳转到 /usr/bin 目录下</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># cd /usr/bin</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>跳到自己的 home 目录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost <span class="hljs-built_in">bin</span>]<span class="hljs-comment"># cd ~</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>跳到目前目录的上一层</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># cd ..</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>跳转到之前所在的位置</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># cd -</span><br></code></pre></td></tr></table></figure><h2 id="pwd">pwd</h2><p>显示工作目录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwd</span><span class="hljs-meta"> [-LP]</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>-L 打印 $PWD 变量的值，如果它命名了当前的工作目录</p></li><li class="lvl-2"><p>-P 打印当前的物理路径，不带有任何的符号链接</p></li></ul><p>默认情况下， pwd 的行为和带 -L 选项一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># export PWD=/usr/bin</span><br>[root@localhost <span class="hljs-built_in">bin</span>]<span class="hljs-comment">#</span><br><span class="hljs-comment"># 修改了$PWD变量，会导致当前光标的路径发生变化,只是显示切换了，但是实际目录没有修改</span><br></code></pre></td></tr></table></figure><h2 id="clear">clear</h2><p>用于清除屏幕</p><p>使用快捷键 ctrl+l 也可以实现一样的效果</p><h2 id="echo">echo</h2><p>用于字符串的输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">echo [-neE] 字符串<br></code></pre></td></tr></table></figure><h3 id="选项-2">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-n：不输出行尾的换行符</p></li><li class="lvl-2"><p>-e：允许对下面列出的加反斜线转义的字符进行解释</p><ul class="lvl-2"><li class="lvl-4">\  反斜线</li><li class="lvl-4">\a  报警符(BEL)</li><li class="lvl-4">\b  退格符</li><li class="lvl-4">\c  禁止尾随的换行符</li><li class="lvl-4">\f  换页符</li><li class="lvl-4">\n  换行符</li><li class="lvl-4">\r  回车符</li><li class="lvl-4">\t  水平制表符</li><li class="lvl-4">\v  纵向制表符</li></ul></li><li class="lvl-2"><p>-E 禁止对在STRINGs中的那些序列进行解释</p></li></ul><h3 id="实例-3">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>显示出 hello world</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># echo &quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>用两行显示出 hello world</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># echo -e &quot;hello\nworld&quot;</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>输出 hello world 的时候让系统发出警报音</p></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># echo -e <span class="hljs-string">&quot;hello\aworld&quot;</span></span><br></code></pre></td></tr></table></figure><h1>系统命令</h1><h2 id="poweroff">poweroff</h2><p>用于关闭计算器并切断电源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">poweroff [-n] [-w] [-d] [-f] [-i] [-h]<br></code></pre></td></tr></table></figure><h3 id="选项-3">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-n: 在关机前不做将记忆体资料写回硬盘的动作</p></li><li class="lvl-2"><p>-w: 并不会真的关机，只是把记录写到 /var/log/wtmp 档案里</p></li><li class="lvl-2"><p>-d: 不把记录写到 /var/log/wtmp 文件里</p></li><li class="lvl-2"><p>-i: 在关机之前先把所有网络相关的装置先停止</p></li><li class="lvl-2"><p>-p: 关闭操作系统之前将系统中所有的硬件设置为备用模式。</p></li></ul><h2 id="reboot">reboot</h2><p>用来重新启动计算机</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">用来重新启动计算机<br></code></pre></td></tr></table></figure><h3 id="选项-4">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-n: 在关机前不做将记忆体资料写回硬盘的动作</p></li><li class="lvl-2"><p>-w: 并不会真的关机，只是把记录写到 /var/log/wtmp 档案里</p></li><li class="lvl-2"><p>-d: 不把记录写到 /var/log/wtmp 文件里（-n 这个参数包含了 -d）</p></li><li class="lvl-2"><p>-f: 强迫重开机，不呼叫 shutdown 这个指令</p></li><li class="lvl-2"><p>-i: 在重开机之前先把所有网络相关的装置先停止</p></li></ul><h2 id="whoami">whoami</h2><p>用于显示自身用户名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># whoami</span><br>root<br></code></pre></td></tr></table></figure><h1>快捷键</h1><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>^C</td><td>终止前台运行的程序</td></tr><tr><td>^C</td><td>退出 等价exit</td></tr><tr><td>^L</td><td>清屏</td></tr><tr><td>^A</td><td>光标移动到命令行的最前端</td></tr><tr><td>^E</td><td>光标移动到命令行的后端</td></tr><tr><td>^U</td><td>删除光标前所有字符</td></tr><tr><td>^K</td><td>删除光标后所有字符</td></tr><tr><td>^K</td><td>搜索历史命令，利用关键词</td></tr></tbody></table><h1>帮助命令</h1><h2 id="history">history</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">history [<span class="hljs-built_in">n</span>] <span class="hljs-built_in">n</span>为数字，列出最近的<span class="hljs-built_in">n</span>条命令<br></code></pre></td></tr></table></figure><h3 id="选项-5">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-c：将目前shell中的所有history命令消除</p></li><li class="lvl-2"><p>-a：将目前新增的命令写入histfiles, 默认写入 ~/.bash_history</p></li><li class="lvl-2"><p>-r：将histfiles内容读入到目前shell的history记忆中</p></li><li class="lvl-2"><p>-w：将目前history记忆的内容写入到histfiles</p></li></ul><h3 id="实例-4">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>将history的内容写入一个新的文件中</p></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># history -w histfiles.txt</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>清空所有的history记录，注意并不清空 ~/.bash_history 文件</p></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhos</span> t ~]<span class="hljs-meta"># history -c</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用 ! 执行历史命令。</p></li><li class="lvl-2"><p>! number 执行第几条命令</p></li><li class="lvl-2"><p>! command 从最近的命令查到以 command 开头的命令执行</p></li><li class="lvl-2"><p>! !执行上一条</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># history</span><br>    <span class="hljs-number">1</span> history<br>    <span class="hljs-number">2</span> cat .bash_history<br>    <span class="hljs-number">3</span> ping -c <span class="hljs-number">3</span> baidu.com<br>    <span class="hljs-number">4</span> history<br>[root@localhost ~]<span class="hljs-comment"># !3</span><br><span class="hljs-comment"># 这里是执行第三条命令的意思</span><br></code></pre></td></tr></table></figure><h2 id="help">help</h2><p>显示命令的帮助信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span> [-dms] [内置命令]<br></code></pre></td></tr></table></figure><h3 id="选项-6">选项</h3><ul class="lvl-0"><li class="lvl-2"><p>-d：输出每个主题的简短描述</p></li><li class="lvl-2"><p>-m：以伪 man 手册的格式显示使用方法</p></li><li class="lvl-2"><p>-s：为每一个匹配 PATTERN 模式的主题仅显示一个用法</p></li></ul><h4 id="实例-5">实例</h4><ul class="lvl-0"><li class="lvl-2"><p>查看echo的帮助信息</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># help echo</span><br></code></pre></td></tr></table></figure><h2 id="man">man</h2><p>显示在线帮助手册页</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-keyword">man</span> 需要帮助的命令或者文件<br></code></pre></td></tr></table></figure><h3 id="快捷键">快捷键</h3><table><thead><tr><th>按键</th><th>用途</th></tr></thead><tbody><tr><td>空格键</td><td>向下翻一页</td></tr><tr><td>PaGe down</td><td>向下翻一页</td></tr><tr><td>PaGe up</td><td>向上翻一页</td></tr><tr><td>home</td><td>直接前往首页</td></tr><tr><td>end</td><td>直接前往尾页</td></tr><tr><td>/</td><td>从上至下搜索某个关键词，如“/linux”</td></tr><tr><td>?</td><td>从下至上搜索某个关键词，如“?linux”</td></tr><tr><td>n</td><td>定位到下一个搜索到的关键词</td></tr><tr><td>N</td><td>定位到上一个搜索到的关键词</td></tr><tr><td>q</td><td>退出帮助文档</td></tr></tbody></table><h3 id="实例-6">实例</h3><ul class="lvl-0"><li class="lvl-2"><p>查看echo的man手册</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># man echo</span><br>ECHO(<span class="hljs-number">1</span>) General Commands Manual<br>ECHO(<span class="hljs-number">1</span>)<br><br>NAME(名称)<br>echo - 显示一行文本<br><br>SYNOPSIS(总览)<br>echo[OPTION]... [STRING]...<br><br>DESCRIPTION(描述)<br>允许在标准输出上显示STRING(s).<br><br>-n 不输出行尾的换行符.<br><br>-e 允许对下面列出的加反斜线转义的字符进行解释.<br><br>-E 禁止对在STRINGs中的那些序列进行解释.<br></code></pre></td></tr></table></figure><h2 id="alias">alias</h2><p>用于设置指令的别名</p><ul class="lvl-0"><li class="lvl-2"><p>查看系统当前的别名</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# alias # 查看系统当前的别名<br>alias cp=&#x27;cp -i&#x27;<br>alias egrep=&#x27;egrep --color=auto&#x27;<br>alias fgrep=&#x27;fgrep --color=auto&#x27;<br>alias grep=&#x27;grep --color=auto&#x27;<br>alias l.=&#x27;ls -d .* --color=auto&#x27;<br>alias ll=&#x27;ls -l --color=auto&#x27;<br>alias ls=&#x27;ls --color=auto&#x27;<br>alias mv=&#x27;mv -i&#x27;<br>alias rm=&#x27;rm -i&#x27;<br>alias which=&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --<br>show-tilde&#x27;<br>[root@localhost ~]# ll<br>总用量 4<br>-rw-------. 1 root root 1241 8月 22 2018 anaconda-ks.cfg<br>drwxr-xr-x. 2 root root 19 8月 21 12:15 home<br>[root@xwz ~]# type -a ls # 查看命令类型<br>ls 是 `ls --color=auto&#x27; 的别名<br>ls 是 /usr/bin/ls<br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改别名，比如使用wl来查看IP地址相关信息</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# alias wl=&#x27;ip address&#x27;<br>[root@localhost ~]# wl<br></code></pre></td></tr></table></figure><p>为了让别名永久生效，可以讲修改别名的命令写入 bashrc 文件，这个文件中的命令会在每次登陆 命令行的时候执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[root@localhost ~]<span class="hljs-comment"># echo &quot;alias wl=&#x27;ip address&#x27;&quot; &gt;&gt; /etc/bashrc</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/20220905/Linux%E5%9F%BA%E7%A1%80/"/>
    <url>/20220905/Linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1>操作系统简介</h1><p>一台机器往往有不同的零件组成，一台电脑也是由很多不同的硬件组成，这么多的硬件设备，就需要有 一个系统去代替我们管理好，这个就是操作系统。</p><p>操作系统需要完成的任务很简单，就是去学习每个硬件的不同使用方法，专业的术语叫“安装驱动程 序”，当操作系统学会了每个硬件的使用方法之后，就会以某种人类可以操作的方式来被人类使用，有的 操作系统是图形化界面的，我们可以鼠标点击来操作，有的是命令行的，我们需要输入命令来操作，不 管是哪种方式，最终都是让计算机硬件来为我们而工作。</p><p><img src="image-20220712175654274.png" alt="系统基本架构"></p><h1>Linux操作系统</h1><p>不同的人对计算机有不同的操作习惯，不同的使用场景对操作系统有不同的挑战，所以当前就出现了多 种多样的操作系统</p><ul class="lvl-0"><li class="lvl-2"><p>Windows</p><ul class="lvl-2"><li class="lvl-4">收费闭源操作系统，主要用于日常办公、游戏、娱乐多一些</li></ul></li><li class="lvl-2"><p>Linux</p><ul class="lvl-2"><li class="lvl-4">免费的，开源的，主要用于服务器领域，性能稳定，安全</li></ul></li><li class="lvl-2"><p>Unix</p><ul class="lvl-2"><li class="lvl-4">用于封闭的硬件环境，企业的应用依赖于定制化开发</li></ul></li></ul><p>Linux图谱</p><p>Linux发展到今天出现了大量不同的分支。不同的分支都有不同的发展方向，可以扫描下面二维码，查看 Linux发现分支图</p><p><img src="image-20220712175846050.png" alt="Linux图谱"></p><h1>Linux名词</h1><ul class="lvl-0"><li class="lvl-2"><p>Linux系统内核指的是一个由Linus Torvalds负责维护，提供硬件抽象层、硬盘及文件系统控制及多 任务功能的系统核心程序。</p></li><li class="lvl-2"><p>Linux发行套件系统是我们常说的Linux操作系统，也即是由Linux内核与各种常用软件的集合产品</p></li></ul><h1>RedHat认证</h1><p>redhat是目前全球最大的Linux商业公司，redhat为Linux技术工程师提供了一个考试认证，通过这个考 试认证的工程师，可以获得redhat公司颁发的证书</p><p>在行业内，redhat的技术证书还是占有很高的含金量的，证书的认证难度依次如下</p><p><img src="image-20220712175938064.png" alt="RedHat认证"></p><h2 id="RHCSA">RHCSA</h2><ul class="lvl-0"><li class="lvl-2"><p>管理文件、目录、文档以及命令行环境；</p></li><li class="lvl-2"><p>使用分区、LVM逻辑卷管理本地存储；</p></li><li class="lvl-2"><p>安装、更新、维护、配置系统与核心服务；</p></li><li class="lvl-2"><p>熟练创建、修改、删除用户与用户组，并使用LDAP进行集中目录身份认证；</p></li><li class="lvl-2"><p>熟练配置防火墙以及SELinux来保障系统安全。</p></li></ul><h2 id="RHCE">RHCE</h2><ul class="lvl-0"><li class="lvl-2"><p>熟练配置防火墙规则链与SElinux安全上下文；</p></li><li class="lvl-2"><p>配置iSCSI（互联网小型计算机系统接口）服务；</p></li><li class="lvl-2"><p>编写Shell脚本来批量创建用户、自动完成系统的维护任务；</p></li><li class="lvl-2"><p>配置HTTP/HTTPS网络服务；</p></li><li class="lvl-2"><p>配置FTP服务；</p></li><li class="lvl-2"><p>配置NFS服务；</p></li><li class="lvl-2"><p>配置SMB服务；</p></li><li class="lvl-2"><p>配置SMTP服务；</p></li><li class="lvl-2"><p>配置SSH服务；</p></li><li class="lvl-2"><p>配置NTP服务。</p></li><li class="lvl-2"><p>自动化运维工具ansible</p></li></ul><h2 id="RHCA">RHCA</h2><p>欲取得红帽RHCA认证，您必须通过以下任意5门认证考试。</p><table><thead><tr><th>考试代码</th><th>认证名称</th></tr></thead><tbody><tr><td>EX210</td><td>红帽OpenStack 认证系统管理员考试</td></tr><tr><td>EX220</td><td>红帽OpenStack 认证系统管理员考试</td></tr><tr><td>EX236</td><td>红帽混合云存储专业技能证书考试</td></tr><tr><td>EX248</td><td>红帽认证 JBoss管理员考试</td></tr><tr><td>EX280</td><td>红帽平台即服务专业技能证书考试</td></tr><tr><td>EX318</td><td>红帽认证虚拟化管理员考试</td></tr><tr><td>EX401</td><td>红帽部署和系统管理专业技能证书考试</td></tr><tr><td>EX413</td><td>红帽服务器固化专业技能证书考试</td></tr><tr><td>EX436</td><td>红帽集群和存储管理专业技能证书考试</td></tr><tr><td>EX442</td><td>红帽性能调优专业技能证书考试</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux初接触</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware的介绍与扩展</title>
    <link href="/20220905/VMware%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%89%A9%E5%B1%95/"/>
    <url>/20220905/VMware%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1>服务器虚拟化方向能</h1><h2 id="一变多">一变多</h2><ul class="lvl-0"><li class="lvl-2"><p>将一台服务器虚拟化成更多的虚拟机</p><ul class="lvl-2"><li class="lvl-4">大型机的虚拟化：IBM的LPAR</li><li class="lvl-4">X86平台虚拟化：Vmware、XenServer、Hyper-v、KVM、Qemu等</li></ul></li></ul><h2 id="多变一">多变一</h2><ul class="lvl-0"><li class="lvl-2"><p>将多台服务器虚拟成一台虚拟机</p><ul class="lvl-2"><li class="lvl-4">分布式运算（Distributed Computing）</li><li class="lvl-4">网格计算（Grid Computing）</li><li class="lvl-4">并行计算（Parallel Computing）</li><li class="lvl-4">高性能运算（HPC）</li></ul></li></ul><h1>虚拟化特征</h1><ul class="lvl-0"><li class="lvl-2"><p>云计算是一种计算方法，它将按需提供的自助管理虚拟基础架构汇集成高效池，以服务的形式提供计算</p></li><li class="lvl-2"><p>通过提高利用率和实现自动化获得高效性</p><ul class="lvl-2"><li class="lvl-4">池化<ul class="lvl-4"><li class="lvl-6">将计算机转变为按需提供的极富弹性的资源池</li></ul></li><li class="lvl-4">零接触式基础架构<ul class="lvl-4"><li class="lvl-6">以策略驱动的方式实现资源调配、部署和管理自动化</li></ul></li></ul></li><li class="lvl-2"><p>兼具敏捷性和可控性</p><ul class="lvl-2"><li class="lvl-4">自助服务<ul class="lvl-4"><li class="lvl-6">通过基于策略的资源调配和部署实现轻松访问</li></ul></li><li class="lvl-4">控制能力<ul class="lvl-4"><li class="lvl-6">基础架构可识别应用程序，并提供内置的可用性可扩展性、安全性和性能保证</li></ul></li></ul></li><li class="lvl-2"><p>选择的灵活性</p><ul class="lvl-2"><li class="lvl-4">开放和互操作<ul class="lvl-4"><li class="lvl-6">应用程序可基于开放标准在云之间实现移动</li></ul></li><li class="lvl-4">利用现有投资<ul class="lvl-4"><li class="lvl-6">云计算为现有应用程序和数据中心带来诸多优势</li></ul></li></ul></li></ul><h1>虚拟化架构</h1><h2 id="寄居架构（Hosted-Architecture）">寄居架构（Hosted Architecture）</h2><ul class="lvl-0"><li class="lvl-2"><p>在操作系统之上安装和运行虚拟化程序，依赖于主机操作系统对设备的支持和物理资源的管理</p><ul class="lvl-2"><li class="lvl-4">优点：简单，便于实现</li><li class="lvl-4">缺点：安装和运行应用程序依赖于主机操作系统对设备的支持</li></ul></li></ul><p><img src="image-20220712135004615.png" alt="寄居架构图解"></p><h2 id="裸金属架构（“Bare-Metal”-Architecture）">裸金属架构（“Bare Metal” Architecture）</h2><ul class="lvl-0"><li class="lvl-2"><p>直接在硬件上面安装虚拟化软件，再在其上安装操作系统和应用，依赖虚拟层内核和服务器控制台进行管理。</p><ul class="lvl-2"><li class="lvl-4">优点：虚拟机不依赖于操作系统，可以支持多种操作系统，多种应用，更加灵活</li><li class="lvl-4">缺点：虚拟层内核开发难度较大</li></ul></li></ul><p><img src="image-20220712135041252.png" alt="裸金属架构图解"></p><h3 id="虚拟化架构特性">虚拟化架构特性</h3><p><img src="image-20220712135105334.png" alt="虚拟化架构特性"></p><h3 id="vSphere数据中心的物理拓扑结构">vSphere数据中心的物理拓扑结构</h3><p><img src="image-20220712135121270.png" alt="vSphere数据中心的物理拓扑结构"></p><h1>虚拟化优势</h1><h2 id="IT投资角度">IT投资角度</h2><p><img src="image-20220712135200218.png" alt="优势0"></p><p><img src="image-20220712135221194.png" alt="优势1"></p><h2 id="总体拥有成本（TCO）">总体拥有成本（TCO）</h2><p><img src="image-20220712135242000.png" alt="TCO优势"></p><h1>vShpere基础功能介绍</h1><h2 id="vmotion">vmotion</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>Vmotion是什么？</strong></p><ul class="lvl-2"><li class="lvl-4">通过Vmware Vmotion可以实现虚拟机的动态迁移，而服务不中不断</li></ul></li><li class="lvl-2"><p>客户优势</p><ul class="lvl-2"><li class="lvl-4">零宕机时间：进行有计划的服务器维护和升级迁移工作负债，资源利用率最大化</li><li class="lvl-4">服务器的持续可用性，完整的交易集成</li><li class="lvl-4">支持Fibre Channel和iSCSI SAN环境以及NAS</li></ul></li></ul><p><img src="image-20220712135419592.png" alt="客户优势"></p><h2 id="HA">HA</h2><ul class="lvl-0"><li class="lvl-2"><p>VMware HA是什么？</p><ul class="lvl-2"><li class="lvl-4">Vmware HA就是发生服务器故障是在其他的物理服务器上自动重启虚拟机</li></ul></li><li class="lvl-2"><p>技术优势</p><ul class="lvl-2"><li class="lvl-4">对所有的应用实现了高可用性，并且成本很低</li><li class="lvl-4">不需要完全一致的重复硬件</li><li class="lvl-4">比传统的集群有更高的成本优势，同时易于使用和操作</li></ul></li></ul><p><img src="image-20220712135518478.png" alt="资源池"></p><h2 id="分布式资源调度（DRS）">分布式资源调度（DRS）</h2><ul class="lvl-0"><li class="lvl-2"><p>功能</p><ul class="lvl-2"><li class="lvl-4">跨资源池动态调整计算资源</li><li class="lvl-4">基于预定义的规则智能分配资源</li></ul></li><li class="lvl-2"><p>优势</p><ul class="lvl-2"><li class="lvl-4">使IT和业务优先级对应</li><li class="lvl-4">动态提高系统管理效率</li><li class="lvl-4">自动化的硬件维护</li></ul></li></ul><p><img src="image-20220712135611736.png" alt="资源调度图示"></p><h2 id="VMware-Fault-Tolerance（FT）">VMware Fault Tolerance（FT）</h2><p><img src="image-20220712135629432.png" alt="FT技术"></p>]]></content>
    
    
    <categories>
      
      <category>虚拟机技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云计算介绍</title>
    <link href="/20220905/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BB%8B%E7%BB%8D/"/>
    <url>/20220905/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1>云计算</h1><ul class="lvl-0"><li class="lvl-2">从炒概念到人人皆知</li><li class="lvl-2">发展历程<ul class="lvl-2"><li class="lvl-4">IT需求较少，单机阶段</li><li class="lvl-4">IT需求增多，资源集中管理</li><li class="lvl-4">对稳定性安全性提出更高的要求</li><li class="lvl-4">业务操作系统迁往虚拟机</li><li class="lvl-4">分布式计算需求</li><li class="lvl-4">业务应用隔离与虚拟化</li></ul></li><li class="lvl-2">将各个应用比喻成一个个租客，那么云计算就是物业管理</li></ul><h1>三种服务模式</h1><ul class="lvl-0"><li class="lvl-2"><p>SAAS(Software as a Service)</p></li><li class="lvl-2"><p>PAAS(Platform as a Service)</p></li><li class="lvl-2"><p>IAAS(Infrastructure as a Service）</p></li></ul><p><img src="image-20220712134324760.png" alt="三种服务模式图解"></p>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云计算学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
